{
  "address": "0xC0534d886B6f6b1a82633c0dC7177141cFf70060",
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "_gaugeAddr", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "_delegateGauge", "type": "address" }
      ],
      "name": "DelegateGaugeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "bool", "name": "_distributionsOn", "type": "bool" }],
      "name": "DistributionsToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "_controller", "type": "address" }],
      "name": "GaugeControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "gaugeAddr", "type": "address" },
        { "indexed": false, "internalType": "bool", "name": "newStatus", "type": "bool" }
      ],
      "name": "GaugeToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "_delegateGauge", "type": "address" },
        { "indexed": false, "internalType": "bool", "name": "_isInterfaceKnown", "type": "bool" }
      ],
      "name": "InterfaceKnownToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "uint256", "name": "_newRate", "type": "uint256" }],
      "name": "RateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "gaugeAddr", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "rewardTally", "type": "uint256" }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256", "name": "time", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "rate", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "supply", "type": "uint256" }
      ],
      "name": "UpdateMiningParameters",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATE_REDUCTION_COEFFICIENT",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATE_REDUCTION_TIME",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [{ "internalType": "contract IGaugeController", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegateGauge",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "delegateGauges",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "gaugeAddr", "type": "address" }],
      "name": "distributeReward",
      "outputs": [
        { "internalType": "uint256", "name": "", "type": "uint256" },
        { "internalType": "uint256", "name": "", "type": "uint256" }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address[]", "name": "gauges", "type": "address[]" }],
      "name": "distributeRewardToMultipleGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionsOn",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_rewardToken", "type": "address" },
        { "internalType": "address", "name": "_controller", "type": "address" },
        { "internalType": "uint256", "name": "_initialRate", "type": "uint256" },
        { "internalType": "uint256", "name": "_startEpochSupply", "type": "uint256" },
        { "internalType": "address", "name": "governor", "type": "address" },
        { "internalType": "address", "name": "guardian", "type": "address" },
        { "internalType": "address", "name": "_delegateGauge", "type": "address" }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "isInterfaceKnown",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "killedGauges",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "lastTimeGaugePaid",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miningEpoch",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "gaugeAddr", "type": "address" },
        { "internalType": "address", "name": "_delegateGauge", "type": "address" },
        { "internalType": "bool", "name": "toggleInterface", "type": "bool" }
      ],
      "name": "setDelegateGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "_controller", "type": "address" }],
      "name": "setGaugeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "_newRate", "type": "uint256" }],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startEpochSupply",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startEpochTime",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "toggleDistributions", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [{ "internalType": "address", "name": "gaugeAddr", "type": "address" }],
      "name": "toggleGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "_delegateGauge", "type": "address" }],
      "name": "toggleInterfaceKnown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateMiningParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x939f0ccfa17b7693e42ea7ee15999a9cc12f5e3ea599e49866818654874e3954",
  "receipt": {
    "to": null,
    "from": "0x2Acd062Cf718c87c9A58382f01C5b51a0f287C8D",
    "contractAddress": "0xC0534d886B6f6b1a82633c0dC7177141cFf70060",
    "transactionIndex": 35,
    "gasUsed": "2625673",
    "logsBloom": "0x
    "blockHash": "0x7b544c75abf620cae5d40e0037621b1f511ac7d2cc7abfbf5bf1cae0fe46a1f3",
    "transactionHash": "0x939f0ccfa17b7693e42ea7ee15999a9cc12f5e3ea599e49866818654874e3954",
    "logs": [],
    "blockNumber": 13983404,
    "cumulativeGasUsed": "4790107",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cd4ceda3fb7dd7eaa7a0623bf08b2ed8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gaugeAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegateGauge\",\"type\":\"address\"}],\"name\":\"DelegateGaugeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_distributionsOn\",\"type\":\"bool\"}],\"name\":\"DistributionsToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"GaugeControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"GaugeToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegateGauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isInterfaceKnown\",\"type\":\"bool\"}],\"name\":\"InterfaceKnownToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTally\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"UpdateMiningParameters\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_REDUCTION_COEFFICIENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_REDUCTION_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateGauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gaugeAddr\",\"type\":\"address\"}],\"name\":\"distributeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"}],\"name\":\"distributeRewardToMultipleGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startEpochSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegateGauge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInterfaceKnown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"killedGauges\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeGaugePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gaugeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegateGauge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggleInterface\",\"type\":\"bool\"}],\"name\":\"setDelegateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setGaugeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startEpochSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gaugeAddr\",\"type\":\"address\"}],\"name\":\"toggleGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateGauge\",\"type\":\"address\"}],\"name\":\"toggleInterfaceKnown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMiningParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Forked from contracts developed by Curve and Frax and adapted by Angle Core Team - ERC20CRV.vy (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/ERC20CRV.vy) - FraxGaugeFXSRewardsDistributor.sol (https://github.com/FraxFinance/frax-solidity/blob/master/src/hardhat/contracts/Curve/FraxGaugeFXSRewardsDistributor.sol)\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"distributeReward(address)\":{\"details\":\"Anyone can call this function to distribute rewards to the different staking contracts\",\"params\":{\"gaugeAddr\":\"Address of the gauge to send tokens too\"},\"returns\":{\"_0\":\"weeksElapsed Number of weeks elapsed since the last time rewards were distributed\",\"_1\":\"rewardTally Amount of tokens sent to the gauge\"}},\"distributeRewardToMultipleGauges(address[])\":{\"details\":\"Anyone can call this function to distribute rewards to the different staking contractsCompared with the `distributeReward` function, this function sends rewards to multiple contracts at the same time\",\"params\":{\"gauges\":\"Addresses of the gauge to send tokens too\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,address,address,address)\":{\"details\":\"After this contract is created, the correct amount of ANGLE tokens should be transferred to the contractThe `_delegateGauge` can be the zero address\",\"params\":{\"_controller\":\"Address of the GaugeController\",\"_delegateGauge\":\"Address that will be used to pull rewards for type 2 gauges\",\"_initialRate\":\"Initial ANGLE emission rate\",\"_rewardToken\":\"Address of the ANGLE token\",\"_startEpochSupply\":\"Amount of ANGLE tokens already distributed via liquidity mining\",\"governor\":\"Governor address of the contract\",\"guardian\":\"Address of the guardian of this contract\"}},\"recoverERC20(address,address,uint256)\":{\"details\":\"Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holdersThis function could also be used to recover ANGLE tokens in case the rate got smaller\",\"params\":{\"amount\":\"Amount to transfer\",\"to\":\"Address to transfer to\",\"tokenAddress\":\"Address of the ERC20 token to withdraw\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setDelegateGauge(address,address,bool)\":{\"details\":\"This function can be used to remove delegating or introduce the pulling of rewards to a given addressIf `gaugeAddr` is the zero address, this function updates the delegate gauge common to all gauges with type >= 2The `toggleInterface` parameter has been added for convenience to save one transaction when adding a gauge delegate which supports the `notifyReward` interface\",\"params\":{\"_delegateGauge\":\"Address of the new gauge delegate related to `gaugeAddr`\",\"gaugeAddr\":\"Gauge to change the delegate of\",\"toggleInterface\":\"Whether we should toggle the fact that the `_delegateGauge` is built for automation or not\"}},\"setGaugeController(address)\":{\"params\":{\"_controller\":\"Address of the new gauge controller\"}},\"setRate(uint256)\":{\"details\":\"It is important to be super wary when calling this function and to make sure that `distributeReward` has been called for all gauges in the past weeks. If not, gauges may get an incorrect distribution of ANGLE rewards for these past weeks based on the new rate and not on the old rateGovernance should thus make sure to call this function rarely and when it does to do it after the weekly `distributeReward` calls for all existing gaugesAs this function assumes that `distributeReward` has been called during the week, it also assumes that the `startEpochSupply` parameter has been put up to date\",\"params\":{\"_newRate\":\"New ANGLE emission rate\"}},\"toggleGauge(address)\":{\"details\":\"It is impossible to kill a gauge in the `GaugeController` contract, for this reason killing of gauges takes place in the `AngleDistributor` contractThis means that people could vote for a gauge in the gauge controller contract but that rewards are not going to be distributed to it in the end: people would need to remove their weights on the gauge killed to end the diminution in rewardsIn the case of a gauge being killed, this function resets the timestamps at which this gauge has been approved and disapproves the gauge to spend the tokenIt should be cautiously called by governance as it could result in less ANGLE overall rewards than initially planned if people do not remove their voting weights to the killed gauge\",\"params\":{\"gaugeAddr\":\"Gauge to toggle the status of\"}},\"toggleInterfaceKnown(address)\":{\"details\":\"Gauge delegates that are built for automation should be toggled\",\"params\":{\"_delegateGauge\":\"Address of the gauge to change\"}},\"updateMiningParameters()\":{\"details\":\"Callable by any address, but only once per epoch\"}},\"title\":\"AngleDistributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE()\":{\"notice\":\"Base used for computation\"},\"GOVERNOR_ROLE()\":{\"notice\":\"Role for governors only\"},\"GUARDIAN_ROLE()\":{\"notice\":\"Role for the guardian\"},\"RATE_REDUCTION_COEFFICIENT()\":{\"notice\":\"Reduction of the emission rate\"},\"RATE_REDUCTION_TIME()\":{\"notice\":\"Time at which the emission rate is updated\"},\"WEEK()\":{\"notice\":\"Length of a week in seconds\"},\"controller()\":{\"notice\":\"Address of the `GaugeController` contract\"},\"delegateGauge()\":{\"notice\":\"Address responsible for pulling rewards of type >= 2 gauges and distributing it to the associated contracts if there is not already an address delegated for this specific contract\"},\"delegateGauges(address)\":{\"notice\":\"Maps the address of a type >= 2 gauge to a delegate address responsible for giving rewards to the actual gauge\"},\"distributeReward(address)\":{\"notice\":\"Distributes rewards to a staking contract (also called gauge)\"},\"distributeRewardToMultipleGauges(address[])\":{\"notice\":\"Distributes rewards to multiple staking contracts\"},\"distributionsOn()\":{\"notice\":\"Whether ANGLE distribution through this contract is on or no\"},\"initialize(address,address,uint256,uint256,address,address,address)\":{\"notice\":\"Constructor of the contract\"},\"isInterfaceKnown(address)\":{\"notice\":\"Maps the address of a gauge delegate to whether this delegate supports the `notifyReward` interface and is therefore built for automation\"},\"killedGauges(address)\":{\"notice\":\"Maps the address of a gauge to whether it was killed or not A gauge killed in this contract cannot receive any rewards\"},\"lastTimeGaugePaid(address)\":{\"notice\":\"Maps the address of a gauge to the last time this gauge received rewards\"},\"miningEpoch()\":{\"notice\":\"Index of the current emission epoch Here also, this variable is not useful per se inside the smart contracts of the protocol, it is just an informational variable\"},\"rate()\":{\"notice\":\"ANGLE current emission rate, it is first defined in the initializer and then updated every week\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens that could accrue on this contract\"},\"rewardToken()\":{\"notice\":\"Address of the ANGLE token given as a reward\"},\"setDelegateGauge(address,address,bool)\":{\"notice\":\"Sets a new delegate gauge for pulling rewards of a type >= 2 gauges or of all type >= 2 gauges\"},\"setGaugeController(address)\":{\"notice\":\"Sets a new gauge controller\"},\"setRate(uint256)\":{\"notice\":\"Changes the ANGLE emission rate\"},\"startEpochSupply()\":{\"notice\":\"Amount of ANGLE tokens distributed through staking at the start of the epoch This is an informational variable used to track how much has been distributed through liquidity mining\"},\"startEpochTime()\":{\"notice\":\"Timestamp at which the current emission epoch started\"},\"toggleDistributions()\":{\"notice\":\"Halts or activates distribution of rewards\"},\"toggleGauge(address)\":{\"notice\":\"Toggles the status of a gauge to either killed or unkilled\"},\"toggleInterfaceKnown(address)\":{\"notice\":\"Notifies that the interface of a gauge delegate is known or has changed\"},\"updateMiningParameters()\":{\"notice\":\"Updates mining rate and supply at the start of the epoch\"}},\"notice\":\"All the events used in `AngleDistributor` contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/AngleDistributor.sol\":\"AngleDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/external/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x161129b95e15270676c09330a5518e4d812b65af30a675a376dc2da463b01238\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAngleMiddlemanGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\ninterface IAngleMiddlemanGauge {\\n    function notifyReward(address gauge, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x28777d3af3e7b0d015792931c3d2a097ac8dde37f7052176e1308d19b2a7cbee\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\ninterface IGaugeController {\\n    //solhint-disable-next-line\\n    function gauge_types(address addr) external view returns (int128);\\n\\n    //solhint-disable-next-line\\n    function gauge_relative_weight_write(address addr, uint256 timestamp) external returns (uint256);\\n\\n    //solhint-disable-next-line\\n    function gauge_relative_weight(address addr, uint256 timestamp) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x90e183d21dc30d25dc0457a824aa7ba82133db30de19a2a7db292e5cf7237c8f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\ninterface ILiquidityGauge {\\n    // solhint-disable-next-line\\n    function deposit_reward_token(address _rewardToken, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x7eb641b96968683995cf54c21b4f698a7ba43e7e8108c2492910a26a37fc8b6c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IStakingRewardsFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\\ninterface IStakingRewardsFunctions {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function setNewRewardsDistribution(address newRewardsDistribution) external;\\n}\\n\\n/// @title IStakingRewards\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IStakingRewards is IStakingRewardsFunctions {\\n    function rewardToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xade33925dd7db841ece4880f783d9b6795db17c1189961ff43f760a44943700c\",\"license\":\"GPL-3.0\"},\"contracts/staking/AngleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./AngleDistributorEvents.sol\\\";\\n\\n/// @title AngleDistributor\\n/// @author Forked from contracts developed by Curve and Frax and adapted by Angle Core Team\\n/// - ERC20CRV.vy (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/ERC20CRV.vy)\\n/// - FraxGaugeFXSRewardsDistributor.sol (https://github.com/FraxFinance/frax-solidity/blob/master/src/hardhat/contracts/Curve/FraxGaugeFXSRewardsDistributor.sol)\\n/// @notice All the events used in `AngleDistributor` contract\\ncontract AngleDistributor is AngleDistributorEvents, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Role for governors only\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    /// @notice Role for the guardian\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    /// @notice Length of a week in seconds\\n    uint256 public constant WEEK = 3600 * 24 * 7;\\n\\n    /// @notice Time at which the emission rate is updated\\n    uint256 public constant RATE_REDUCTION_TIME = WEEK;\\n\\n    /// @notice Reduction of the emission rate\\n    uint256 public constant RATE_REDUCTION_COEFFICIENT = 1007827884862117171; // 1.5 ^ (1/52) * 10**18\\n\\n    /// @notice Base used for computation\\n    uint256 public constant BASE = 10**18;\\n\\n    /// @notice Maps the address of a gauge to the last time this gauge received rewards\\n    mapping(address => uint256) public lastTimeGaugePaid;\\n\\n    /// @notice Maps the address of a gauge to whether it was killed or not\\n    /// A gauge killed in this contract cannot receive any rewards\\n    mapping(address => bool) public killedGauges;\\n\\n    /// @notice Maps the address of a type >= 2 gauge to a delegate address responsible\\n    /// for giving rewards to the actual gauge\\n    mapping(address => address) public delegateGauges;\\n\\n    /// @notice Maps the address of a gauge delegate to whether this delegate supports the `notifyReward` interface\\n    /// and is therefore built for automation\\n    mapping(address => bool) public isInterfaceKnown;\\n\\n    /// @notice Address of the ANGLE token given as a reward\\n    IERC20 public rewardToken;\\n\\n    /// @notice Address of the `GaugeController` contract\\n    IGaugeController public controller;\\n\\n    /// @notice Address responsible for pulling rewards of type >= 2 gauges and distributing it to the\\n    /// associated contracts if there is not already an address delegated for this specific contract\\n    address public delegateGauge;\\n\\n    /// @notice ANGLE current emission rate, it is first defined in the initializer and then updated every week\\n    uint256 public rate;\\n\\n    /// @notice Timestamp at which the current emission epoch started\\n    uint256 public startEpochTime;\\n\\n    /// @notice Amount of ANGLE tokens distributed through staking at the start of the epoch\\n    /// This is an informational variable used to track how much has been distributed through liquidity mining\\n    uint256 public startEpochSupply;\\n\\n    /// @notice Index of the current emission epoch\\n    /// Here also, this variable is not useful per se inside the smart contracts of the protocol, it is\\n    /// just an informational variable\\n    uint256 public miningEpoch;\\n\\n    /// @notice Whether ANGLE distribution through this contract is on or no\\n    bool public distributionsOn;\\n\\n    /// @notice Constructor of the contract\\n    /// @param _rewardToken Address of the ANGLE token\\n    /// @param _controller Address of the GaugeController\\n    /// @param _initialRate Initial ANGLE emission rate\\n    /// @param _startEpochSupply Amount of ANGLE tokens already distributed via liquidity mining\\n    /// @param governor Governor address of the contract\\n    /// @param guardian Address of the guardian of this contract\\n    /// @param _delegateGauge Address that will be used to pull rewards for type 2 gauges\\n    /// @dev After this contract is created, the correct amount of ANGLE tokens should be transferred to the contract\\n    /// @dev The `_delegateGauge` can be the zero address\\n    function initialize(\\n        address _rewardToken,\\n        address _controller,\\n        uint256 _initialRate,\\n        uint256 _startEpochSupply,\\n        address governor,\\n        address guardian,\\n        address _delegateGauge\\n    ) external initializer {\\n        require(\\n            _controller != address(0) && _rewardToken != address(0) && guardian != address(0) && governor != address(0),\\n            \\\"0\\\"\\n        );\\n        rewardToken = IERC20(_rewardToken);\\n        controller = IGaugeController(_controller);\\n        startEpochSupply = _startEpochSupply;\\n        miningEpoch = 0;\\n        // Some ANGLE tokens should be sent to the contract directly after initialization\\n        rate = _initialRate;\\n        delegateGauge = _delegateGauge;\\n        distributionsOn = false;\\n        startEpochTime = block.timestamp;\\n        _setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, GOVERNOR_ROLE);\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(GOVERNOR_ROLE, governor);\\n        _setupRole(GUARDIAN_ROLE, governor);\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ======================== Internal Functions =================================\\n\\n    /// @notice Internal function to distribute rewards to a gauge\\n    /// @param gaugeAddr Address of the gauge to distribute rewards to\\n    /// @return weeksElapsed Weeks elapsed since the last call\\n    /// @return rewardTally Amount of rewards distributed to the gauge\\n    /// @dev The reason for having an internal function is that it's called by the `distributeReward` and the\\n    /// `distributeRewardToMultipleGauges`\\n    /// @dev Although they would need to be performed all the time this function is called, this function does not\\n    /// contain checks on whether distribution is on, and on whether rate should be reduced. These are done in each external\\n    /// function calling this function for gas efficiency\\n    function _distributeReward(address gaugeAddr) internal returns (uint256 weeksElapsed, uint256 rewardTally) {\\n        // Checking if the gauge has been added or if it still possible to distribute rewards to this gauge\\n        int128 gaugeType = IGaugeController(controller).gauge_types(gaugeAddr);\\n        require(gaugeType >= 0 && !killedGauges[gaugeAddr], \\\"110\\\");\\n\\n        // Calculate the elapsed time in weeks.\\n        uint256 lastTimePaid = lastTimeGaugePaid[gaugeAddr];\\n\\n        // Edge case for first reward for this gauge\\n        if (lastTimePaid == 0) {\\n            weeksElapsed = 1;\\n            if (gaugeType == 0) {\\n                // We give a full approval for the gauges with type zero which correspond to the staking\\n                // contracts of the protocol\\n                rewardToken.safeApprove(gaugeAddr, type(uint256).max);\\n            }\\n        } else {\\n            // Truncation desired\\n            weeksElapsed = (block.timestamp - lastTimePaid) / WEEK;\\n            // Return early here for 0 weeks instead of throwing, as it could have bad effects in other contracts\\n            if (weeksElapsed == 0) {\\n                return (0, 0);\\n            }\\n        }\\n        rewardTally = 0;\\n        // We use this variable to keep track of the emission rate across different weeks\\n        uint256 weeklyRate = rate;\\n        for (uint256 i = 0; i < weeksElapsed; i++) {\\n            uint256 relWeightAtWeek;\\n            if (i == 0) {\\n                // Mutative, for the current week: makes sure the weight is checkpointed. Also returns the weight.\\n                relWeightAtWeek = controller.gauge_relative_weight_write(gaugeAddr, block.timestamp);\\n            } else {\\n                // View\\n                relWeightAtWeek = controller.gauge_relative_weight(gaugeAddr, (block.timestamp - WEEK * i));\\n            }\\n            rewardTally += (weeklyRate * relWeightAtWeek * WEEK) / BASE;\\n\\n            // To get the rate of the week prior from the current rate we just have to multiply by the weekly division\\n            // factor\\n            // There may be some precisions error: inferred previous values of the rate may be different to what we would\\n            // have had if the rate had been computed correctly in these weeks: we expect from empirical observations\\n            // this `weeklyRate` to be inferior to what the `rate` would have been\\n            weeklyRate = (weeklyRate * RATE_REDUCTION_COEFFICIENT) / BASE;\\n        }\\n\\n        // Update the last time paid, rounded to the closest week\\n        // in order not to have an ever moving time on when to call this function\\n        lastTimeGaugePaid[gaugeAddr] = (block.timestamp / WEEK) * WEEK;\\n\\n        // If the `gaugeType >= 2`, this means that the gauge is a gauge on another chain (and corresponds to tokens\\n        // that need to be bridged) or is associated to an external contract of the Angle Protocol\\n        if (gaugeType >= 2) {\\n            // If it is defined, we use the specific delegate attached to the gauge\\n            address delegate = delegateGauges[gaugeAddr];\\n            if (delegate == address(0)) {\\n                // If not, we check if a delegate common to all gauges with type >= 2 can be used\\n                delegate = delegateGauge;\\n            }\\n            if (delegate != address(0)) {\\n                // In the case where the gauge has a delegate (specific or not), then rewards are transferred to this gauge\\n                rewardToken.safeTransfer(delegate, rewardTally);\\n                // If this delegate supports a specific interface, then rewards sent are notified through this\\n                // interface\\n                if (isInterfaceKnown[delegate]) {\\n                    IAngleMiddlemanGauge(delegate).notifyReward(gaugeAddr, rewardTally);\\n                }\\n            } else {\\n                rewardToken.safeTransfer(gaugeAddr, rewardTally);\\n            }\\n        } else if (gaugeType == 1) {\\n            // This is for the case of Perpetual contracts which need to be able to receive their reward tokens\\n            rewardToken.safeTransfer(gaugeAddr, rewardTally);\\n            IStakingRewards(gaugeAddr).notifyRewardAmount(rewardTally);\\n        } else {\\n            // Mainnet: Pay out the rewards directly to the gauge\\n            ILiquidityGauge(gaugeAddr).deposit_reward_token(address(rewardToken), rewardTally);\\n        }\\n        emit RewardDistributed(gaugeAddr, rewardTally);\\n    }\\n\\n    /// @notice Updates mining rate and supply at the start of the epoch\\n    /// @dev Any modifying mining call must also call this\\n    /// @dev It is possible that more than one week past between two calls of this function, and for this reason\\n    /// this function has been slightly modified from Curve implementation by Angle Team\\n    function _updateMiningParameters() internal {\\n        // When entering this function, we always have: `(block.timestamp - startEpochTime) / RATE_REDUCTION_TIME >= 1`\\n        uint256 epochDelta = (block.timestamp - startEpochTime) / RATE_REDUCTION_TIME;\\n\\n        // Storing intermediate values for the rate and for the `startEpochSupply`\\n        uint256 _rate = rate;\\n        uint256 _startEpochSupply = startEpochSupply;\\n\\n        startEpochTime += RATE_REDUCTION_TIME * epochDelta;\\n        miningEpoch += epochDelta;\\n\\n        for (uint256 i = 0; i < epochDelta; i++) {\\n            // Updating the intermediate values of the `startEpochSupply`\\n            _startEpochSupply += _rate * RATE_REDUCTION_TIME;\\n            _rate = (_rate * BASE) / RATE_REDUCTION_COEFFICIENT;\\n        }\\n        rate = _rate;\\n        startEpochSupply = _startEpochSupply;\\n        emit UpdateMiningParameters(block.timestamp, _rate, _startEpochSupply);\\n    }\\n\\n    /// @notice Toggles the fact that a gauge delegate can be used for automation or not and therefore supports\\n    /// the `notifyReward` interface\\n    /// @param _delegateGauge Address of the gauge to change\\n    function _toggleInterfaceKnown(address _delegateGauge) internal {\\n        bool isInterfaceKnownMem = isInterfaceKnown[_delegateGauge];\\n        isInterfaceKnown[_delegateGauge] = !isInterfaceKnownMem;\\n        emit InterfaceKnownToggled(_delegateGauge, !isInterfaceKnownMem);\\n    }\\n\\n    // ================= Permissionless External Functions =========================\\n\\n    /// @notice Distributes rewards to a staking contract (also called gauge)\\n    /// @param gaugeAddr Address of the gauge to send tokens too\\n    /// @return weeksElapsed Number of weeks elapsed since the last time rewards were distributed\\n    /// @return rewardTally Amount of tokens sent to the gauge\\n    /// @dev Anyone can call this function to distribute rewards to the different staking contracts\\n    function distributeReward(address gaugeAddr) external nonReentrant returns (uint256, uint256) {\\n        // Checking if distribution is on\\n        require(distributionsOn == true, \\\"109\\\");\\n        // Updating rate distribution parameters if need be\\n        if (block.timestamp >= startEpochTime + RATE_REDUCTION_TIME) {\\n            _updateMiningParameters();\\n        }\\n        return _distributeReward(gaugeAddr);\\n    }\\n\\n    /// @notice Distributes rewards to multiple staking contracts\\n    /// @param gauges Addresses of the gauge to send tokens too\\n    /// @dev Anyone can call this function to distribute rewards to the different staking contracts\\n    /// @dev Compared with the `distributeReward` function, this function sends rewards to multiple\\n    /// contracts at the same time\\n    function distributeRewardToMultipleGauges(address[] memory gauges) external nonReentrant {\\n        // Checking if distribution is on\\n        require(distributionsOn == true, \\\"109\\\");\\n        // Updating rate distribution parameters if need be\\n        if (block.timestamp >= startEpochTime + RATE_REDUCTION_TIME) {\\n            _updateMiningParameters();\\n        }\\n        for (uint256 i = 0; i < gauges.length; i++) {\\n            _distributeReward(gauges[i]);\\n        }\\n    }\\n\\n    /// @notice Updates mining rate and supply at the start of the epoch\\n    /// @dev Callable by any address, but only once per epoch\\n    function updateMiningParameters() external {\\n        require(block.timestamp >= startEpochTime + RATE_REDUCTION_TIME, \\\"108\\\");\\n        _updateMiningParameters();\\n    }\\n\\n    // ========================= Governor Functions ================================\\n\\n    /// @notice Withdraws ERC20 tokens that could accrue on this contract\\n    /// @param tokenAddress Address of the ERC20 token to withdraw\\n    /// @param to Address to transfer to\\n    /// @param amount Amount to transfer\\n    /// @dev Added to support recovering LP Rewards and other mistaken tokens\\n    /// from other systems to be distributed to holders\\n    /// @dev This function could also be used to recover ANGLE tokens in case the rate got smaller\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(GOVERNOR_ROLE) {\\n        // If the token is the ANGLE token, we need to make sure that governance is not going to withdraw\\n        // too many tokens and that it'll be able to sustain the weekly distribution forever\\n        // This check assumes that `distributeReward` has been called for gauges and that there are no gauges\\n        // which have not received their past week's rewards\\n        if (tokenAddress == address(rewardToken)) {\\n            uint256 currentBalance = rewardToken.balanceOf(address(this));\\n            // The amount distributed till the end is `rate * WEEK / (1 - RATE_REDUCTION_FACTOR)` where\\n            // `RATE_REDUCTION_FACTOR = BASE / RATE_REDUCTION_COEFFICIENT` which translates to:\\n            require(\\n                currentBalance >=\\n                    ((rate * RATE_REDUCTION_COEFFICIENT) * WEEK) / (RATE_REDUCTION_COEFFICIENT - BASE) + amount,\\n                \\\"4\\\"\\n            );\\n        }\\n        IERC20(tokenAddress).safeTransfer(to, amount);\\n        emit Recovered(tokenAddress, to, amount);\\n    }\\n\\n    /// @notice Sets a new gauge controller\\n    /// @param _controller Address of the new gauge controller\\n    function setGaugeController(address _controller) external onlyRole(GOVERNOR_ROLE) {\\n        require(_controller != address(0), \\\"0\\\");\\n        controller = IGaugeController(_controller);\\n        emit GaugeControllerUpdated(_controller);\\n    }\\n\\n    /// @notice Sets a new delegate gauge for pulling rewards of a type >= 2 gauges or of all type >= 2 gauges\\n    /// @param gaugeAddr Gauge to change the delegate of\\n    /// @param _delegateGauge Address of the new gauge delegate related to `gaugeAddr`\\n    /// @param toggleInterface Whether we should toggle the fact that the `_delegateGauge` is built for automation or not\\n    /// @dev This function can be used to remove delegating or introduce the pulling of rewards to a given address\\n    /// @dev If `gaugeAddr` is the zero address, this function updates the delegate gauge common to all gauges with type >= 2\\n    /// @dev The `toggleInterface` parameter has been added for convenience to save one transaction when adding a gauge delegate\\n    /// which supports the `notifyReward` interface\\n    function setDelegateGauge(\\n        address gaugeAddr,\\n        address _delegateGauge,\\n        bool toggleInterface\\n    ) external onlyRole(GOVERNOR_ROLE) {\\n        if (gaugeAddr != address(0)) {\\n            delegateGauges[gaugeAddr] = _delegateGauge;\\n        } else {\\n            delegateGauge = _delegateGauge;\\n        }\\n        emit DelegateGaugeUpdated(gaugeAddr, _delegateGauge);\\n\\n        if (toggleInterface) {\\n            _toggleInterfaceKnown(_delegateGauge);\\n        }\\n    }\\n\\n    /// @notice Changes the ANGLE emission rate\\n    /// @param _newRate New ANGLE emission rate\\n    /// @dev It is important to be super wary when calling this function and to make sure that `distributeReward`\\n    /// has been called for all gauges in the past weeks. If not, gauges may get an incorrect distribution of ANGLE rewards\\n    /// for these past weeks based on the new rate and not on the old rate\\n    /// @dev Governance should thus make sure to call this function rarely and when it does to do it after the weekly `distributeReward`\\n    /// calls for all existing gauges\\n    /// @dev As this function assumes that `distributeReward` has been called during the week, it also assumes that the `startEpochSupply`\\n    /// parameter has been put up to date\\n    function setRate(uint256 _newRate) external onlyRole(GOVERNOR_ROLE) {\\n        // Checking if the new rate is compatible with the amount of ANGLE tokens this contract has in balance\\n        // This check assumes, like this function, that `distributeReward` has correctly been called before\\n        require(\\n            rewardToken.balanceOf(address(this)) >=\\n                ((_newRate * RATE_REDUCTION_COEFFICIENT) * WEEK) / (RATE_REDUCTION_COEFFICIENT - BASE),\\n            \\\"4\\\"\\n        );\\n        rate = _newRate;\\n        emit RateUpdated(_newRate);\\n    }\\n\\n    /// @notice Toggles the status of a gauge to either killed or unkilled\\n    /// @param gaugeAddr Gauge to toggle the status of\\n    /// @dev It is impossible to kill a gauge in the `GaugeController` contract, for this reason killing of gauges\\n    /// takes place in the `AngleDistributor` contract\\n    /// @dev This means that people could vote for a gauge in the gauge controller contract but that rewards are not going\\n    /// to be distributed to it in the end: people would need to remove their weights on the gauge killed to end the diminution\\n    /// in rewards\\n    /// @dev In the case of a gauge being killed, this function resets the timestamps at which this gauge has been approved and\\n    /// disapproves the gauge to spend the token\\n    /// @dev It should be cautiously called by governance as it could result in less ANGLE overall rewards than initially planned\\n    /// if people do not remove their voting weights to the killed gauge\\n    function toggleGauge(address gaugeAddr) external onlyRole(GOVERNOR_ROLE) {\\n        bool gaugeKilledMem = killedGauges[gaugeAddr];\\n        if (!gaugeKilledMem) {\\n            delete lastTimeGaugePaid[gaugeAddr];\\n            rewardToken.safeApprove(gaugeAddr, 0);\\n        }\\n        killedGauges[gaugeAddr] = !gaugeKilledMem;\\n        emit GaugeToggled(gaugeAddr, !gaugeKilledMem);\\n    }\\n\\n    // ========================= Guardian Function =================================\\n\\n    /// @notice Halts or activates distribution of rewards\\n    function toggleDistributions() external onlyRole(GUARDIAN_ROLE) {\\n        bool distributionsOnMem = distributionsOn;\\n        distributionsOn = !distributionsOnMem;\\n        emit DistributionsToggled(!distributionsOnMem);\\n    }\\n\\n    /// @notice Notifies that the interface of a gauge delegate is known or has changed\\n    /// @param _delegateGauge Address of the gauge to change\\n    /// @dev Gauge delegates that are built for automation should be toggled\\n    function toggleInterfaceKnown(address _delegateGauge) external onlyRole(GUARDIAN_ROLE) {\\n        _toggleInterfaceKnown(_delegateGauge);\\n    }\\n}\\n\",\"keccak256\":\"0x8e5156c711ab3e6d9758ce4c4f47636ab733b132998cdf1591ac2c2fbc9662d4\",\"license\":\"GPL-3.0\"},\"contracts/staking/AngleDistributorEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IGaugeController.sol\\\";\\nimport \\\"../interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"../interfaces/IAngleMiddlemanGauge.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\n/// @title AngleDistributorEvents\\n/// @author Angle Core Team\\n/// @notice All the events used in `AngleDistributor` contract\\ncontract AngleDistributorEvents {\\n    event DelegateGaugeUpdated(address indexed _gaugeAddr, address indexed _delegateGauge);\\n    event DistributionsToggled(bool _distributionsOn);\\n    event GaugeControllerUpdated(address indexed _controller);\\n    event GaugeToggled(address indexed gaugeAddr, bool newStatus);\\n    event InterfaceKnownToggled(address indexed _delegateGauge, bool _isInterfaceKnown);\\n    event RateUpdated(uint256 _newRate);\\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n    event RewardDistributed(address indexed gaugeAddr, uint256 rewardTally);\\n    event UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\\n}\\n\",\"keccak256\":\"0x9de0f6ccba8ae2dda9c85322135d5d340bf255c6c0bdb22905d27c6700cd80c1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002c575060005460ff16155b620000945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000b7576000805461ffff19166101011790555b8015620000ca576000805461ff00191690555b50612e6180620000db6000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80636a3a1cbf11610145578063ccc57490116100bd578063eee62ac01161008c578063f77c479111610071578063f77c479114610559578063f7c618c114610579578063f905c0831461059957600080fd5b8063eee62ac014610546578063f4359ce5146104e257600080fd5b8063ccc57490146104f4578063d547741f1461051b578063dd5fbc9a1461052e578063ec342ad01461053757600080fd5b8063a217fddf11610114578063b72f0a2f116100f9578063b72f0a2f146104cf578063b87b5616146104e2578063cb626ae2146104ec57600080fd5b8063a217fddf146104a7578063af45d0df146104af57600080fd5b80636a3a1cbf146103c35780636b5cfefe146103e357806391d1485414610406578063a0ca59f01461044c57600080fd5b8063248a9ca3116101d8578063305d6d5f116101a757806336568abe1161018c57806336568abe146103945780633e785737146103a757806364ef6dd4146103ba57600080fd5b8063305d6d5f1461037957806334fcf4371461038157600080fd5b8063248a9ca31461031357806324ea54f4146103365780632c4e722e1461035d5780632f2ff15d1461036657600080fd5b8063174688971161021457806317468897146102ad5780631814a5b1146102e05780631f8a7edf146102f757806321609bbf1461030457600080fd5b806291d2b814610245578063092193ab1461025a5780631171bda914610287578063139ea9b41461029a575b600080fd5b6102586102533660046128c0565b6105ac565b005b61026d6102683660046128c0565b6106c9565b604080519283526020830191909152015b60405180910390f35b610258610295366004612922565b6107e5565b6102586102a83660046128db565b610a23565b6102d06102bb3660046128c0565b60686020526000908152604090205460ff1681565b604051901515815260200161027e565b6102e9606d5481565b60405190815260200161027e565b6070546102d09060ff1681565b6102e9670dfc861f1ff0953381565b6102e9610321366004612add565b60009081526033602052604090206001015490565b6102e97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6102e9606c5481565b610258610374366004612af6565b610b72565b610258610b9d565b61025861038f366004612add565b610c33565b6102586103a2366004612af6565b610de0565b6102586103b536600461295e565b610e6d565b6102e9606f5481565b6102e96103d13660046128c0565b60656020526000908152604090205481565b6102d06103f13660046128c0565b60666020526000908152604090205460ff1681565b6102d0610414366004612af6565b600091825260336020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61048261045a3660046128c0565b60676020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027e565b6102e9600081565b606b546104829073ffffffffffffffffffffffffffffffffffffffff1681565b6102586104dd3660046128c0565b6111fb565b6102e962093a8081565b610258611317565b6102e97f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b610258610529366004612af6565b61139b565b6102e9606e5481565b6102e9670de0b6b3a764000081565b6102586105543660046129d6565b6113c1565b606a546104829073ffffffffffffffffffffffffffffffffffffffff1681565b6069546104829073ffffffffffffffffffffffffffffffffffffffff1681565b6102586105a73660046128c0565b61150e565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556105d78133611542565b73ffffffffffffffffffffffffffffffffffffffff8216610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f300000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b606a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517ff3d6907bf00dd37e685d19085134f0fab4ced80b96963ef3e992dc7ac0324c5490600090a25050565b60008060026001541415610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610650565b6002600190815560705460ff161515146107af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303900000000000000000000000000000000000000000000000000000000006044820152606401610650565b62093a80606d546107c09190612c4c565b42106107ce576107ce611614565b6107d783611727565b600180559094909350915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108108133611542565b60695473ffffffffffffffffffffffffffffffffffffffff85811691161415610995576069546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190612b45565b9050826108f2670de0b6b3a7640000670dfc861f1ff09533612cdc565b62093a80670dfc861f1ff09533606c5461090c9190612c9f565b6109169190612c9f565b6109209190612c64565b61092a9190612c4c565b811015610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f34000000000000000000000000000000000000000000000000000000000000006044820152606401610650565b505b6109b673ffffffffffffffffffffffffffffffffffffffff85168484611e8c565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b64884604051610a1591815260200190565b60405180910390a350505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610a4e8133611542565b73ffffffffffffffffffffffffffffffffffffffff841615610ac25773ffffffffffffffffffffffffffffffffffffffff848116600090815260676020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055610b03565b606b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fe8c02e063c8958a09592bd47f86567ffc358244cae7a91f26807ca8e3a70a0de60405160405180910390a38115610b6c57610b6c83611f60565b50505050565b600082815260336020526040902060010154610b8e8133611542565b610b988383611ff0565b505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610bc88133611542565b6070805460ff811680157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921682179092556040519081527fa47e236370e478b9d163098c7c1f4f67b6efbb6683eeb0a669f04f302653779d906020015b60405180910390a15050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c5e8133611542565b610c78670de0b6b3a7640000670dfc861f1ff09533612cdc565b62093a80610c8e670dfc861f1ff0953385612c9f565b610c989190612c9f565b610ca29190612c64565b6069546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015610d0b57600080fd5b505afa158015610d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d439190612b45565b1015610dab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f34000000000000000000000000000000000000000000000000000000000000006044820152606401610650565b606c8290556040518281527fe65c987b2e4668e09ba867026921588005b2b2063607a1e7e7d91683c8f91b7b90602001610c27565b73ffffffffffffffffffffffffffffffffffffffff81163314610e5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610650565b610e6982826120ad565b5050565b600054610100900460ff1680610e86575060005460ff16155b610f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610650565b600054610100900460ff16158015610f5157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff871615801590610f8b575073ffffffffffffffffffffffffffffffffffffffff881615155b8015610fac575073ffffffffffffffffffffffffffffffffffffffff831615155b8015610fcd575073ffffffffffffffffffffffffffffffffffffffff841615155b611033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610650565b6069805473ffffffffffffffffffffffffffffffffffffffff808b167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255606a80548a8416908316179055606e8790556000606f55606c889055606b805492851692909116919091179055607080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905542606d556110fa7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5580612168565b6111447f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55612168565b61116e7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041846121bc565b6111987f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55856121bc565b6111c27f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041856121bc565b80156111f157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556112268133611542565b73ffffffffffffffffffffffffffffffffffffffff821660009081526066602052604090205460ff168061128d5773ffffffffffffffffffffffffffffffffffffffff808416600090815260656020526040812081905560695461128d92169085906121c6565b73ffffffffffffffffffffffffffffffffffffffff831660008181526066602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016851590811790915591519182527ff585f0f5078ec648738dbc4c4618f033a3f0d81e1602b044649d736d33ebac67910160405180910390a2505050565b62093a80606d546113289190612c4c565b421015611391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303800000000000000000000000000000000000000000000000000000000006044820152606401610650565b611399611614565b565b6000828152603360205260409020600101546113b78133611542565b610b9883836120ad565b6002600154141561142e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610650565b6002600190815560705460ff161515146114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303900000000000000000000000000000000000000000000000000000000006044820152606401610650565b62093a80606d546114b59190612c4c565b42106114c3576114c3611614565b60005b8151811015611506576114f18282815181106114e4576114e4612dbc565b6020026020010151611727565b505080806114fe90612d54565b9150506114c6565b505060018055565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416115398133611542565b610e6982611f60565b600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e695761159a8173ffffffffffffffffffffffffffffffffffffffff166014612357565b6115a5836020612357565b6040516020016115b6929190612b7a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261065091600401612bfb565b600062093a80606d54426116289190612cdc565b6116329190612c64565b606c54606e54919250906116498362093a80612c9f565b606d600082825461165a9190612c4c565b9250508190555082606f60008282546116739190612c4c565b90915550600090505b838110156116d65761169162093a8084612c9f565b61169b9083612c4c565b9150670dfc861f1ff095336116b8670de0b6b3a764000085612c9f565b6116c29190612c64565b9250806116ce81612d54565b91505061167c565b50606c829055606e81905560408051428152602081018490529081018290527f27e46362a1e6129b6dd539c984ce739291a97128dfcaeca1255e8ac83abd94419060600160405180910390a1505050565b606a546040517f3f9095b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000928392839290911690633f9095b79060240160206040518083038186803b15801561179957600080fd5b505afa1580156117ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d19190612b22565b9050600081600f0b1215801561180d575073ffffffffffffffffffffffffffffffffffffffff841660009081526066602052604090205460ff16155b611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313000000000000000000000000000000000000000000000000000000000006044820152606401610650565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260656020526040902054806118f7576001935081600f0b600014156118f2576069546118f29073ffffffffffffffffffffffffffffffffffffffff16867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6121c6565b611923565b62093a806119058242612cdc565b61190f9190612c64565b935083611923575060009485945092505050565b606c5460009350835b85811015611b39576000816119ed57606a546040517f6472eee100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015242602483015290911690636472eee190604401602060405180830381600087803b1580156119ae57600080fd5b505af11580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612b45565b9050611ac7565b606a5473ffffffffffffffffffffffffffffffffffffffff1663d3078c9489611a198562093a80612c9f565b611a239042612cdc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190612b45565b90505b670de0b6b3a764000062093a80611ade8386612c9f565b611ae89190612c9f565b611af29190612c64565b611afc9087612c4c565b9550670de0b6b3a7640000611b19670dfc861f1ff0953385612c9f565b611b239190612c64565b9250508080611b3190612d54565b91505061192c565b5062093a80611b488142612c64565b611b529190612c9f565b73ffffffffffffffffffffffffffffffffffffffff87166000908152606560205260409020556002600f84900b12611cf25773ffffffffffffffffffffffffffffffffffffffff8087166000908152606760205260409020541680611bcc5750606b5473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811615611cc857606954611c0c9073ffffffffffffffffffffffffffffffffffffffff168287611e8c565b73ffffffffffffffffffffffffffffffffffffffff811660009081526068602052604090205460ff1615611cc3576040517fe324718000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820187905282169063e324718090604401600060405180830381600087803b158015611caa57600080fd5b505af1158015611cbe573d6000803e3d6000fd5b505050505b611cec565b606954611cec9073ffffffffffffffffffffffffffffffffffffffff168887611e8c565b50611e34565b82600f0b60011415611da757606954611d229073ffffffffffffffffffffffffffffffffffffffff168786611e8c565b6040517f3c6b16ab0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff871690633c6b16ab90602401600060405180830381600087803b158015611d8a57600080fd5b505af1158015611d9e573d6000803e3d6000fd5b50505050611e34565b6069546040517f93f7aa6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101869052908716906393f7aa6790604401600060405180830381600087803b158015611e1b57600080fd5b505af1158015611e2f573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff167fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea685604051611e7c91815260200190565b60405180910390a2505050915091565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b989084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526125a1565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260686020908152604091829020805460ff811680157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092168217909255925192835292917fef1fcfc5b60bfbf5c191cfb9774cbd1d1a56987bd13658cec7705bffc7c01d4e910160405180910390a25050565b600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e6957600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610e6957600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260336020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526033602052604090912060010155565b610e698282611ff0565b80158061227557506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561223b57600080fd5b505afa15801561224f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122739190612b45565b155b612301576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610650565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b989084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611ede565b60606000612366836002612c9f565b612371906002612c4c565b67ffffffffffffffff81111561238957612389612deb565b6040519080825280601f01601f1916602001820160405280156123b3576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106123ea576123ea612dbc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061244d5761244d612dbc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612489846002612c9f565b612494906001612c4c565b90505b6001811115612531577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106124d5576124d5612dbc565b1a60f81b8282815181106124eb576124eb612dbc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361252a81612d1f565b9050612497565b50831561259a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610650565b9392505050565b6000612603826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126ad9092919063ffffffff16565b805190915015610b9857808060200190518101906126219190612ac0565b610b98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610650565b60606126bc84846000856126c4565b949350505050565b606082471015612756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610650565b843b6127be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610650565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127e79190612b5e565b60006040518083038185875af1925050503d8060008114612824576040519150601f19603f3d011682016040523d82523d6000602084013e612829565b606091505b5091509150612839828286612844565b979650505050505050565b6060831561285357508161259a565b8251156128635782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106509190612bfb565b803573ffffffffffffffffffffffffffffffffffffffff811681146128bb57600080fd5b919050565b6000602082840312156128d257600080fd5b61259a82612897565b6000806000606084860312156128f057600080fd5b6128f984612897565b925061290760208501612897565b9150604084013561291781612e1a565b809150509250925092565b60008060006060848603121561293757600080fd5b61294084612897565b925061294e60208501612897565b9150604084013590509250925092565b600080600080600080600060e0888a03121561297957600080fd5b61298288612897565b965061299060208901612897565b955060408801359450606088013593506129ac60808901612897565b92506129ba60a08901612897565b91506129c860c08901612897565b905092959891949750929550565b600060208083850312156129e957600080fd5b823567ffffffffffffffff80821115612a0157600080fd5b818501915085601f830112612a1557600080fd5b813581811115612a2757612a27612deb565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715612a6a57612a6a612deb565b604052828152858101935084860182860187018a1015612a8957600080fd5b600095505b83861015612ab357612a9f81612897565b855260019590950194938601938601612a8e565b5098975050505050505050565b600060208284031215612ad257600080fd5b815161259a81612e1a565b600060208284031215612aef57600080fd5b5035919050565b60008060408385031215612b0957600080fd5b82359150612b1960208401612897565b90509250929050565b600060208284031215612b3457600080fd5b815180600f0b811461259a57600080fd5b600060208284031215612b5757600080fd5b5051919050565b60008251612b70818460208701612cf3565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612bb2816017850160208801612cf3565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612bef816028840160208801612cf3565b01602801949350505050565b6020815260008251806020840152612c1a816040850160208701612cf3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115612c5f57612c5f612d8d565b500190565b600082612c9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cd757612cd7612d8d565b500290565b600082821015612cee57612cee612d8d565b500390565b60005b83811015612d0e578181015183820152602001612cf6565b83811115610b6c5750506000910152565b600081612d2e57612d2e612d8d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d8657612d86612d8d565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8015158114612e2857600080fd5b5056fea2646970667358221220da85cf30f56671f01031c5e27c964ebf9ace34c206096bbb631799d2190c44ef64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102405760003560e01c80636a3a1cbf11610145578063ccc57490116100bd578063eee62ac01161008c578063f77c479111610071578063f77c479114610559578063f7c618c114610579578063f905c0831461059957600080fd5b8063eee62ac014610546578063f4359ce5146104e257600080fd5b8063ccc57490146104f4578063d547741f1461051b578063dd5fbc9a1461052e578063ec342ad01461053757600080fd5b8063a217fddf11610114578063b72f0a2f116100f9578063b72f0a2f146104cf578063b87b5616146104e2578063cb626ae2146104ec57600080fd5b8063a217fddf146104a7578063af45d0df146104af57600080fd5b80636a3a1cbf146103c35780636b5cfefe146103e357806391d1485414610406578063a0ca59f01461044c57600080fd5b8063248a9ca3116101d8578063305d6d5f116101a757806336568abe1161018c57806336568abe146103945780633e785737146103a757806364ef6dd4146103ba57600080fd5b8063305d6d5f1461037957806334fcf4371461038157600080fd5b8063248a9ca31461031357806324ea54f4146103365780632c4e722e1461035d5780632f2ff15d1461036657600080fd5b8063174688971161021457806317468897146102ad5780631814a5b1146102e05780631f8a7edf146102f757806321609bbf1461030457600080fd5b806291d2b814610245578063092193ab1461025a5780631171bda914610287578063139ea9b41461029a575b600080fd5b6102586102533660046128c0565b6105ac565b005b61026d6102683660046128c0565b6106c9565b604080519283526020830191909152015b60405180910390f35b610258610295366004612922565b6107e5565b6102586102a83660046128db565b610a23565b6102d06102bb3660046128c0565b60686020526000908152604090205460ff1681565b604051901515815260200161027e565b6102e9606d5481565b60405190815260200161027e565b6070546102d09060ff1681565b6102e9670dfc861f1ff0953381565b6102e9610321366004612add565b60009081526033602052604090206001015490565b6102e97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6102e9606c5481565b610258610374366004612af6565b610b72565b610258610b9d565b61025861038f366004612add565b610c33565b6102586103a2366004612af6565b610de0565b6102586103b536600461295e565b610e6d565b6102e9606f5481565b6102e96103d13660046128c0565b60656020526000908152604090205481565b6102d06103f13660046128c0565b60666020526000908152604090205460ff1681565b6102d0610414366004612af6565b600091825260336020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61048261045a3660046128c0565b60676020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027e565b6102e9600081565b606b546104829073ffffffffffffffffffffffffffffffffffffffff1681565b6102586104dd3660046128c0565b6111fb565b6102e962093a8081565b610258611317565b6102e97f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b610258610529366004612af6565b61139b565b6102e9606e5481565b6102e9670de0b6b3a764000081565b6102586105543660046129d6565b6113c1565b606a546104829073ffffffffffffffffffffffffffffffffffffffff1681565b6069546104829073ffffffffffffffffffffffffffffffffffffffff1681565b6102586105a73660046128c0565b61150e565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556105d78133611542565b73ffffffffffffffffffffffffffffffffffffffff8216610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f300000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b606a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517ff3d6907bf00dd37e685d19085134f0fab4ced80b96963ef3e992dc7ac0324c5490600090a25050565b60008060026001541415610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610650565b6002600190815560705460ff161515146107af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303900000000000000000000000000000000000000000000000000000000006044820152606401610650565b62093a80606d546107c09190612c4c565b42106107ce576107ce611614565b6107d783611727565b600180559094909350915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108108133611542565b60695473ffffffffffffffffffffffffffffffffffffffff85811691161415610995576069546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190612b45565b9050826108f2670de0b6b3a7640000670dfc861f1ff09533612cdc565b62093a80670dfc861f1ff09533606c5461090c9190612c9f565b6109169190612c9f565b6109209190612c64565b61092a9190612c4c565b811015610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f34000000000000000000000000000000000000000000000000000000000000006044820152606401610650565b505b6109b673ffffffffffffffffffffffffffffffffffffffff85168484611e8c565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b64884604051610a1591815260200190565b60405180910390a350505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610a4e8133611542565b73ffffffffffffffffffffffffffffffffffffffff841615610ac25773ffffffffffffffffffffffffffffffffffffffff848116600090815260676020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055610b03565b606b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fe8c02e063c8958a09592bd47f86567ffc358244cae7a91f26807ca8e3a70a0de60405160405180910390a38115610b6c57610b6c83611f60565b50505050565b600082815260336020526040902060010154610b8e8133611542565b610b988383611ff0565b505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610bc88133611542565b6070805460ff811680157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921682179092556040519081527fa47e236370e478b9d163098c7c1f4f67b6efbb6683eeb0a669f04f302653779d906020015b60405180910390a15050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c5e8133611542565b610c78670de0b6b3a7640000670dfc861f1ff09533612cdc565b62093a80610c8e670dfc861f1ff0953385612c9f565b610c989190612c9f565b610ca29190612c64565b6069546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015610d0b57600080fd5b505afa158015610d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d439190612b45565b1015610dab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f34000000000000000000000000000000000000000000000000000000000000006044820152606401610650565b606c8290556040518281527fe65c987b2e4668e09ba867026921588005b2b2063607a1e7e7d91683c8f91b7b90602001610c27565b73ffffffffffffffffffffffffffffffffffffffff81163314610e5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610650565b610e6982826120ad565b5050565b600054610100900460ff1680610e86575060005460ff16155b610f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610650565b600054610100900460ff16158015610f5157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff871615801590610f8b575073ffffffffffffffffffffffffffffffffffffffff881615155b8015610fac575073ffffffffffffffffffffffffffffffffffffffff831615155b8015610fcd575073ffffffffffffffffffffffffffffffffffffffff841615155b611033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610650565b6069805473ffffffffffffffffffffffffffffffffffffffff808b167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255606a80548a8416908316179055606e8790556000606f55606c889055606b805492851692909116919091179055607080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905542606d556110fa7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5580612168565b6111447f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55612168565b61116e7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041846121bc565b6111987f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55856121bc565b6111c27f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041856121bc565b80156111f157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556112268133611542565b73ffffffffffffffffffffffffffffffffffffffff821660009081526066602052604090205460ff168061128d5773ffffffffffffffffffffffffffffffffffffffff808416600090815260656020526040812081905560695461128d92169085906121c6565b73ffffffffffffffffffffffffffffffffffffffff831660008181526066602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016851590811790915591519182527ff585f0f5078ec648738dbc4c4618f033a3f0d81e1602b044649d736d33ebac67910160405180910390a2505050565b62093a80606d546113289190612c4c565b421015611391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303800000000000000000000000000000000000000000000000000000000006044820152606401610650565b611399611614565b565b6000828152603360205260409020600101546113b78133611542565b610b9883836120ad565b6002600154141561142e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610650565b6002600190815560705460ff161515146114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303900000000000000000000000000000000000000000000000000000000006044820152606401610650565b62093a80606d546114b59190612c4c565b42106114c3576114c3611614565b60005b8151811015611506576114f18282815181106114e4576114e4612dbc565b6020026020010151611727565b505080806114fe90612d54565b9150506114c6565b505060018055565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416115398133611542565b610e6982611f60565b600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e695761159a8173ffffffffffffffffffffffffffffffffffffffff166014612357565b6115a5836020612357565b6040516020016115b6929190612b7a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261065091600401612bfb565b600062093a80606d54426116289190612cdc565b6116329190612c64565b606c54606e54919250906116498362093a80612c9f565b606d600082825461165a9190612c4c565b9250508190555082606f60008282546116739190612c4c565b90915550600090505b838110156116d65761169162093a8084612c9f565b61169b9083612c4c565b9150670dfc861f1ff095336116b8670de0b6b3a764000085612c9f565b6116c29190612c64565b9250806116ce81612d54565b91505061167c565b50606c829055606e81905560408051428152602081018490529081018290527f27e46362a1e6129b6dd539c984ce739291a97128dfcaeca1255e8ac83abd94419060600160405180910390a1505050565b606a546040517f3f9095b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000928392839290911690633f9095b79060240160206040518083038186803b15801561179957600080fd5b505afa1580156117ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d19190612b22565b9050600081600f0b1215801561180d575073ffffffffffffffffffffffffffffffffffffffff841660009081526066602052604090205460ff16155b611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313000000000000000000000000000000000000000000000000000000000006044820152606401610650565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260656020526040902054806118f7576001935081600f0b600014156118f2576069546118f29073ffffffffffffffffffffffffffffffffffffffff16867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6121c6565b611923565b62093a806119058242612cdc565b61190f9190612c64565b935083611923575060009485945092505050565b606c5460009350835b85811015611b39576000816119ed57606a546040517f6472eee100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015242602483015290911690636472eee190604401602060405180830381600087803b1580156119ae57600080fd5b505af11580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612b45565b9050611ac7565b606a5473ffffffffffffffffffffffffffffffffffffffff1663d3078c9489611a198562093a80612c9f565b611a239042612cdc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440160206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190612b45565b90505b670de0b6b3a764000062093a80611ade8386612c9f565b611ae89190612c9f565b611af29190612c64565b611afc9087612c4c565b9550670de0b6b3a7640000611b19670dfc861f1ff0953385612c9f565b611b239190612c64565b9250508080611b3190612d54565b91505061192c565b5062093a80611b488142612c64565b611b529190612c9f565b73ffffffffffffffffffffffffffffffffffffffff87166000908152606560205260409020556002600f84900b12611cf25773ffffffffffffffffffffffffffffffffffffffff8087166000908152606760205260409020541680611bcc5750606b5473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811615611cc857606954611c0c9073ffffffffffffffffffffffffffffffffffffffff168287611e8c565b73ffffffffffffffffffffffffffffffffffffffff811660009081526068602052604090205460ff1615611cc3576040517fe324718000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820187905282169063e324718090604401600060405180830381600087803b158015611caa57600080fd5b505af1158015611cbe573d6000803e3d6000fd5b505050505b611cec565b606954611cec9073ffffffffffffffffffffffffffffffffffffffff168887611e8c565b50611e34565b82600f0b60011415611da757606954611d229073ffffffffffffffffffffffffffffffffffffffff168786611e8c565b6040517f3c6b16ab0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff871690633c6b16ab90602401600060405180830381600087803b158015611d8a57600080fd5b505af1158015611d9e573d6000803e3d6000fd5b50505050611e34565b6069546040517f93f7aa6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101869052908716906393f7aa6790604401600060405180830381600087803b158015611e1b57600080fd5b505af1158015611e2f573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff167fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea685604051611e7c91815260200190565b60405180910390a2505050915091565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b989084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526125a1565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260686020908152604091829020805460ff811680157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092168217909255925192835292917fef1fcfc5b60bfbf5c191cfb9774cbd1d1a56987bd13658cec7705bffc7c01d4e910160405180910390a25050565b600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e6957600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610e6957600082815260336020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260336020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526033602052604090912060010155565b610e698282611ff0565b80158061227557506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561223b57600080fd5b505afa15801561224f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122739190612b45565b155b612301576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610650565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b989084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611ede565b60606000612366836002612c9f565b612371906002612c4c565b67ffffffffffffffff81111561238957612389612deb565b6040519080825280601f01601f1916602001820160405280156123b3576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106123ea576123ea612dbc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061244d5761244d612dbc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612489846002612c9f565b612494906001612c4c565b90505b6001811115612531577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106124d5576124d5612dbc565b1a60f81b8282815181106124eb576124eb612dbc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361252a81612d1f565b9050612497565b50831561259a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610650565b9392505050565b6000612603826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126ad9092919063ffffffff16565b805190915015610b9857808060200190518101906126219190612ac0565b610b98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610650565b60606126bc84846000856126c4565b949350505050565b606082471015612756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610650565b843b6127be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610650565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127e79190612b5e565b60006040518083038185875af1925050503d8060008114612824576040519150601f19603f3d011682016040523d82523d6000602084013e612829565b606091505b5091509150612839828286612844565b979650505050505050565b6060831561285357508161259a565b8251156128635782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106509190612bfb565b803573ffffffffffffffffffffffffffffffffffffffff811681146128bb57600080fd5b919050565b6000602082840312156128d257600080fd5b61259a82612897565b6000806000606084860312156128f057600080fd5b6128f984612897565b925061290760208501612897565b9150604084013561291781612e1a565b809150509250925092565b60008060006060848603121561293757600080fd5b61294084612897565b925061294e60208501612897565b9150604084013590509250925092565b600080600080600080600060e0888a03121561297957600080fd5b61298288612897565b965061299060208901612897565b955060408801359450606088013593506129ac60808901612897565b92506129ba60a08901612897565b91506129c860c08901612897565b905092959891949750929550565b600060208083850312156129e957600080fd5b823567ffffffffffffffff80821115612a0157600080fd5b818501915085601f830112612a1557600080fd5b813581811115612a2757612a27612deb565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715612a6a57612a6a612deb565b604052828152858101935084860182860187018a1015612a8957600080fd5b600095505b83861015612ab357612a9f81612897565b855260019590950194938601938601612a8e565b5098975050505050505050565b600060208284031215612ad257600080fd5b815161259a81612e1a565b600060208284031215612aef57600080fd5b5035919050565b60008060408385031215612b0957600080fd5b82359150612b1960208401612897565b90509250929050565b600060208284031215612b3457600080fd5b815180600f0b811461259a57600080fd5b600060208284031215612b5757600080fd5b5051919050565b60008251612b70818460208701612cf3565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612bb2816017850160208801612cf3565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612bef816028840160208801612cf3565b01602801949350505050565b6020815260008251806020840152612c1a816040850160208701612cf3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115612c5f57612c5f612d8d565b500190565b600082612c9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cd757612cd7612d8d565b500290565b600082821015612cee57612cee612d8d565b500390565b60005b83811015612d0e578181015183820152602001612cf6565b83811115610b6c5750506000910152565b600081612d2e57612d2e612d8d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d8657612d86612d8d565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8015158114612e2857600080fd5b5056fea2646970667358221220da85cf30f56671f01031c5e27c964ebf9ace34c206096bbb631799d2190c44ef64736f6c63430008070033",
  "devdoc": {
    "author": "Forked from contracts developed by Curve and Frax and adapted by Angle Core Team - ERC20CRV.vy (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/ERC20CRV.vy) - FraxGaugeFXSRewardsDistributor.sol (https://github.com/FraxFinance/frax-solidity/blob/master/src/hardhat/contracts/Curve/FraxGaugeFXSRewardsDistributor.sol)",
    "kind": "dev",
    "methods": {
      "constructor": { "custom:oz-upgrades-unsafe-allow": "constructor" },
      "distributeReward(address)": {
        "details": "Anyone can call this function to distribute rewards to the different staking contracts",
        "params": { "gaugeAddr": "Address of the gauge to send tokens too" },
        "returns": {
          "_0": "weeksElapsed Number of weeks elapsed since the last time rewards were distributed",
          "_1": "rewardTally Amount of tokens sent to the gauge"
        }
      },
      "distributeRewardToMultipleGauges(address[])": {
        "details": "Anyone can call this function to distribute rewards to the different staking contractsCompared with the `distributeReward` function, this function sends rewards to multiple contracts at the same time",
        "params": { "gauges": "Addresses of the gauge to send tokens too" }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "initialize(address,address,uint256,uint256,address,address,address)": {
        "details": "After this contract is created, the correct amount of ANGLE tokens should be transferred to the contractThe `_delegateGauge` can be the zero address",
        "params": {
          "_controller": "Address of the GaugeController",
          "_delegateGauge": "Address that will be used to pull rewards for type 2 gauges",
          "_initialRate": "Initial ANGLE emission rate",
          "_rewardToken": "Address of the ANGLE token",
          "_startEpochSupply": "Amount of ANGLE tokens already distributed via liquidity mining",
          "governor": "Governor address of the contract",
          "guardian": "Address of the guardian of this contract"
        }
      },
      "recoverERC20(address,address,uint256)": {
        "details": "Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holdersThis function could also be used to recover ANGLE tokens in case the rate got smaller",
        "params": {
          "amount": "Amount to transfer",
          "to": "Address to transfer to",
          "tokenAddress": "Address of the ERC20 token to withdraw"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setDelegateGauge(address,address,bool)": {
        "details": "This function can be used to remove delegating or introduce the pulling of rewards to a given addressIf `gaugeAddr` is the zero address, this function updates the delegate gauge common to all gauges with type >= 2The `toggleInterface` parameter has been added for convenience to save one transaction when adding a gauge delegate which supports the `notifyReward` interface",
        "params": {
          "_delegateGauge": "Address of the new gauge delegate related to `gaugeAddr`",
          "gaugeAddr": "Gauge to change the delegate of",
          "toggleInterface": "Whether we should toggle the fact that the `_delegateGauge` is built for automation or not"
        }
      },
      "setGaugeController(address)": { "params": { "_controller": "Address of the new gauge controller" } },
      "setRate(uint256)": {
        "details": "It is important to be super wary when calling this function and to make sure that `distributeReward` has been called for all gauges in the past weeks. If not, gauges may get an incorrect distribution of ANGLE rewards for these past weeks based on the new rate and not on the old rateGovernance should thus make sure to call this function rarely and when it does to do it after the weekly `distributeReward` calls for all existing gaugesAs this function assumes that `distributeReward` has been called during the week, it also assumes that the `startEpochSupply` parameter has been put up to date",
        "params": { "_newRate": "New ANGLE emission rate" }
      },
      "toggleGauge(address)": {
        "details": "It is impossible to kill a gauge in the `GaugeController` contract, for this reason killing of gauges takes place in the `AngleDistributor` contractThis means that people could vote for a gauge in the gauge controller contract but that rewards are not going to be distributed to it in the end: people would need to remove their weights on the gauge killed to end the diminution in rewardsIn the case of a gauge being killed, this function resets the timestamps at which this gauge has been approved and disapproves the gauge to spend the tokenIt should be cautiously called by governance as it could result in less ANGLE overall rewards than initially planned if people do not remove their voting weights to the killed gauge",
        "params": { "gaugeAddr": "Gauge to toggle the status of" }
      },
      "toggleInterfaceKnown(address)": {
        "details": "Gauge delegates that are built for automation should be toggled",
        "params": { "_delegateGauge": "Address of the gauge to change" }
      },
      "updateMiningParameters()": { "details": "Callable by any address, but only once per epoch" }
    },
    "title": "AngleDistributor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE()": { "notice": "Base used for computation" },
      "GOVERNOR_ROLE()": { "notice": "Role for governors only" },
      "GUARDIAN_ROLE()": { "notice": "Role for the guardian" },
      "RATE_REDUCTION_COEFFICIENT()": { "notice": "Reduction of the emission rate" },
      "RATE_REDUCTION_TIME()": { "notice": "Time at which the emission rate is updated" },
      "WEEK()": { "notice": "Length of a week in seconds" },
      "controller()": { "notice": "Address of the `GaugeController` contract" },
      "delegateGauge()": {
        "notice": "Address responsible for pulling rewards of type >= 2 gauges and distributing it to the associated contracts if there is not already an address delegated for this specific contract"
      },
      "delegateGauges(address)": {
        "notice": "Maps the address of a type >= 2 gauge to a delegate address responsible for giving rewards to the actual gauge"
      },
      "distributeReward(address)": { "notice": "Distributes rewards to a staking contract (also called gauge)" },
      "distributeRewardToMultipleGauges(address[])": { "notice": "Distributes rewards to multiple staking contracts" },
      "distributionsOn()": { "notice": "Whether ANGLE distribution through this contract is on or no" },
      "initialize(address,address,uint256,uint256,address,address,address)": {
        "notice": "Constructor of the contract"
      },
      "isInterfaceKnown(address)": {
        "notice": "Maps the address of a gauge delegate to whether this delegate supports the `notifyReward` interface and is therefore built for automation"
      },
      "killedGauges(address)": {
        "notice": "Maps the address of a gauge to whether it was killed or not A gauge killed in this contract cannot receive any rewards"
      },
      "lastTimeGaugePaid(address)": {
        "notice": "Maps the address of a gauge to the last time this gauge received rewards"
      },
      "miningEpoch()": {
        "notice": "Index of the current emission epoch Here also, this variable is not useful per se inside the smart contracts of the protocol, it is just an informational variable"
      },
      "rate()": {
        "notice": "ANGLE current emission rate, it is first defined in the initializer and then updated every week"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Withdraws ERC20 tokens that could accrue on this contract"
      },
      "rewardToken()": { "notice": "Address of the ANGLE token given as a reward" },
      "setDelegateGauge(address,address,bool)": {
        "notice": "Sets a new delegate gauge for pulling rewards of a type >= 2 gauges or of all type >= 2 gauges"
      },
      "setGaugeController(address)": { "notice": "Sets a new gauge controller" },
      "setRate(uint256)": { "notice": "Changes the ANGLE emission rate" },
      "startEpochSupply()": {
        "notice": "Amount of ANGLE tokens distributed through staking at the start of the epoch This is an informational variable used to track how much has been distributed through liquidity mining"
      },
      "startEpochTime()": { "notice": "Timestamp at which the current emission epoch started" },
      "toggleDistributions()": { "notice": "Halts or activates distribution of rewards" },
      "toggleGauge(address)": { "notice": "Toggles the status of a gauge to either killed or unkilled" },
      "toggleInterfaceKnown(address)": {
        "notice": "Notifies that the interface of a gauge delegate is known or has changed"
      },
      "updateMiningParameters()": { "notice": "Updates mining rate and supply at the start of the epoch" }
    },
    "notice": "All the events used in `AngleDistributor` contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3228,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3231,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3395,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3438,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16730,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "_roles",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)16725_storage)"
      },
      {
        "astId": 17016,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 37533,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "lastTimeGaugePaid",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 37538,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "killedGauges",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 37543,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "delegateGauges",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 37548,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "isInterfaceKnown",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 37552,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "rewardToken",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC20)9459"
      },
      {
        "astId": 37556,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "controller",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IGaugeController)22501"
      },
      {
        "astId": 37559,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "delegateGauge",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 37562,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "rate",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 37565,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "startEpochTime",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 37568,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "startEpochSupply",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 37571,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "miningEpoch",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 37574,
        "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
        "label": "distributionsOn",
        "offset": 0,
        "slot": "112",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_contract(IERC20)9459": { "encoding": "inplace", "label": "contract IERC20", "numberOfBytes": "20" },
      "t_contract(IGaugeController)22501": {
        "encoding": "inplace",
        "label": "contract IGaugeController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)16725_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)16725_storage"
      },
      "t_struct(RoleData)16725_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 16722,
            "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16724,
            "contract": "contracts/staking/AngleDistributor.sol:AngleDistributor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" }
    }
  }
}
