{
  "address": "0x4B00103802Da5f51A9218010a1073Ea432165f13",
  "abi": [
    {
      "inputs": [
        { "internalType": "address[]", "name": "guardians", "type": "address[]" },
        { "internalType": "contract IAngleDistributor", "name": "distributor", "type": "address" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "gauge", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "recipient", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "bridge", "type": "address" },
        {
          "indexed": false,
          "internalType": "enum AngleMiddleman.RecipientType",
          "name": "recipientType",
          "type": "uint8"
        }
      ],
      "name": "AddGauge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "gauge", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "recipient", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "gauge", "type": "address" }],
      "name": "RemoveGauge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTOR_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address[]", "name": "gauges", "type": "address[]" },
        { "internalType": "address[]", "name": "recipients", "type": "address[]" },
        { "internalType": "address[]", "name": "bridges", "type": "address[]" },
        { "internalType": "enum AngleMiddleman.RecipientType[]", "name": "recipientType", "type": "uint8[]" }
      ],
      "name": "addGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "spender", "type": "address" },
        { "internalType": "uint256", "name": "approvedAmount", "type": "uint256" }
      ],
      "name": "changeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "gaugeToRecipient",
      "outputs": [
        { "internalType": "address", "name": "recipient", "type": "address" },
        { "internalType": "address", "name": "bridge", "type": "address" },
        { "internalType": "enum AngleMiddleman.RecipientType", "name": "recipientType", "type": "uint8" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "gauge", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "notifyReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "token", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "gauge", "type": "address" }],
      "name": "removeGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }],
      "name": "revokeApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
      "name": "supportsInterface",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "transactionHash": "0xa04d4d55b3fe6f5aa615edb8056b9fe7c20ff2e91d3ba56710cb5c47105f69c2",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x4B00103802Da5f51A9218010a1073Ea432165f13",
    "transactionIndex": 326,
    "gasUsed": "2759603",
    "logsBloom": "0x
    "blockHash": "0xc35b698cee7cc55115e49c8985638a8c0abafe449e9b841b1788669bd19c67a3",
    "transactionHash": "0xa04d4d55b3fe6f5aa615edb8056b9fe7c20ff2e91d3ba56710cb5c47105f69c2",
    "logs": [
      {
        "transactionIndex": 326,
        "blockNumber": 14119136,
        "transactionHash": "0xa04d4d55b3fe6f5aa615edb8056b9fe7c20ff2e91d3ba56710cb5c47105f69c2",
        "address": "0x4B00103802Da5f51A9218010a1073Ea432165f13",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x000000000000000000000000dc4e6dfe07efca50a197df15d9200883ef4eb1c8",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 445,
        "blockHash": "0xc35b698cee7cc55115e49c8985638a8c0abafe449e9b841b1788669bd19c67a3"
      },
      {
        "transactionIndex": 326,
        "blockNumber": 14119136,
        "transactionHash": "0xa04d4d55b3fe6f5aa615edb8056b9fe7c20ff2e91d3ba56710cb5c47105f69c2",
        "address": "0x4B00103802Da5f51A9218010a1073Ea432165f13",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000c2553e4b9dfa9f83b1a6d3eab96c4baab42d430",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 446,
        "blockHash": "0xc35b698cee7cc55115e49c8985638a8c0abafe449e9b841b1788669bd19c67a3"
      },
      {
        "transactionIndex": 326,
        "blockNumber": 14119136,
        "transactionHash": "0xa04d4d55b3fe6f5aa615edb8056b9fe7c20ff2e91d3ba56710cb5c47105f69c2",
        "address": "0x4B00103802Da5f51A9218010a1073Ea432165f13",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfbd454f36a7e1a388bd6fc3ab10d434aa4578f811acbbcf33afb1c697486313c",
          "0x0000000000000000000000004f91f01ce8ec07c9b1f6a82c18811848254917ab",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 447,
        "blockHash": "0xc35b698cee7cc55115e49c8985638a8c0abafe449e9b841b1788669bd19c67a3"
      },
      {
        "transactionIndex": 326,
        "blockNumber": 14119136,
        "transactionHash": "0xa04d4d55b3fe6f5aa615edb8056b9fe7c20ff2e91d3ba56710cb5c47105f69c2",
        "address": "0x4B00103802Da5f51A9218010a1073Ea432165f13",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xfbd454f36a7e1a388bd6fc3ab10d434aa4578f811acbbcf33afb1c697486313c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041"
        ],
        "data": "0x",
        "logIndex": 448,
        "blockHash": "0xc35b698cee7cc55115e49c8985638a8c0abafe449e9b841b1788669bd19c67a3"
      },
      {
        "transactionIndex": 326,
        "blockNumber": 14119136,
        "transactionHash": "0xa04d4d55b3fe6f5aa615edb8056b9fe7c20ff2e91d3ba56710cb5c47105f69c2",
        "address": "0x4B00103802Da5f51A9218010a1073Ea432165f13",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041"
        ],
        "data": "0x",
        "logIndex": 449,
        "blockHash": "0xc35b698cee7cc55115e49c8985638a8c0abafe449e9b841b1788669bd19c67a3"
      }
    ],
    "blockNumber": 14119136,
    "cumulativeGasUsed": "27293743",
    "status": 1,
    "byzantium": true
  },
  "args": [
    ["0xdC4e6DFe07EFCa50a197DF15D9200883eF4Eb1c8", "0x0C2553e4B9dFA9f83b1A6D3EAB96c4bAaB42d430"],
    "0x4f91F01cE8ec07c9B1f6a82c18811848254917Ab"
  ],
  "solcInputHash": "088f348f6db3fa7bf7fad76c8389554d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"},{\"internalType\":\"contract IAngleDistributor\",\"name\":\"distributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AngleMiddleman.RecipientType\",\"name\":\"recipientType\",\"type\":\"uint8\"}],\"name\":\"AddGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"RemoveGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bridges\",\"type\":\"address[]\"},{\"internalType\":\"enum AngleMiddleman.RecipientType[]\",\"name\":\"recipientType\",\"type\":\"uint8[]\"}],\"name\":\"addGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"approvedAmount\",\"type\":\"uint256\"}],\"name\":\"changeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeToRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"enum AngleMiddleman.RecipientType\",\"name\":\"recipientType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"removeGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addGauges(address[],address[],address[],uint8[])\":{\"details\":\"Addresses of gauges within the Angle Protocol corresponding to Curve pools or multichain staking contracts are identifiers to be used only for voting purposes.This is the reason we map them to the \\\"real\\\" `recipient` contract\",\"params\":{\"bridges\":\"Array of addresses of the bridging contracts\",\"gauges\":\"Array of gauges, as defined in `AngleDistributor`\",\"recipientType\":\"Curve, Polygon or Anyswap\",\"recipients\":\"Array of addresses ultimately meant to receive the tokens\"}},\"changeAllowance(address,uint256)\":{\"params\":{\"approvedAmount\":\"Amount that we want to approve\",\"spender\":\"Address of the contract that was approved\"}},\"constructor\":{\"params\":{\"distributor\":\"address of `AngleDistributor`. Notifies the contract that new rewards should be distributed\",\"guardians\":\"array of address of admins for this contract. Guardians are allowed to add new gauges or remove them, and recover tokens from the contract\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"notifyReward(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to be sent\",\"gauge\":\"Address of the gauge, as defined in `AngleDistributor`\"}},\"recoverERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to be recovered\",\"token\":\"Address of the token\"}},\"recoverETH(address,uint256)\":{\"params\":{\"amount\":\"Amount to be recovered\"}},\"removeGauge(address)\":{\"params\":{\"gauge\":\"Address of the gauge (found in `AngleDistributor`)\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeApproval(address)\":{\"params\":{\"spender\":\"Address of the contract that was approved\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGauges(address[],address[],address[],uint8[])\":{\"notice\":\"Allows the Governor to add new gauges of type \\\"Curve\\\"\"},\"changeAllowance(address,uint256)\":{\"notice\":\"Ability to change allowance for a contract. Approvals are given in the `addGauges` methods\"},\"constructor\":{\"notice\":\"Deploys `AngleMiddleman` used to route reward tokens (ANGLE) from `AngleDistributor` to gauges\"},\"gaugeToRecipient(address)\":{\"notice\":\"Maps a gauge address (as defined in `AngleDistributor`) to its parameters\"},\"notifyReward(address,uint256)\":{\"notice\":\"Sends the tokens to the recipient contract using the appropriate method (direct transfer or bridging)\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Recovers ERC20 tokens from the contract\"},\"recoverETH(address,uint256)\":{\"notice\":\"Recovers ETH from the contract\"},\"removeGauge(address)\":{\"notice\":\"Deletes a gauge. Removes the parameters from `gaugeToRecipient` and revokes approvals\"},\"revokeApproval(address)\":{\"notice\":\"Ability to revoke approval for a contract. Approvals are given in the `addGauges` methods\"},\"rewardToken()\":{\"notice\":\"Most likely ANGLE token (currently: 0x31429d1856aD1377A8A0079410B297e1a9e214c2)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/middleman/AngleMiddleman.sol\":\"AngleMiddleman\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IAngleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IAngleDistributor\\n/// @author Angle Core Team\\n/// @notice Interface for the `AngleDistributor` contract\\ninterface IAngleDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function delegateGauge() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4620ac2f95c46c4ac187575f336d5ffddb9e5d3b386ef04202c9baf27ebabd05\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAngleMiddlemanGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAngleMiddlemanGauge\\n/// @author Angle Core Team\\n/// @notice Interface for the `AngleMiddleman` contract\\ninterface IAngleMiddlemanGauge {\\n    function notifyReward(address gauge, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf420c358719cdf0a159af15e7c2febab8e9d0953762d382d9af745f947d4e477\",\"license\":\"GPL-3.0\"},\"contracts/middleman/AngleMiddleman.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAngleDistributor.sol\\\";\\nimport \\\"../interfaces/IAngleMiddlemanGauge.sol\\\";\\n\\ninterface ICurveGauge {\\n    function deposit_reward_token(address _reward_token, uint256 _amount) external; // solhint-disable-line\\n}\\n\\ninterface IPolygonBridge {\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes memory depositData\\n    ) external;\\n\\n    function tokenToType(address) external view returns (bytes32);\\n\\n    function typeToPredicate(bytes32) external view returns (address);\\n}\\n\\ncontract AngleMiddleman is AccessControl, IAngleMiddlemanGauge {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Types of contracts the middleman will forward the tokens to\\n    enum RecipientType {\\n        Curve,\\n        Anyswap,\\n        PolygonPoS\\n    }\\n\\n    /// @notice `recipient`: Address receiving the tokens. bridge: address of the bridge (if applicable) where the tokens will go through\\n    struct Recipient {\\n        address recipient;\\n        address bridge;\\n        RecipientType recipientType;\\n    }\\n\\n    /// @notice Most likely ANGLE token (currently: 0x31429d1856aD1377A8A0079410B297e1a9e214c2)\\n    IERC20 public immutable rewardToken;\\n    bytes32 public constant DISTRIBUTOR_ROLE = keccak256(\\\"DISTRIBUTOR_ROLE\\\");\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    /// @notice Maps a gauge address (as defined in `AngleDistributor`) to its parameters\\n    mapping(address => Recipient) public gaugeToRecipient;\\n\\n    event AddGauge(\\n        address indexed gauge,\\n        address indexed recipient,\\n        address indexed bridge,\\n        RecipientType recipientType\\n    );\\n    event RemoveGauge(address indexed gauge);\\n    event NotifyReward(address indexed gauge, address indexed recipient, uint256 amount);\\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n\\n    /// @notice Deploys `AngleMiddleman` used to route reward tokens (ANGLE) from `AngleDistributor` to gauges\\n    /// @param guardians array of address of admins for this contract. Guardians are allowed to add new gauges or remove them, and recover tokens from the contract\\n    /// @param distributor address of `AngleDistributor`. Notifies the contract that new rewards should be distributed\\n    constructor(address[] memory guardians, IAngleDistributor distributor) {\\n        require(address(distributor) != address(0), \\\"0\\\");\\n        require(guardians.length > 0, \\\"5\\\");\\n\\n        rewardToken = distributor.rewardToken();\\n\\n        for (uint256 i = 0; i < guardians.length; i++) {\\n            require(guardians[i] != address(0), \\\"0\\\");\\n            _setupRole(GUARDIAN_ROLE, guardians[i]);\\n        }\\n\\n        _setupRole(DISTRIBUTOR_ROLE, address(distributor));\\n        _setRoleAdmin(DISTRIBUTOR_ROLE, GUARDIAN_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, GUARDIAN_ROLE);\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Allows the Governor to add new gauges of type \\\"Curve\\\"\\n    /// @param gauges Array of gauges, as defined in `AngleDistributor`\\n    /// @param recipients Array of addresses ultimately meant to receive the tokens\\n    /// @param bridges Array of addresses of the bridging contracts\\n    /// @param recipientType Curve, Polygon or Anyswap\\n    /// @dev Addresses of gauges within the Angle Protocol corresponding to Curve pools or multichain staking contracts are identifiers to be used only for voting purposes.\\n    /// @dev This is the reason we map them to the \\\"real\\\" `recipient` contract\\n    function addGauges(\\n        address[] memory gauges,\\n        address[] memory recipients,\\n        address[] memory bridges,\\n        RecipientType[] memory recipientType\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        require(gauges.length > 0, \\\"5\\\");\\n        require(\\n            gauges.length == recipients.length &&\\n                gauges.length == bridges.length &&\\n                gauges.length == recipientType.length,\\n            \\\"104\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gauges.length; i++) {\\n            require(gauges[i] != address(0) && recipients[i] != address(0), \\\"0\\\");\\n\\n            if (recipientType[i] == RecipientType.Curve) {\\n                require(bridges[i] == address(0), \\\"113\\\");\\n            }\\n            if (recipientType[i] == RecipientType.PolygonPoS || recipientType[i] == RecipientType.Anyswap) {\\n                require(bridges[i] != address(0), \\\"0\\\");\\n            }\\n\\n            Recipient storage _recipient = gaugeToRecipient[gauges[i]];\\n            require(_recipient.recipient == address(0), \\\"112\\\");\\n\\n            _recipient.recipient = recipients[i];\\n            _recipient.recipientType = recipientType[i];\\n            _recipient.bridge = bridges[i];\\n\\n            // auto approve\\n            if (recipientType[i] == RecipientType.Curve) {\\n                rewardToken.safeApprove(recipients[i], type(uint256).max);\\n            } else if (recipientType[i] == RecipientType.PolygonPoS) {\\n                address spender = _getSpenderPolygon(bridges[i]);\\n                uint256 currentAllowance = rewardToken.allowance(address(this), spender);\\n                // the spender is the \\\"predicate\\\", so we check if it wasnt already approved\\n                if (currentAllowance == 0) {\\n                    rewardToken.safeApprove(spender, type(uint256).max);\\n                }\\n            }\\n\\n            emit AddGauge(gauges[i], recipients[i], bridges[i], recipientType[i]);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the \\\"predicate\\\": the contract ultimately holding the tokens on mainnet. The predicate contract needs to be approved by `AngleMiddleman`\\n    /// @param bridge Address of the bridge contract, from there we can retrieve the address of the predicate\\n    function _getSpenderPolygon(address bridge) internal view returns (address spender) {\\n        bytes32 tokenType = IPolygonBridge(bridge).tokenToType(address(rewardToken));\\n        spender = IPolygonBridge(bridge).typeToPredicate(tokenType);\\n    }\\n\\n    /// @notice Sends the tokens to the recipient contract using the appropriate method (direct transfer or bridging)\\n    /// @param gauge Address of the gauge, as defined in `AngleDistributor`\\n    /// @param amount Amount of tokens to be sent\\n    function notifyReward(address gauge, uint256 amount) external override onlyRole(DISTRIBUTOR_ROLE) {\\n        Recipient memory _recipient = gaugeToRecipient[gauge];\\n        require(_recipient.recipient != address(0), \\\"110\\\");\\n\\n        if (_recipient.recipientType == RecipientType.Curve) {\\n            // Curve gauges implement a `deposit_reward_token` method\\n            // The contract needs to be approved for the rewardToken\\n            // Approval should have been done in `addGauges` method\\n            ICurveGauge(_recipient.recipient).deposit_reward_token(address(rewardToken), amount);\\n        } else if (_recipient.recipientType == RecipientType.PolygonPoS) {\\n            // Polygon PoS bridge uses a `depositFor` method\\n            // `depositFor` transfers the tokens to the \\\"predicate\\\" contract and then emits an event for bridging the tokens\\n            // The \\\"predicate\\\" needs to be approved, which is done in the `addGauges` method\\n            IPolygonBridge(_recipient.bridge).depositFor(\\n                _recipient.recipient,\\n                address(rewardToken),\\n                abi.encodePacked(amount)\\n            );\\n        } else if (_recipient.recipientType == RecipientType.Anyswap) {\\n            // For Anyswap, tokens just need to be transfered to the right contract and are bridged to the same address on the other network\\n            rewardToken.safeTransfer(_recipient.bridge, amount);\\n        }\\n\\n        emit NotifyReward(gauge, _recipient.recipient, amount);\\n    }\\n\\n    /// @notice Ability to revoke approval for a contract. Approvals are given in the `addGauges` methods\\n    /// @param spender Address of the contract that was approved\\n    function revokeApproval(address spender) public onlyRole(GUARDIAN_ROLE) {\\n        rewardToken.safeApprove(spender, 0);\\n    }\\n\\n    /// @notice Ability to change allowance for a contract. Approvals are given in the `addGauges` methods\\n    /// @param spender Address of the contract that was approved\\n    /// @param approvedAmount Amount that we want to approve\\n    function changeAllowance(address spender, uint256 approvedAmount) public onlyRole(GUARDIAN_ROLE) {\\n        uint256 currentAllowance = rewardToken.allowance(address(this), spender);\\n        if (currentAllowance < approvedAmount) {\\n            rewardToken.safeIncreaseAllowance(spender, approvedAmount - currentAllowance);\\n        } else if (currentAllowance > approvedAmount) {\\n            rewardToken.safeDecreaseAllowance(spender, currentAllowance - approvedAmount);\\n        }\\n    }\\n\\n    /// @notice Deletes a gauge. Removes the parameters from `gaugeToRecipient` and revokes approvals\\n    /// @param gauge Address of the gauge (found in `AngleDistributor`)\\n    function removeGauge(address gauge) external onlyRole(GUARDIAN_ROLE) {\\n        Recipient memory _recipient = gaugeToRecipient[gauge];\\n        require(_recipient.recipient != address(0), \\\"110\\\");\\n        if (_recipient.recipientType == RecipientType.Curve) {\\n            revokeApproval(_recipient.recipient);\\n        } else if (_recipient.recipientType == RecipientType.PolygonPoS) {\\n            revokeApproval(_getSpenderPolygon(_recipient.bridge));\\n        }\\n        // else: There is no approval for Anyswap, so no need to do anything\\n\\n        delete gaugeToRecipient[gauge];\\n        emit RemoveGauge(gauge);\\n    }\\n\\n    /// @notice Recovers ERC20 tokens from the contract\\n    /// @param token Address of the token\\n    /// @param amount Amount to be recovered\\n    function recoverERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        IERC20(token).safeTransfer(to, amount);\\n        emit Recovered(token, to, amount);\\n    }\\n\\n    /// @notice Recovers ETH from the contract\\n    /// @param amount Amount to be recovered\\n    function recoverETH(address to, uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        require(payable(to).send(amount), \\\"98\\\");\\n        emit Recovered(address(0), to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x31449a75627223cb772dd4db4e5f30d6ff015a36fbe700fbb763c80b38a56251\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200341e3803806200341e83398101604081905262000034916200036a565b6001600160a01b038116620000745760405162461bcd60e51b81526020600482015260016024820152600360fc1b60448201526064015b60405180910390fd5b6000825111620000ab5760405162461bcd60e51b81526020600482015260016024820152603560f81b60448201526064016200006b565b806001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e557600080fd5b505afa158015620000fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000120919062000457565b60601b6001600160601b03191660805260005b8251811015620001f45760006001600160a01b03168382815181106200015d576200015d620004a8565b60200260200101516001600160a01b03161415620001a25760405162461bcd60e51b81526020600482015260016024820152600360fc1b60448201526064016200006b565b620001df600080516020620033fe833981519152848381518110620001cb57620001cb620004a8565b60200260200101516200025d60201b60201c565b80620001eb816200047e565b91505062000133565b5062000210600080516020620033de833981519152826200025d565b6200023a600080516020620033de833981519152600080516020620033fe8339815191526200026d565b62000255600080516020620033fe833981519152806200026d565b5050620004ed565b620002698282620002b8565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000269576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516200036581620004d4565b919050565b600080604083850312156200037e57600080fd5b82516001600160401b03808211156200039657600080fd5b818501915085601f830112620003ab57600080fd5b8151602082821115620003c257620003c2620004be565b8160051b604051601f19603f83011681018181108682111715620003ea57620003ea620004be565b604052838152828101945085830182870184018b10156200040a57600080fd5b600096505b848710156200043857620004238162000358565b8652600196909601959483019483016200040f565b5096506200044a905087820162000358565b9450505050509250929050565b6000602082840312156200046a57600080fd5b81516200047781620004d4565b9392505050565b6000600019821415620004a157634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620004ea57600080fd5b50565b60805160601c612e856200055960003960008181610448015281816105a10152818161064c015281816106a501528181610c01015281816112aa0152818161139b0152818161143601528181611739015281816117f00152818161188d0152611f480152612e856000f3fe60806040526004361061012d5760003560e01c8063484685b0116100a5578063b31dd34011610074578063e324718011610059578063e3247180146103e2578063f0bd87cc14610402578063f7c618c11461043657600080fd5b8063b31dd340146103a2578063d547741f146103c257600080fd5b8063484685b0146102a25780637bd40db6146102c257806391d148541461033c578063a217fddf1461038d57600080fd5b806324ea54f4116100fc57806336568abe116100e157806336568abe146102425780633a045145146102625780633e0c06291461028257600080fd5b806324ea54f4146101ee5780632f2ff15d1461022257600080fd5b806301ffc9a714610139578063079a193b1461016e5780631171bda914610190578063248a9ca3146101b057600080fd5b3661013457005b600080fd5b34801561014557600080fd5b506101596101543660046129fc565b61048f565b60405190151581526020015b60405180910390f35b34801561017a57600080fd5b5061018e610189366004612837565b610528565b005b34801561019c57600080fd5b5061018e6101ab3660046127f6565b6106d2565b3480156101bc57600080fd5b506101e06101cb36600461299a565b60009081526020819052604090206001015490565b604051908152602001610165565b3480156101fa57600080fd5b506101e07f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561022e57600080fd5b5061018e61023d3660046129cc565b61078b565b34801561024e57600080fd5b5061018e61025d3660046129cc565b6107b6565b34801561026e57600080fd5b5061018e61027d3660046127bc565b61086e565b34801561028e57600080fd5b5061018e61029d366004612837565b610aa6565b3480156102ae57600080fd5b5061018e6102bd3660046127bc565b610bbc565b3480156102ce57600080fd5b5061032d6102dd3660046127bc565b6001602081905260009182526040909120805491015473ffffffffffffffffffffffffffffffffffffffff9182169181169074010000000000000000000000000000000000000000900460ff1683565b60405161016593929190612ba2565b34801561034857600080fd5b506101596103573660046129cc565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561039957600080fd5b506101e0600081565b3480156103ae57600080fd5b5061018e6103bd366004612863565b610c29565b3480156103ce57600080fd5b5061018e6103dd3660046129cc565b61157b565b3480156103ee57600080fd5b5061018e6103fd366004612837565b6115a1565b34801561040e57600080fd5b506101e07ffbd454f36a7e1a388bd6fc3ab10d434aa4578f811acbbcf33afb1c697486313c81565b34801561044257600080fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610165565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061052257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416105538133611917565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff84811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b1580156105e557600080fd5b505afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d91906129b3565b90508281101561067857610673846106358386612cbd565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691906119e7565b6106cc565b828111156106cc576106cc8461068e8584612cbd565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169190611b72565b50505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416106fd8133611917565b61071e73ffffffffffffffffffffffffffffffffffffffff85168484611d0e565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488460405161077d91815260200190565b60405180910390a350505050565b6000828152602081905260409020600101546107a78133611917565b6107b18383611d64565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61086a8282611e54565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416108998133611917565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160208181526040808420815160608101835281548716815293810154958616928401929092529293919290919083019074010000000000000000000000000000000000000000900460ff16600281111561091457610914612d9d565b600281111561092557610925612d9d565b905250805190915073ffffffffffffffffffffffffffffffffffffffff166109a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313000000000000000000000000000000000000000000000000000000000006044820152606401610857565b6000816040015160028111156109c1576109c1612d9d565b14156109d75780516109d290610bbc565b610a05565b6002816040015160028111156109ef576109ef612d9d565b1415610a0557610a056102bd8260200151611f0b565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260016020819052604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815590910180547fffffffffffffffffffffff000000000000000000000000000000000000000000169055517fd8447e2a6ccc1f3caeea39fdaea6ca5c1c22a9ab79022d1e39a8c24f0736e5499190a2505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610ad18133611917565b60405173ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050610b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f39380000000000000000000000000000000000000000000000000000000000006044820152606401610857565b60405182815273ffffffffffffffffffffffffffffffffffffffff8416906000907ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6489060200160405180910390a3505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610be78133611917565b61086a73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016836000612077565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c548133611917565b6000855111610cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f35000000000000000000000000000000000000000000000000000000000000006044820152606401610857565b83518551148015610cd1575082518551145b8015610cde575081518551145b610d44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303400000000000000000000000000000000000000000000000000000000006044820152606401610857565b60005b855181101561157357600073ffffffffffffffffffffffffffffffffffffffff16868281518110610d7a57610d7a612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614158015610dec5750600073ffffffffffffffffffffffffffffffffffffffff16858281518110610dcb57610dcb612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614155b610e52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610857565b6000838281518110610e6657610e66612dcc565b60200260200101516002811115610e7f57610e7f612d9d565b1415610f3457600073ffffffffffffffffffffffffffffffffffffffff16848281518110610eaf57610eaf612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610f34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313300000000000000000000000000000000000000000000000000000000006044820152606401610857565b6002838281518110610f4857610f48612dcc565b60200260200101516002811115610f6157610f61612d9d565b1480610f9757506001838281518110610f7c57610f7c612dcc565b60200260200101516002811115610f9557610f95612d9d565b145b1561104c57600073ffffffffffffffffffffffffffffffffffffffff16848281518110610fc657610fc6612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561104c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610857565b60006001600088848151811061106457611064612dcc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683529082019290925260400160002080549092501615611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313200000000000000000000000000000000000000000000000000000000006044820152606401610857565b85828151811061111657611116612dcc565b602090810291909101015181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178155835184908390811061117457611174612dcc565b60209081029190910101516001820180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008360028111156111cf576111cf612d9d565b02179055508482815181106111e6576111e6612dcc565b60209081029190910101516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055600084838151811061124b5761124b612dcc565b6020026020010151600281111561126457611264612d9d565b14156112f3576112ee86838151811061127f5761127f612dcc565b60200260200101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166120779092919063ffffffff16565b611480565b600284838151811061130757611307612dcc565b6020026020010151600281111561132057611320612d9d565b141561148057600061134a86848151811061133d5761133d612dcc565b6020026020010151611f0b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff80831660248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9060440160206040518083038186803b1580156113dd57600080fd5b505afa1580156113f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141591906129b3565b90508061147d5761147d73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612077565b50505b84828151811061149257611492612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168683815181106114c2576114c2612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168884815181106114f2576114f2612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f76cc700fdcf22aabf7a1727d361771f174d4b9a9e93b3c91bddf783ab81493d887868151811061154357611543612dcc565b60200260200101516040516115589190612bd4565b60405180910390a4508061156b81612d35565b915050610d47565b505050505050565b6000828152602081905260409020600101546115978133611917565b6107b18383611e54565b7ffbd454f36a7e1a388bd6fc3ab10d434aa4578f811acbbcf33afb1c697486313c6115cc8133611917565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160208181526040808420815160608101835281548716815293810154958616928401929092529293919290919083019074010000000000000000000000000000000000000000900460ff16600281111561164757611647612d9d565b600281111561165857611658612d9d565b905250805190915073ffffffffffffffffffffffffffffffffffffffff166116dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313000000000000000000000000000000000000000000000000000000000006044820152606401610857565b6000816040015160028111156116f4576116f4612d9d565b14156117ab5780516040517f93f7aa6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201869052909116906393f7aa67906044015b600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b505050506118b4565b6002816040015160028111156117c3576117c3612d9d565b141561184f57806020015173ffffffffffffffffffffffffffffffffffffffff1663e3dec8fb82600001517f00000000000000000000000000000000000000000000000000000000000000008660405160200161182291815260200190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161177493929190612b60565b60018160400151600281111561186757611867612d9d565b14156118b45760208101516118b49073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169085611d0e565b806000015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf508268560405161077d91815260200190565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661086a5761196d8173ffffffffffffffffffffffffffffffffffffffff166014612208565b611978836020612208565b604051602001611989929190612adf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261085791600401612be2565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9191906129b3565b611a9b9190612c68565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506106cc9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261244b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b91906129b3565b905081811015611cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610857565b60405173ffffffffffffffffffffffffffffffffffffffff841660248201528282036044820181905290611d079086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611af0565b5050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107b19084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611af0565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661086a5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611df63390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561086a5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040517fe43009a600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152600091829184169063e43009a69060240160206040518083038186803b158015611f9757600080fd5b505afa158015611fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcf91906129b3565b6040517fe66f96030000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff84169063e66f96039060240160206040518083038186803b15801561203857600080fd5b505afa15801561204c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207091906127d9565b9392505050565b80158061212657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156120ec57600080fd5b505afa158015612100573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212491906129b3565b155b6121b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610857565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107b19084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611af0565b60606000612217836002612c80565b612222906002612c68565b67ffffffffffffffff81111561223a5761223a612dfb565b6040519080825280601f01601f191660200182016040528015612264576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061229b5761229b612dcc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122fe576122fe612dcc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061233a846002612c80565b612345906001612c68565b90505b60018111156123e2577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061238657612386612dcc565b1a60f81b82828151811061239c5761239c612dcc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936123db81612d00565b9050612348565b508315612070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610857565b60006124ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125579092919063ffffffff16565b8051909150156107b157808060200190518101906124cb9190612978565b6107b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610857565b6060612566848460008561256e565b949350505050565b606082471015612600576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610857565b843b612668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610857565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516126919190612ac3565b60006040518083038185875af1925050503d80600081146126ce576040519150601f19603f3d011682016040523d82523d6000602084013e6126d3565b606091505b50915091506126e38282866126ee565b979650505050505050565b606083156126fd575081612070565b82511561270d5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108579190612be2565b600082601f83011261275257600080fd5b8135602061276761276283612c44565b612bf5565b80838252828201915082860187848660051b890101111561278757600080fd5b60005b858110156127af57813561279d81612e2a565b8452928401929084019060010161278a565b5090979650505050505050565b6000602082840312156127ce57600080fd5b813561207081612e2a565b6000602082840312156127eb57600080fd5b815161207081612e2a565b60008060006060848603121561280b57600080fd5b833561281681612e2a565b9250602084013561282681612e2a565b929592945050506040919091013590565b6000806040838503121561284a57600080fd5b823561285581612e2a565b946020939093013593505050565b6000806000806080858703121561287957600080fd5b843567ffffffffffffffff8082111561289157600080fd5b61289d88838901612741565b95506020915081870135818111156128b457600080fd5b6128c089828a01612741565b9550506040870135818111156128d557600080fd5b6128e189828a01612741565b9450506060870135818111156128f657600080fd5b87019050601f8101881361290957600080fd5b803561291761276282612c44565b8082825284820191508484018b868560051b870101111561293757600080fd5b60009450845b8481101561296557813560038110612953578687fd5b8452928601929086019060010161293d565b5050809550505050505092959194509250565b60006020828403121561298a57600080fd5b8151801515811461207057600080fd5b6000602082840312156129ac57600080fd5b5035919050565b6000602082840312156129c557600080fd5b5051919050565b600080604083850312156129df57600080fd5b8235915060208301356129f181612e2a565b809150509250929050565b600060208284031215612a0e57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461207057600080fd5b60008151808452612a56816020860160208601612cd4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60038110612abf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60008251612ad5818460208701612cd4565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b17816017850160208801612cd4565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612b54816028840160208801612cd4565b01602801949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152612b996060830184612a3e565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff848116825283166020820152606081016125666040830184612a88565b602081016105228284612a88565b6020815260006120706020830184612a3e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612c3c57612c3c612dfb565b604052919050565b600067ffffffffffffffff821115612c5e57612c5e612dfb565b5060051b60200190565b60008219821115612c7b57612c7b612d6e565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cb857612cb8612d6e565b500290565b600082821015612ccf57612ccf612d6e565b500390565b60005b83811015612cef578181015183820152602001612cd7565b838111156106cc5750506000910152565b600081612d0f57612d0f612d6e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d6757612d67612d6e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612e4c57600080fd5b5056fea264697066735822122011206b2d3136001962c49df6b78a09f0c2e32efe01b34e75bd0e24f97f59f17e64736f6c63430008070033fbd454f36a7e1a388bd6fc3ab10d434aa4578f811acbbcf33afb1c697486313c55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
  "deployedBytecode": "0x60806040526004361061012d5760003560e01c8063484685b0116100a5578063b31dd34011610074578063e324718011610059578063e3247180146103e2578063f0bd87cc14610402578063f7c618c11461043657600080fd5b8063b31dd340146103a2578063d547741f146103c257600080fd5b8063484685b0146102a25780637bd40db6146102c257806391d148541461033c578063a217fddf1461038d57600080fd5b806324ea54f4116100fc57806336568abe116100e157806336568abe146102425780633a045145146102625780633e0c06291461028257600080fd5b806324ea54f4146101ee5780632f2ff15d1461022257600080fd5b806301ffc9a714610139578063079a193b1461016e5780631171bda914610190578063248a9ca3146101b057600080fd5b3661013457005b600080fd5b34801561014557600080fd5b506101596101543660046129fc565b61048f565b60405190151581526020015b60405180910390f35b34801561017a57600080fd5b5061018e610189366004612837565b610528565b005b34801561019c57600080fd5b5061018e6101ab3660046127f6565b6106d2565b3480156101bc57600080fd5b506101e06101cb36600461299a565b60009081526020819052604090206001015490565b604051908152602001610165565b3480156101fa57600080fd5b506101e07f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561022e57600080fd5b5061018e61023d3660046129cc565b61078b565b34801561024e57600080fd5b5061018e61025d3660046129cc565b6107b6565b34801561026e57600080fd5b5061018e61027d3660046127bc565b61086e565b34801561028e57600080fd5b5061018e61029d366004612837565b610aa6565b3480156102ae57600080fd5b5061018e6102bd3660046127bc565b610bbc565b3480156102ce57600080fd5b5061032d6102dd3660046127bc565b6001602081905260009182526040909120805491015473ffffffffffffffffffffffffffffffffffffffff9182169181169074010000000000000000000000000000000000000000900460ff1683565b60405161016593929190612ba2565b34801561034857600080fd5b506101596103573660046129cc565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561039957600080fd5b506101e0600081565b3480156103ae57600080fd5b5061018e6103bd366004612863565b610c29565b3480156103ce57600080fd5b5061018e6103dd3660046129cc565b61157b565b3480156103ee57600080fd5b5061018e6103fd366004612837565b6115a1565b34801561040e57600080fd5b506101e07ffbd454f36a7e1a388bd6fc3ab10d434aa4578f811acbbcf33afb1c697486313c81565b34801561044257600080fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610165565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061052257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416105538133611917565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff84811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b1580156105e557600080fd5b505afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d91906129b3565b90508281101561067857610673846106358386612cbd565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691906119e7565b6106cc565b828111156106cc576106cc8461068e8584612cbd565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169190611b72565b50505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416106fd8133611917565b61071e73ffffffffffffffffffffffffffffffffffffffff85168484611d0e565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488460405161077d91815260200190565b60405180910390a350505050565b6000828152602081905260409020600101546107a78133611917565b6107b18383611d64565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61086a8282611e54565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416108998133611917565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160208181526040808420815160608101835281548716815293810154958616928401929092529293919290919083019074010000000000000000000000000000000000000000900460ff16600281111561091457610914612d9d565b600281111561092557610925612d9d565b905250805190915073ffffffffffffffffffffffffffffffffffffffff166109a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313000000000000000000000000000000000000000000000000000000000006044820152606401610857565b6000816040015160028111156109c1576109c1612d9d565b14156109d75780516109d290610bbc565b610a05565b6002816040015160028111156109ef576109ef612d9d565b1415610a0557610a056102bd8260200151611f0b565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260016020819052604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815590910180547fffffffffffffffffffffff000000000000000000000000000000000000000000169055517fd8447e2a6ccc1f3caeea39fdaea6ca5c1c22a9ab79022d1e39a8c24f0736e5499190a2505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610ad18133611917565b60405173ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050610b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f39380000000000000000000000000000000000000000000000000000000000006044820152606401610857565b60405182815273ffffffffffffffffffffffffffffffffffffffff8416906000907ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6489060200160405180910390a3505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610be78133611917565b61086a73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016836000612077565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610c548133611917565b6000855111610cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f35000000000000000000000000000000000000000000000000000000000000006044820152606401610857565b83518551148015610cd1575082518551145b8015610cde575081518551145b610d44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303400000000000000000000000000000000000000000000000000000000006044820152606401610857565b60005b855181101561157357600073ffffffffffffffffffffffffffffffffffffffff16868281518110610d7a57610d7a612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614158015610dec5750600073ffffffffffffffffffffffffffffffffffffffff16858281518110610dcb57610dcb612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614155b610e52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610857565b6000838281518110610e6657610e66612dcc565b60200260200101516002811115610e7f57610e7f612d9d565b1415610f3457600073ffffffffffffffffffffffffffffffffffffffff16848281518110610eaf57610eaf612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610f34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313300000000000000000000000000000000000000000000000000000000006044820152606401610857565b6002838281518110610f4857610f48612dcc565b60200260200101516002811115610f6157610f61612d9d565b1480610f9757506001838281518110610f7c57610f7c612dcc565b60200260200101516002811115610f9557610f95612d9d565b145b1561104c57600073ffffffffffffffffffffffffffffffffffffffff16848281518110610fc657610fc6612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561104c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610857565b60006001600088848151811061106457611064612dcc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683529082019290925260400160002080549092501615611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313200000000000000000000000000000000000000000000000000000000006044820152606401610857565b85828151811061111657611116612dcc565b602090810291909101015181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178155835184908390811061117457611174612dcc565b60209081029190910101516001820180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008360028111156111cf576111cf612d9d565b02179055508482815181106111e6576111e6612dcc565b60209081029190910101516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055600084838151811061124b5761124b612dcc565b6020026020010151600281111561126457611264612d9d565b14156112f3576112ee86838151811061127f5761127f612dcc565b60200260200101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166120779092919063ffffffff16565b611480565b600284838151811061130757611307612dcc565b6020026020010151600281111561132057611320612d9d565b141561148057600061134a86848151811061133d5761133d612dcc565b6020026020010151611f0b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff80831660248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9060440160206040518083038186803b1580156113dd57600080fd5b505afa1580156113f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141591906129b3565b90508061147d5761147d73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612077565b50505b84828151811061149257611492612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168683815181106114c2576114c2612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168884815181106114f2576114f2612dcc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f76cc700fdcf22aabf7a1727d361771f174d4b9a9e93b3c91bddf783ab81493d887868151811061154357611543612dcc565b60200260200101516040516115589190612bd4565b60405180910390a4508061156b81612d35565b915050610d47565b505050505050565b6000828152602081905260409020600101546115978133611917565b6107b18383611e54565b7ffbd454f36a7e1a388bd6fc3ab10d434aa4578f811acbbcf33afb1c697486313c6115cc8133611917565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160208181526040808420815160608101835281548716815293810154958616928401929092529293919290919083019074010000000000000000000000000000000000000000900460ff16600281111561164757611647612d9d565b600281111561165857611658612d9d565b905250805190915073ffffffffffffffffffffffffffffffffffffffff166116dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31313000000000000000000000000000000000000000000000000000000000006044820152606401610857565b6000816040015160028111156116f4576116f4612d9d565b14156117ab5780516040517f93f7aa6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201869052909116906393f7aa67906044015b600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b505050506118b4565b6002816040015160028111156117c3576117c3612d9d565b141561184f57806020015173ffffffffffffffffffffffffffffffffffffffff1663e3dec8fb82600001517f00000000000000000000000000000000000000000000000000000000000000008660405160200161182291815260200190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161177493929190612b60565b60018160400151600281111561186757611867612d9d565b14156118b45760208101516118b49073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169085611d0e565b806000015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf508268560405161077d91815260200190565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661086a5761196d8173ffffffffffffffffffffffffffffffffffffffff166014612208565b611978836020612208565b604051602001611989929190612adf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261085791600401612be2565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9191906129b3565b611a9b9190612c68565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506106cc9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261244b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b91906129b3565b905081811015611cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610857565b60405173ffffffffffffffffffffffffffffffffffffffff841660248201528282036044820181905290611d079086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611af0565b5050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107b19084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611af0565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661086a5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611df63390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561086a5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040517fe43009a600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152600091829184169063e43009a69060240160206040518083038186803b158015611f9757600080fd5b505afa158015611fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcf91906129b3565b6040517fe66f96030000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff84169063e66f96039060240160206040518083038186803b15801561203857600080fd5b505afa15801561204c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207091906127d9565b9392505050565b80158061212657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156120ec57600080fd5b505afa158015612100573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212491906129b3565b155b6121b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610857565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107b19084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611af0565b60606000612217836002612c80565b612222906002612c68565b67ffffffffffffffff81111561223a5761223a612dfb565b6040519080825280601f01601f191660200182016040528015612264576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061229b5761229b612dcc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122fe576122fe612dcc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061233a846002612c80565b612345906001612c68565b90505b60018111156123e2577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061238657612386612dcc565b1a60f81b82828151811061239c5761239c612dcc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936123db81612d00565b9050612348565b508315612070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610857565b60006124ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125579092919063ffffffff16565b8051909150156107b157808060200190518101906124cb9190612978565b6107b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610857565b6060612566848460008561256e565b949350505050565b606082471015612600576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610857565b843b612668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610857565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516126919190612ac3565b60006040518083038185875af1925050503d80600081146126ce576040519150601f19603f3d011682016040523d82523d6000602084013e6126d3565b606091505b50915091506126e38282866126ee565b979650505050505050565b606083156126fd575081612070565b82511561270d5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108579190612be2565b600082601f83011261275257600080fd5b8135602061276761276283612c44565b612bf5565b80838252828201915082860187848660051b890101111561278757600080fd5b60005b858110156127af57813561279d81612e2a565b8452928401929084019060010161278a565b5090979650505050505050565b6000602082840312156127ce57600080fd5b813561207081612e2a565b6000602082840312156127eb57600080fd5b815161207081612e2a565b60008060006060848603121561280b57600080fd5b833561281681612e2a565b9250602084013561282681612e2a565b929592945050506040919091013590565b6000806040838503121561284a57600080fd5b823561285581612e2a565b946020939093013593505050565b6000806000806080858703121561287957600080fd5b843567ffffffffffffffff8082111561289157600080fd5b61289d88838901612741565b95506020915081870135818111156128b457600080fd5b6128c089828a01612741565b9550506040870135818111156128d557600080fd5b6128e189828a01612741565b9450506060870135818111156128f657600080fd5b87019050601f8101881361290957600080fd5b803561291761276282612c44565b8082825284820191508484018b868560051b870101111561293757600080fd5b60009450845b8481101561296557813560038110612953578687fd5b8452928601929086019060010161293d565b5050809550505050505092959194509250565b60006020828403121561298a57600080fd5b8151801515811461207057600080fd5b6000602082840312156129ac57600080fd5b5035919050565b6000602082840312156129c557600080fd5b5051919050565b600080604083850312156129df57600080fd5b8235915060208301356129f181612e2a565b809150509250929050565b600060208284031215612a0e57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461207057600080fd5b60008151808452612a56816020860160208601612cd4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60038110612abf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60008251612ad5818460208701612cd4565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b17816017850160208801612cd4565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612b54816028840160208801612cd4565b01602801949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152612b996060830184612a3e565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff848116825283166020820152606081016125666040830184612a88565b602081016105228284612a88565b6020815260006120706020830184612a3e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612c3c57612c3c612dfb565b604052919050565b600067ffffffffffffffff821115612c5e57612c5e612dfb565b5060051b60200190565b60008219821115612c7b57612c7b612d6e565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cb857612cb8612d6e565b500290565b600082821015612ccf57612ccf612d6e565b500390565b60005b83811015612cef578181015183820152602001612cd7565b838111156106cc5750506000910152565b600081612d0f57612d0f612d6e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d6757612d67612d6e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612e4c57600080fd5b5056fea264697066735822122011206b2d3136001962c49df6b78a09f0c2e32efe01b34e75bd0e24f97f59f17e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addGauges(address[],address[],address[],uint8[])": {
        "details": "Addresses of gauges within the Angle Protocol corresponding to Curve pools or multichain staking contracts are identifiers to be used only for voting purposes.This is the reason we map them to the \"real\" `recipient` contract",
        "params": {
          "bridges": "Array of addresses of the bridging contracts",
          "gauges": "Array of gauges, as defined in `AngleDistributor`",
          "recipientType": "Curve, Polygon or Anyswap",
          "recipients": "Array of addresses ultimately meant to receive the tokens"
        }
      },
      "changeAllowance(address,uint256)": {
        "params": {
          "approvedAmount": "Amount that we want to approve",
          "spender": "Address of the contract that was approved"
        }
      },
      "constructor": {
        "params": {
          "distributor": "address of `AngleDistributor`. Notifies the contract that new rewards should be distributed",
          "guardians": "array of address of admins for this contract. Guardians are allowed to add new gauges or remove them, and recover tokens from the contract"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "notifyReward(address,uint256)": {
        "params": {
          "amount": "Amount of tokens to be sent",
          "gauge": "Address of the gauge, as defined in `AngleDistributor`"
        }
      },
      "recoverERC20(address,address,uint256)": {
        "params": { "amount": "Amount to be recovered", "token": "Address of the token" }
      },
      "recoverETH(address,uint256)": { "params": { "amount": "Amount to be recovered" } },
      "removeGauge(address)": { "params": { "gauge": "Address of the gauge (found in `AngleDistributor`)" } },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeApproval(address)": { "params": { "spender": "Address of the contract that was approved" } },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": { "details": "See {IERC165-supportsInterface}." }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGauges(address[],address[],address[],uint8[])": {
        "notice": "Allows the Governor to add new gauges of type \"Curve\""
      },
      "changeAllowance(address,uint256)": {
        "notice": "Ability to change allowance for a contract. Approvals are given in the `addGauges` methods"
      },
      "constructor": {
        "notice": "Deploys `AngleMiddleman` used to route reward tokens (ANGLE) from `AngleDistributor` to gauges"
      },
      "gaugeToRecipient(address)": {
        "notice": "Maps a gauge address (as defined in `AngleDistributor`) to its parameters"
      },
      "notifyReward(address,uint256)": {
        "notice": "Sends the tokens to the recipient contract using the appropriate method (direct transfer or bridging)"
      },
      "recoverERC20(address,address,uint256)": { "notice": "Recovers ERC20 tokens from the contract" },
      "recoverETH(address,uint256)": { "notice": "Recovers ETH from the contract" },
      "removeGauge(address)": {
        "notice": "Deletes a gauge. Removes the parameters from `gaugeToRecipient` and revokes approvals"
      },
      "revokeApproval(address)": {
        "notice": "Ability to revoke approval for a contract. Approvals are given in the `addGauges` methods"
      },
      "rewardToken()": { "notice": "Most likely ANGLE token (currently: 0x31429d1856aD1377A8A0079410B297e1a9e214c2)" }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7001,
        "contract": "contracts/middleman/AngleMiddleman.sol:AngleMiddleman",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)6996_storage)"
      },
      {
        "astId": 24230,
        "contract": "contracts/middleman/AngleMiddleman.sol:AngleMiddleman",
        "label": "gaugeToRecipient",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Recipient)24210_storage)"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_enum(RecipientType)24202": {
        "encoding": "inplace",
        "label": "enum AngleMiddleman.RecipientType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Recipient)24210_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AngleMiddleman.Recipient)",
        "numberOfBytes": "32",
        "value": "t_struct(Recipient)24210_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)6996_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)6996_storage"
      },
      "t_struct(Recipient)24210_storage": {
        "encoding": "inplace",
        "label": "struct AngleMiddleman.Recipient",
        "members": [
          {
            "astId": 24204,
            "contract": "contracts/middleman/AngleMiddleman.sol:AngleMiddleman",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24206,
            "contract": "contracts/middleman/AngleMiddleman.sol:AngleMiddleman",
            "label": "bridge",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 24209,
            "contract": "contracts/middleman/AngleMiddleman.sol:AngleMiddleman",
            "label": "recipientType",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(RecipientType)24202"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)6996_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 6993,
            "contract": "contracts/middleman/AngleMiddleman.sol:AngleMiddleman",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6995,
            "contract": "contracts/middleman/AngleMiddleman.sol:AngleMiddleman",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}
