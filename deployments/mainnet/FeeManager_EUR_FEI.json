{
  "address": "0x4A5E967100CA28566CB2A39216992C6dB57e95A4",
  "abi": [
    {
      "inputs": [{ "internalType": "contract IPoolManager", "name": "_poolManager", "type": "address" }],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256[]", "name": "_xBonusMalusBurn", "type": "uint256[]" },
        { "indexed": false, "internalType": "uint64[]", "name": "_yBonusMalusBurn", "type": "uint64[]" }
      ],
      "name": "FeeBurnUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256[]", "name": "_xBonusMalusMint", "type": "uint256[]" },
        { "indexed": false, "internalType": "uint64[]", "name": "_yBonusMalusMint", "type": "uint64[]" }
      ],
      "name": "FeeMintUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint64", "name": "_haFeeDeposit", "type": "uint64" },
        { "indexed": false, "internalType": "uint64", "name": "_haFeeWithdraw", "type": "uint64" }
      ],
      "name": "HaFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256[]", "name": "_xSlippageFee", "type": "uint256[]" },
        { "indexed": false, "internalType": "uint64[]", "name": "_ySlippageFee", "type": "uint64[]" }
      ],
      "name": "SlippageFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256[]", "name": "_xSlippage", "type": "uint256[]" },
        { "indexed": false, "internalType": "uint64[]", "name": "_ySlippage", "type": "uint64[]" }
      ],
      "name": "SlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256", "name": "_collatRatio", "type": "uint256" },
        { "indexed": false, "internalType": "uint64", "name": "_bonusMalusMint", "type": "uint64" },
        { "indexed": false, "internalType": "uint64", "name": "_bonusMalusBurn", "type": "uint64" },
        { "indexed": false, "internalType": "uint64", "name": "_slippage", "type": "uint64" },
        { "indexed": false, "internalType": "uint64", "name": "_slippageFee", "type": "uint64" }
      ],
      "name": "UserAndSLPFeesUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS_CASTED",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOLMANAGER_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address[]", "name": "governorList", "type": "address[]" },
        { "internalType": "address", "name": "guardian", "type": "address" },
        { "internalType": "address", "name": "_perpetualManager", "type": "address" }
      ],
      "name": "deployCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haFeeDeposit",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haFeeWithdraw",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perpetualManager",
      "outputs": [{ "internalType": "contract IPerpetualManager", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256[]", "name": "xArray", "type": "uint256[]" },
        { "internalType": "uint64[]", "name": "yArray", "type": "uint64[]" },
        { "internalType": "uint8", "name": "typeChange", "type": "uint8" }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint64", "name": "_haFeeDeposit", "type": "uint64" },
        { "internalType": "uint64", "name": "_haFeeWithdraw", "type": "uint64" }
      ],
      "name": "setHAFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableMaster",
      "outputs": [{ "internalType": "contract IStableMaster", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "updateHA", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateUsersSLP", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "xBonusMalusBurn",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "xBonusMalusMint",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "xSlippage",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "xSlippageFee",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "yBonusMalusBurn",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "yBonusMalusMint",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "ySlippage",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "ySlippageFee",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6145716126ac1606167261359ccedc4f55c3b3e4a1b19b4581606cc3a33b91f",
  "receipt": {
    "to": null,
    "from": "0xA2dEe32662F6243dA539bf6A8613F9A9e39843D3",
    "contractAddress": "0x4A5E967100CA28566CB2A39216992C6dB57e95A4",
    "transactionIndex": 224,
    "gasUsed": "2069454",
    "logsBloom": "0x000000040000000008000000000000000800000000000000000000000000000000000080800000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200004000000000000008000000000000000000000000000000000000000000000000000000000000000100000000000000a0000000000000004000000000000000000000000000000000000000020000800000001000000000000000000004020000000000000000000000000000000000000100000000000020000000040000000080000000000000000000000000000000000000000400040000",
    "blockHash": "0x404f79efbb50069ad287011d68cd0f481cdd49a509dbf9aafb9747a9b41ea472",
    "transactionHash": "0xf6145716126ac1606167261359ccedc4f55c3b3e4a1b19b4581606cc3a33b91f",
    "logs": [
      {
        "transactionIndex": 224,
        "blockNumber": 13601711,
        "transactionHash": "0xf6145716126ac1606167261359ccedc4f55c3b3e4a1b19b4581606cc3a33b91f",
        "address": "0x4A5E967100CA28566CB2A39216992C6dB57e95A4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562",
          "0x00000000000000000000000053b981389cfc5dcda2dc2e903147b5dd0e985f44",
          "0x000000000000000000000000a2dee32662f6243da539bf6a8613f9a9e39843d3"
        ],
        "data": "0x",
        "logIndex": 255,
        "blockHash": "0x404f79efbb50069ad287011d68cd0f481cdd49a509dbf9aafb9747a9b41ea472"
      },
      {
        "transactionIndex": 224,
        "blockNumber": 13601711,
        "transactionHash": "0xf6145716126ac1606167261359ccedc4f55c3b3e4a1b19b4581606cc3a33b91f",
        "address": "0x4A5E967100CA28566CB2A39216992C6dB57e95A4",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562"
        ],
        "data": "0x",
        "logIndex": 256,
        "blockHash": "0x404f79efbb50069ad287011d68cd0f481cdd49a509dbf9aafb9747a9b41ea472"
      },
      {
        "transactionIndex": 224,
        "blockNumber": 13601711,
        "transactionHash": "0xf6145716126ac1606167261359ccedc4f55c3b3e4a1b19b4581606cc3a33b91f",
        "address": "0x4A5E967100CA28566CB2A39216992C6dB57e95A4",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562"
        ],
        "data": "0x",
        "logIndex": 257,
        "blockHash": "0x404f79efbb50069ad287011d68cd0f481cdd49a509dbf9aafb9747a9b41ea472"
      }
    ],
    "blockNumber": 13601711,
    "cumulativeGasUsed": "13738144",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x53b981389Cfc5dCDA2DC2e903147B5DD0E985F44"],
  "solcInputHash": "d2431381ca4dca5780c529a42e2dc53d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_xBonusMalusBurn\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_yBonusMalusBurn\",\"type\":\"uint64[]\"}],\"name\":\"FeeBurnUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_xBonusMalusMint\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_yBonusMalusMint\",\"type\":\"uint64[]\"}],\"name\":\"FeeMintUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_haFeeDeposit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_haFeeWithdraw\",\"type\":\"uint64\"}],\"name\":\"HaFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_xSlippageFee\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_ySlippageFee\",\"type\":\"uint64[]\"}],\"name\":\"SlippageFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_xSlippage\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_ySlippage\",\"type\":\"uint64[]\"}],\"name\":\"SlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collatRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_bonusMalusMint\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_bonusMalusBurn\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_slippage\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_slippageFee\",\"type\":\"uint64\"}],\"name\":\"UserAndSLPFeesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS_CASTED\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_perpetualManager\",\"type\":\"address\"}],\"name\":\"deployCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haFeeDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haFeeWithdraw\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpetualManager\",\"outputs\":[{\"internalType\":\"contract IPerpetualManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"xArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yArray\",\"type\":\"uint64[]\"},{\"internalType\":\"uint8\",\"name\":\"typeChange\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_haFeeDeposit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_haFeeWithdraw\",\"type\":\"uint64\"}],\"name\":\"setHAFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableMaster\",\"outputs\":[{\"internalType\":\"contract IStableMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateHA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateUsersSLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xBonusMalusBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xBonusMalusMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xSlippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yBonusMalusBurn\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yBonusMalusMint\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ySlippage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ySlippageFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This contract interacts with fee parameters for a given stablecoin/collateral pair`FeeManager` contains all the functions that keepers can call to update parameters in the `StableMaster` and `PerpetualManager` contractsThese parameters need to be updated by keepers because they depend on variables, like the collateral ratio, that are too expensive to compute each time transactions that would need it occur\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The `_poolManager` address is used to grant the correct role. It does not need to be stored by the contractThere is no need to do a zero address check on the `_poolManager` as if the zero address is passed the function will revert when trying to fetch the `StableMaster`\",\"params\":{\"_poolManager\":\"`PoolManager` contract handling the collateral\"}},\"deployCollateral(address[],address,address)\":{\"details\":\"`GUARDIAN_ROLE` can then directly be granted or revoked by the corresponding `PoolManager` As `POOLMANAGER_ROLE` is admin of `GUARDIAN_ROLE`, it corresponds to the intended behaviour of roles\",\"params\":{\"_perpetualManager\":\"`PerpetualManager` contract handling the perpetuals of the pool\",\"governorList\":\"List of the governor addresses of the protocol\",\"guardian\":\"Guardian address of the protocol\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setFees(uint256[],uint64[],uint8)\":{\"details\":\"For `typeChange = 1`, `bonusMalusMint` fees are updatedFor `typeChange = 2`, `bonusMalusBurn` fees are updatedFor `typeChange = 3`, `slippage` values are updatedFor other values of `typeChange`, `slippageFee` values are updated\",\"params\":{\"typeChange\":\"Type of parameter to change\",\"xArray\":\"New collateral ratio thresholds (in ascending order)\",\"yArray\":\"New fees or values for the parameters at thresholds\"}},\"setHAFees(uint64,uint64)\":{\"params\":{\"_haFeeDeposit\":\"New parameter to modify deposit fee for HAs\",\"_haFeeWithdraw\":\"New parameter to modify withdraw fee for HAs\"}},\"updateHA()\":{\"details\":\"This function updates:     - The part of the fee taken from HAs when they open a perpetual or add collateral in it. This allows        governance to add penalties or bonuses in some occasions to HAs opening their perpetuals     - The part of the fee taken from the HA when they withdraw collateral from a perpetual. This allows       governance to add penalty or bonuses in some occasions to HAs closing their perpetualsPenalties or bonuses for HAs should almost never be usedIn the `PerpetualManager` contract, these parameters are multiplied to the fee amount depending on the HA hedge ratio to get the exact fee amount for HAsFor the moment, these parameters do not depend on the collateral ratio, and they are just an extra element that governance can play on to correct fees taken for HAs\"},\"updateUsersSLP()\":{\"details\":\"This function updates: \\t-\\t`bonusMalusMint`: part of the fee induced by a user minting depending on the collateral ratio                   In normal times, no fees are taken for that, and so this fee should be equal to `BASE_PARAMS`\\t\\t-\\t`bonusMalusBurn`: part of the fee induced by a user burning depending on the collateral ratio\\t\\t-\\tSlippage: what's given to SLPs compared with their claim when they exit\\t\\t-\\tSlippageFee: that is the portion of fees that is put aside because the protocol         is not well collateralized`bonusMalusMint` and `bonusMalusBurn` allow governance to add penalties or bonuses for users minting and burning in some situations of collateral ratio. These parameters are multiplied to the fee amount depending on the hedge ratio by Hedging Agents to get the exact fee induced to the users\"}},\"title\":\"FeeManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"GUARDIAN_ROLE()\":{\"notice\":\"Role for guardians and governors\"},\"POOLMANAGER_ROLE()\":{\"notice\":\"Role for `PoolManager` only\"},\"constructor\":{\"notice\":\"Deploys the `FeeManager` contract for a pair stablecoin/collateral\"},\"deployCollateral(address[],address,address)\":{\"notice\":\"Initializes the governor and guardian roles of the contract as well as the reference to the `perpetualManager` contract\"},\"haFeeDeposit()\":{\"notice\":\"Bonus - Malus HA deposit Fee, means that if the `fee > BASE_PARAMS` then HAs incur a malus and will have larger fees, while `fee < BASE_PARAMS` they incur a smaller fee than what they would have if fees just consisted in what was obtained using hedge ratio\"},\"haFeeWithdraw()\":{\"notice\":\"Bonus - Malus HA withdraw Fee\"},\"perpetualManager()\":{\"notice\":\"Address of the `PerpetualManager` corresponding to this contract This reference cannot be modified\"},\"setFees(uint256[],uint64[],uint8)\":{\"notice\":\"Sets the x (i.e. thresholds of collateral ratio) array / y (i.e. value of fees at threshold)-array for users minting, burning, for SLPs withdrawal slippage or for the slippage fee when updating the exchange rate between sanTokens and collateral\"},\"setHAFees(uint64,uint64)\":{\"notice\":\"Sets the extra fees that can be used when HAs deposit or withdraw collateral from the protocol\"},\"stableMaster()\":{\"notice\":\"Address of the `StableMaster` contract corresponding to this contract This reference cannot be modified\"},\"updateHA()\":{\"notice\":\"Updates HA fees associated to the pair stablecoin/collateral in the `PerpetualManager` contract\"},\"updateUsersSLP()\":{\"notice\":\"Updates the SLP and Users fees associated to the pair stablecoin/collateral in the `StableMaster` contract\"},\"xBonusMalusBurn(uint256)\":{\"notice\":\"Values of the collateral ratio where burn transaction fees will change\"},\"xBonusMalusMint(uint256)\":{\"notice\":\"Bonus - Malus Fee, means that if the `fee > BASE_PARAMS` then agents incur a malus and will have larger fees, while `fee < BASE_PARAMS` they incur a smaller fee than what they would have if fees just consisted in what was obtained using the hedge ratioValues of the collateral ratio where mint transaction fees will change for users It should be ranked in ascending order\"},\"xSlippage(uint256)\":{\"notice\":\"Values of the collateral ratio where the slippage factor for SLPs exiting will evolve\"},\"xSlippageFee(uint256)\":{\"notice\":\"Values of the collateral ratio where the slippage fee, that is the portion of the fees that does not come to SLPs although changes\"},\"yBonusMalusBurn(uint256)\":{\"notice\":\"Values of the bonus/malus on the burn fees at the points of collateral ratio in the array above\"},\"yBonusMalusMint(uint256)\":{\"notice\":\"Values of the bonus/malus on the mint fees at the points of collateral ratio in the array above The evolution of the fees when collateral ratio is between two threshold values is linear\"},\"ySlippage(uint256)\":{\"notice\":\"Slippage factor at the values of collateral ratio above\"},\"ySlippageFee(uint256)\":{\"notice\":\"Slippage fee value at the values of collateral ratio above\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/feeManager/FeeManager.sol\":\"FeeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14f6a40365c520e587ddc50dbe238cea9dcd5f6b99961528376d68566b10051b\",\"license\":\"GPL-3.0\"},\"contracts/feeManager/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./FeeManagerStorage.sol\\\";\\n\\n/// @title FeeManager\\n/// @author Angle Core Team\\n/// @dev This contract interacts with fee parameters for a given stablecoin/collateral pair\\n/// @dev `FeeManager` contains all the functions that keepers can call to update parameters\\n/// in the `StableMaster` and `PerpetualManager` contracts\\n/// @dev These parameters need to be updated by keepers because they depend on variables, like\\n/// the collateral ratio, that are too expensive to compute each time transactions that would need\\n/// it occur\\ncontract FeeManager is FeeManagerStorage, IFeeManagerFunctions, AccessControl, Initializable {\\n    /// @notice Role for `PoolManager` only\\n    bytes32 public constant POOLMANAGER_ROLE = keccak256(\\\"POOLMANAGER_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    /// @notice Deploys the `FeeManager` contract for a pair stablecoin/collateral\\n    /// @param _poolManager `PoolManager` contract handling the collateral\\n    /// @dev The `_poolManager` address is used to grant the correct role. It does not need to be stored by the\\n    /// contract\\n    /// @dev There is no need to do a zero address check on the `_poolManager` as if the zero address is passed\\n    /// the function will revert when trying to fetch the `StableMaster`\\n    constructor(IPoolManager _poolManager) {\\n        stableMaster = IStableMaster(_poolManager.stableMaster());\\n        // Once a `FeeManager` contract has been initialized with a `PoolManager` contract, this\\n        // reference cannot be modified\\n        _setupRole(POOLMANAGER_ROLE, address(_poolManager));\\n\\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\\n    }\\n\\n    /// @notice Initializes the governor and guardian roles of the contract as well as the reference to\\n    /// the `perpetualManager` contract\\n    /// @param governorList List of the governor addresses of the protocol\\n    /// @param guardian Guardian address of the protocol\\n    /// @param _perpetualManager `PerpetualManager` contract handling the perpetuals of the pool\\n    /// @dev `GUARDIAN_ROLE` can then directly be granted or revoked by the corresponding `PoolManager`\\n    /// As `POOLMANAGER_ROLE` is admin of `GUARDIAN_ROLE`, it corresponds to the intended behaviour of roles\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external override onlyRole(POOLMANAGER_ROLE) initializer {\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _grantRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        _grantRole(GUARDIAN_ROLE, guardian);\\n        perpetualManager = IPerpetualManager(_perpetualManager);\\n    }\\n\\n    // ============================ `StableMaster` =================================\\n\\n    /// @notice Updates the SLP and Users fees associated to the pair stablecoin/collateral in\\n    /// the `StableMaster` contract\\n    /// @dev This function updates:\\n    /// \\t-\\t`bonusMalusMint`: part of the fee induced by a user minting depending on the collateral ratio\\n    ///                   In normal times, no fees are taken for that, and so this fee should be equal to `BASE_PARAMS`\\n    ///\\t\\t-\\t`bonusMalusBurn`: part of the fee induced by a user burning depending on the collateral ratio\\n    ///\\t\\t-\\tSlippage: what's given to SLPs compared with their claim when they exit\\n    ///\\t\\t-\\tSlippageFee: that is the portion of fees that is put aside because the protocol\\n    ///         is not well collateralized\\n    /// @dev `bonusMalusMint` and `bonusMalusBurn` allow governance to add penalties or bonuses for users minting\\n    /// and burning in some situations of collateral ratio. These parameters are multiplied to the fee amount depending\\n    /// on the hedge ratio by Hedging Agents to get the exact fee induced to the users\\n    function updateUsersSLP() external override {\\n        // Computing the collateral ratio, expressed in `BASE_PARAMS`\\n        uint256 collatRatio = stableMaster.getCollateralRatio();\\n        // Computing the fees based on this collateral ratio\\n        uint64 bonusMalusMint = _piecewiseLinearCollatRatio(collatRatio, xBonusMalusMint, yBonusMalusMint);\\n        uint64 bonusMalusBurn = _piecewiseLinearCollatRatio(collatRatio, xBonusMalusBurn, yBonusMalusBurn);\\n        uint64 slippage = _piecewiseLinearCollatRatio(collatRatio, xSlippage, ySlippage);\\n        uint64 slippageFee = _piecewiseLinearCollatRatio(collatRatio, xSlippageFee, ySlippageFee);\\n\\n        emit UserAndSLPFeesUpdated(collatRatio, bonusMalusMint, bonusMalusBurn, slippage, slippageFee);\\n        stableMaster.setFeeKeeper(bonusMalusMint, bonusMalusBurn, slippage, slippageFee);\\n    }\\n\\n    // ============================= PerpetualManager ==============================\\n\\n    /// @notice Updates HA fees associated to the pair stablecoin/collateral in the `PerpetualManager` contract\\n    /// @dev This function updates:\\n    ///     - The part of the fee taken from HAs when they open a perpetual or add collateral in it. This allows\\n    ///        governance to add penalties or bonuses in some occasions to HAs opening their perpetuals\\n    ///     - The part of the fee taken from the HA when they withdraw collateral from a perpetual. This allows\\n    ///       governance to add penalty or bonuses in some occasions to HAs closing their perpetuals\\n    /// @dev Penalties or bonuses for HAs should almost never be used\\n    /// @dev In the `PerpetualManager` contract, these parameters are multiplied to the fee amount depending on the HA\\n    /// hedge ratio to get the exact fee amount for HAs\\n    /// @dev For the moment, these parameters do not depend on the collateral ratio, and they are just an extra\\n    /// element that governance can play on to correct fees taken for HAs\\n    function updateHA() external override {\\n        emit HaFeesUpdated(haFeeDeposit, haFeeWithdraw);\\n        perpetualManager.setFeeKeeper(haFeeDeposit, haFeeWithdraw);\\n    }\\n\\n    // ============================= Governance ====================================\\n\\n    /// @notice Sets the x (i.e. thresholds of collateral ratio) array / y (i.e. value of fees at threshold)-array\\n    /// for users minting, burning, for SLPs withdrawal slippage or for the slippage fee when updating\\n    /// the exchange rate between sanTokens and collateral\\n    /// @param xArray New collateral ratio thresholds (in ascending order)\\n    /// @param yArray New fees or values for the parameters at thresholds\\n    /// @param typeChange Type of parameter to change\\n    /// @dev For `typeChange = 1`, `bonusMalusMint` fees are updated\\n    /// @dev For `typeChange = 2`, `bonusMalusBurn` fees are updated\\n    /// @dev For `typeChange = 3`, `slippage` values are updated\\n    /// @dev For other values of `typeChange`, `slippageFee` values are updated\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external override onlyRole(GUARDIAN_ROLE) {\\n        require(xArray.length == yArray.length && yArray.length > 0, \\\"5\\\");\\n        for (uint256 i = 0; i <= yArray.length - 1; i++) {\\n            if (i > 0) {\\n                require(xArray[i] > xArray[i - 1], \\\"7\\\");\\n            }\\n        }\\n        if (typeChange == 1) {\\n            xBonusMalusMint = xArray;\\n            yBonusMalusMint = yArray;\\n            emit FeeMintUpdated(xBonusMalusMint, yBonusMalusMint);\\n        } else if (typeChange == 2) {\\n            xBonusMalusBurn = xArray;\\n            yBonusMalusBurn = yArray;\\n            emit FeeBurnUpdated(xBonusMalusBurn, yBonusMalusBurn);\\n        } else if (typeChange == 3) {\\n            xSlippage = xArray;\\n            ySlippage = yArray;\\n            _checkSlippageCompatibility();\\n            emit SlippageUpdated(xSlippage, ySlippage);\\n        } else {\\n            xSlippageFee = xArray;\\n            ySlippageFee = yArray;\\n            _checkSlippageCompatibility();\\n            emit SlippageFeeUpdated(xSlippageFee, ySlippageFee);\\n        }\\n    }\\n\\n    /// @notice Sets the extra fees that can be used when HAs deposit or withdraw collateral from the\\n    /// protocol\\n    /// @param _haFeeDeposit New parameter to modify deposit fee for HAs\\n    /// @param _haFeeWithdraw New parameter to modify withdraw fee for HAs\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external override onlyRole(GUARDIAN_ROLE) {\\n        haFeeDeposit = _haFeeDeposit;\\n        haFeeWithdraw = _haFeeWithdraw;\\n    }\\n\\n    /// @notice Helps to make sure that the `slippageFee` and the `slippage` will in most situations be compatible\\n    /// with one another\\n    /// @dev Whenever the `slippageFee` is not null, the `slippage` should be non null, as otherwise, there would be\\n    /// an opportunity cost to increase the collateral ratio to make the `slippage` non null and collect the fees\\n    /// that have been left aside\\n    /// @dev This function does not perform an exhaustive check around the fact that whenever the `slippageFee`\\n    /// is not null the `slippage` is not null neither. It simply checks that each positive value in the `ySlippageFee` array\\n    /// corresponds to a positive value of the `slippage`\\n    /// @dev The protocol still relies on governance to make sure that this condition is always verified, this function\\n    /// is just here to eliminate potentially extreme errors\\n    function _checkSlippageCompatibility() internal view {\\n        // We need this `if` condition because when this function is first called after contract deployment, the length\\n        // of the two arrays is zero\\n        if (xSlippage.length >= 1 && xSlippageFee.length >= 1) {\\n            for (uint256 i = 0; i <= ySlippageFee.length - 1; i++) {\\n                if (ySlippageFee[i] > 0) {\\n                    require(ySlippageFee[i] <= BASE_PARAMS_CASTED, \\\"37\\\");\\n                    require(_piecewiseLinearCollatRatio(xSlippageFee[i], xSlippage, ySlippage) > 0, \\\"38\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Computes the value of a linear by part function at a given point\\n    /// @param x Point of the function we want to compute\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev The evolution of the linear by part function between two breaking points is linear\\n    /// @dev Before the first breaking point and after the last one, the function is constant with a value\\n    /// equal to the first or last value of the `yArray`\\n    /// @dev The reason for having a function that is different from what's in the `FunctionUtils` contract is that\\n    /// here the values in `xArray` can be greater than `BASE_PARAMS` meaning that there is a non negligeable risk that\\n    /// the product between `yArray` and `xArray` values overflows\\n    function _piecewiseLinearCollatRatio(\\n        uint256 x,\\n        uint256[] storage xArray,\\n        uint64[] storage yArray\\n    ) internal view returns (uint64 y) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            uint256 yCasted;\\n            if (yArray[upper] > yArray[lower]) {\\n                yCasted =\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                yCasted =\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n            // There is no problem with this cast as `y` was initially a `uint64` and we divided a `uint256` with a `uint256`\\n            // that is greater\\n            y = uint64(yCasted);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6b6910355f0e9039645b6e08f4ab6a66d197e7a3aa52846f72666e3b8978b0b\",\"license\":\"GPL-3.0\"},\"contracts/feeManager/FeeManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\n\\nimport \\\"../interfaces/IFeeManager.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/IStableMaster.sol\\\";\\nimport \\\"../interfaces/IPerpetualManager.sol\\\";\\n\\n/// @title FeeManagerEvents\\n/// @author Angle Core Team\\n/// @dev This file contains all the events that are triggered by the `FeeManager` contract\\ncontract FeeManagerEvents {\\n    event UserAndSLPFeesUpdated(\\n        uint256 _collatRatio,\\n        uint64 _bonusMalusMint,\\n        uint64 _bonusMalusBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    );\\n\\n    event FeeMintUpdated(uint256[] _xBonusMalusMint, uint64[] _yBonusMalusMint);\\n\\n    event FeeBurnUpdated(uint256[] _xBonusMalusBurn, uint64[] _yBonusMalusBurn);\\n\\n    event SlippageUpdated(uint256[] _xSlippage, uint64[] _ySlippage);\\n\\n    event SlippageFeeUpdated(uint256[] _xSlippageFee, uint64[] _ySlippageFee);\\n\\n    event HaFeesUpdated(uint64 _haFeeDeposit, uint64 _haFeeWithdraw);\\n}\\n\",\"keccak256\":\"0x0c63d53405b77bef3dd4eb3b922cfe0023ca855cd987e23414e88ff6338de71e\",\"license\":\"GPL-3.0\"},\"contracts/feeManager/FeeManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./FeeManagerEvents.sol\\\";\\n\\n/// @title FeeManagerStorage\\n/// @author Angle Core Team\\n/// @dev `FeeManagerStorage` contains all the parameters (most often fee parameters) to add corrections\\n/// to fees in the `StableMaster` and `PerpetualManager` contracts\\ncontract FeeManagerStorage is FeeManagerEvents {\\n    uint64 public constant BASE_PARAMS_CASTED = 10**9;\\n    // ==================== References to other contracts ==========================\\n\\n    /// @notice Address of the `StableMaster` contract corresponding to this contract\\n    /// This reference cannot be modified\\n    IStableMaster public stableMaster;\\n\\n    /// @notice Address of the `PerpetualManager` corresponding to this contract\\n    /// This reference cannot be modified\\n    IPerpetualManager public perpetualManager;\\n\\n    // ================= Parameters that can be set by governance ==================\\n\\n    /// @notice Bonus - Malus Fee, means that if the `fee > BASE_PARAMS` then agents incur a malus and will\\n    /// have larger fees, while `fee < BASE_PARAMS` they incur a smaller fee than what they would have if fees\\n    /// just consisted in what was obtained using the hedge ratio\\n    /// @notice Values of the collateral ratio where mint transaction fees will change for users\\n    /// It should be ranked in ascending order\\n    uint256[] public xBonusMalusMint;\\n    /// @notice Values of the bonus/malus on the mint fees at the points of collateral ratio in the array above\\n    /// The evolution of the fees when collateral ratio is between two threshold values is linear\\n    uint64[] public yBonusMalusMint;\\n    /// @notice Values of the collateral ratio where burn transaction fees will change\\n    uint256[] public xBonusMalusBurn;\\n    /// @notice Values of the bonus/malus on the burn fees at the points of collateral ratio in the array above\\n    uint64[] public yBonusMalusBurn;\\n\\n    /// @notice Values of the collateral ratio where the slippage factor for SLPs exiting will evolve\\n    uint256[] public xSlippage;\\n    /// @notice Slippage factor at the values of collateral ratio above\\n    uint64[] public ySlippage;\\n    /// @notice Values of the collateral ratio where the slippage fee, that is the portion of the fees\\n    /// that does not come to SLPs although changes\\n    uint256[] public xSlippageFee;\\n    /// @notice Slippage fee value at the values of collateral ratio above\\n    uint64[] public ySlippageFee;\\n\\n    /// @notice Bonus - Malus HA deposit Fee, means that if the `fee > BASE_PARAMS` then HAs incur a malus and\\n    /// will have larger fees, while `fee < BASE_PARAMS` they incur a smaller fee than what they would have if\\n    /// fees just consisted in what was obtained using hedge ratio\\n    uint64 public haFeeDeposit;\\n    /// @notice Bonus - Malus HA withdraw Fee\\n    uint64 public haFeeWithdraw;\\n}\\n\",\"keccak256\":\"0xbf16abf99a479f3c155bb70813cc39577928f3f8fce90dbc3ecf645141b62390\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb2c30a33c8210d99b5d3eda0c391fde5a91c122361795c65cffc9e0fee6b982e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7afc0ffbbe114c38cc447805e375fe75b3b6a4f947a5b2737225db03825372bf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdff1e21452e346fd841752ea50fb6bc6fd6c502eb27569d3ebb92ee667f3a29d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x55d52057f3777741ba3389f6e482e0d57e92a3a055a3b26b743d2a35c77124c1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0x522874693d1bc7322cd505c644904cf34bf4a9edb8a7f36e8a981cbff1b02085\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISanToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2990e0418bb60d20bde72b7d2ba4dc5bdda028df4301df2a2fe065842393d49\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\",\"keccak256\":\"0xd3c6c2eacc6ae145102609fd930c3f1a1bfe69b119ae820e35dbf28d2c9cf9fe\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200253538038062002535833981016040819052620000349162000249565b806001600160a01b0316636ac5dc466040518163ffffffff1660e01b815260040160206040518083038186803b1580156200006e57600080fd5b505afa15801562000083573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a9919062000249565b600080546001600160a01b0319166001600160a01b0392909216919091179055620000e4600080516020620025158339815191528262000141565b620000ff600080516020620025158339815191528062000151565b6200013a7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416000805160206200251583398151915262000151565b5062000289565b6200014d8282620001a5565b5050565b6000828152600b6020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a46000918252600b602052604090912060010155565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff166200014d576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002053390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000602082840312156200025c57600080fd5b8151620002698162000270565b9392505050565b6001600160a01b03811681146200028657600080fd5b50565b61227c80620002996000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80634e6b13f1116100ee57806391d1485411610097578063c011c5b011610071578063c011c5b014610421578063ccde501e14610434578063d547741f14610447578063efce9edd1461045a57600080fd5b806391d14854146103b0578063a217fddf14610406578063aa4bef8d1461040e57600080fd5b80636ac5dc46116100c85780636ac5dc461461036a5780637597323d1461038a5780638d4045271461039d57600080fd5b80634e6b13f11461030a5780635d34082b1461031d5780635da3e6f51461036257600080fd5b806329ba62381161015b57806336568abe1161013557806336568abe146102b957806342746072146102cc57806343223da9146102ec5780634c405020146102f757600080fd5b806329ba6238146102675780632f2ff15d14610293578063329c3e3d146102a657600080fd5b8063232c28c41161018c578063232c28c41461020a578063248a9ca31461021d57806324ea54f41461024057600080fd5b80630c016dc0146101b35780631573087c146101ed57806320be420a14610200575b600080fd5b6101da7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56281565b6040519081526020015b60405180910390f35b6101da6101fb366004611d53565b61046e565b61020861048f565b005b610208610218366004611db1565b61058c565b6101da61022b366004611d53565b6000908152600b602052604090206001015490565b6101da7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b61027a610275366004611d53565b610607565b60405167ffffffffffffffff90911681526020016101e4565b6102086102a1366004611d6c565b610645565b61027a6102b4366004611d53565b610670565b6102086102c7366004611d6c565b610680565b600a5461027a9068010000000000000000900467ffffffffffffffff1681565b61027a633b9aca0081565b61027a610305366004611d53565b610712565b610208610318366004611c8c565b610722565b60015461033d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e4565b610208610a55565b60005461033d9073ffffffffffffffffffffffffffffffffffffffff1681565b6101da610398366004611d53565b610c46565b6102086103ab366004611bcb565b610c56565b6103f66103be366004611d6c565b6000918252600b6020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b60405190151581526020016101e4565b6101da600081565b6101da61041c366004611d53565b610e67565b61027a61042f366004611d53565b610e77565b6101da610442366004611d53565b610e87565b610208610455366004611d6c565b610e97565b600a5461027a9067ffffffffffffffff1681565b6004818154811061047e57600080fd5b600091825260209091200154905081565b600a546040805167ffffffffffffffff80841682526801000000000000000090930490921660208301527f8c2ad681201eaf10e67f2557b964de22af47dca1eb2fb61416379905ade5e0c1910160405180910390a1600154600a546040517fc628a6f700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015268010000000000000000909204909116602482015273ffffffffffffffffffffffffffffffffffffffff9091169063c628a6f790604401600060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b50505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416105b78133610ebd565b50600a805467ffffffffffffffff92831668010000000000000000027fffffffffffffffffffffffffffffffff000000000000000000000000000000009091169290931691909117919091179055565b6007818154811061061757600080fd5b9060005260206000209060049182820401919006600802915054906101000a900467ffffffffffffffff1681565b6000828152600b60205260409020600101546106618133610ebd565b61066b8383610f8f565b505050565b6003818154811061061757600080fd5b73ffffffffffffffffffffffffffffffffffffffff81163314610704576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b61070e8282611083565b5050565b6009818154811061061757600080fd5b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161074d8133610ebd565b8251845114801561075f575060008351115b6107c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f350000000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b60005b600184516107d691906120df565b811161089957801561088757846107ee6001836120df565b815181106107fe576107fe6121e8565b6020026020010151858281518110610818576108186121e8565b602002602001015111610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f370000000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b8061089181612180565b9150506107c8565b508160ff166001141561090e5783516108b99060029060208701906119ee565b5082516108cd906003906020860190611a39565b507f282808efb3e9ee96e0e38e46472797400e1adcf286e677897d7b566b279d2fc060026003604051610901929190611e5c565b60405180910390a1610586565b8160ff166002141561097557835161092d9060049060208701906119ee565b508251610941906005906020860190611a39565b507fac73cc8727e7a285f6f27260964016bb8a3e79bc7f1eed15994d486d161f952260046005604051610901929190611e5c565b8160ff16600314156109e45783516109949060069060208701906119ee565b5082516109a8906007906020860190611a39565b506109b161113e565b7f4baeeda8a3b1ec443944dc906aee519e7239a4fea7e774772af5bb3c86b48b8460066007604051610901929190611e5c565b83516109f79060089060208701906119ee565b508251610a0b906009906020860190611a39565b50610a1461113e565b7fbcccb929773c04c1dc7062d7adea041d6b0bcdbb2d7743c1a655e018844dac3560086009604051610a47929190611e5c565b60405180910390a150505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd377c536040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ac057600080fd5b505af1158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af89190611d98565b90506000610b098260026003611319565b90506000610b1a8360046005611319565b90506000610b2b8460066007611319565b90506000610b3c8560086009611319565b6040805187815267ffffffffffffffff87811660208301528681168284015285811660608301528316608082015290519192507fab79e7364d434b5fbbc74047c5f889087f2502936ec4d0d3df245a0cae08f5aa919081900360a00190a16000546040517f91a9ca4800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8087166004830152808616602483015280851660448301528316606482015273ffffffffffffffffffffffffffffffffffffffff909116906391a9ca4890608401600060405180830381600087803b158015610c2757600080fd5b505af1158015610c3b573d6000803e3d6000fd5b505050505050505050565b6002818154811061047e57600080fd5b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562610c818133610ebd565b600c54610100900460ff1680610c9a5750600c5460ff16155b610d26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106fb565b600c54610100900460ff16158015610d6557600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60005b8551811015610dc657610db47f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041878381518110610da757610da76121e8565b6020026020010151610f8f565b80610dbe81612180565b915050610d68565b50610df17f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504185610f8f565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790558015610e6057600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b6008818154811061047e57600080fd5b6005818154811061061757600080fd5b6006818154811061047e57600080fd5b6000828152600b6020526040902060010154610eb38133610ebd565b61066b8383611083565b6000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661070e57610f158173ffffffffffffffffffffffffffffffffffffffff1660146117ab565b610f208360206117ab565b604051602001610f31929190611ddb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526106fb91600401611f8b565b6000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661070e576000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556110253390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561070e576000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6006546001118015906111545750600854600111155b156113175760005b60095461116b906001906120df565b811161131557600060098281548110611186576111866121e8565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16111561130357633b9aca0067ffffffffffffffff16600982815481106111d6576111d66121e8565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff161115611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f333700000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b60006112926008838154811061127e5761127e6121e8565b906000526020600020015460066007611319565b67ffffffffffffffff1611611303576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f333800000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b8061130d81612180565b91505061115c565b505b565b8154600090839061132c906001906120df565b8154811061133c5761133c6121e8565b9060005260206000200154841061139e578254829061135d906001906120df565b8154811061136d5761136d6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1690506117a4565b826000815481106113b1576113b16121e8565b906000526020600020015484116113d5578160008154811061136d5761136d6121e8565b825460009081906113e8906001906120df565b905060005b60016113f984846120df565b111561145457600261140b84846120df565b6114159190612067565b61141f908461204f565b905086868281548110611434576114346121e8565b90600052602060002001541161144c578092506113ed565b8091506113ed565b6000858481548110611468576114686121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff168684815481106114ae576114ae6121e8565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16111561163f578684815481106114ee576114ee6121e8565b906000526020600020015487848154811061150b5761150b6121e8565b906000526020600020015461152091906120df565b878581548110611532576115326121e8565b90600052602060002001548961154891906120df565b87868154811061155a5761155a6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16888681548110611596576115966121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff166115ca91906120f6565b67ffffffffffffffff166115de91906120a2565b6115e89190612067565b8685815481106115fa576115fa6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16611638919061204f565b905061179e565b868481548110611651576116516121e8565b906000526020600020015487848154811061166e5761166e6121e8565b906000526020600020015461168391906120df565b878581548110611695576116956121e8565b9060005260206000200154896116ab91906120df565b8785815481106116bd576116bd6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff168887815481106116f9576116f96121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1661172d91906120f6565b67ffffffffffffffff1661174191906120a2565b61174b9190612067565b86858154811061175d5761175d6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1661179b91906120df565b90505b93505050505b9392505050565b606060006117ba8360026120a2565b6117c590600261204f565b67ffffffffffffffff8111156117dd576117dd612217565b6040519080825280601f01601f191660200182016040528015611807576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061183e5761183e6121e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106118a1576118a16121e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006118dd8460026120a2565b6118e890600161204f565b90505b6001811115611985577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611929576119296121e8565b1a60f81b82828151811061193f5761193f6121e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361197e8161214b565b90506118eb565b5083156117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106fb565b828054828255906000526020600020908101928215611a29579160200282015b82811115611a29578251825591602001919060010190611a0e565b50611a35929150611aeb565b5090565b82805482825590600052602060002090600301600490048101928215611a295791602002820160005b83821115611aae57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611a62565b8015611ae25782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302611aae565b5050611a359291505b5b80821115611a355760008155600101611aec565b803573ffffffffffffffffffffffffffffffffffffffff81168114611b2457600080fd5b919050565b600082601f830112611b3a57600080fd5b81356020611b4f611b4a8361202b565b611fdc565b80838252828201915082860187848660051b8901011115611b6f57600080fd5b60005b85811015611b9557611b8382611ba2565b84529284019290840190600101611b72565b5090979650505050505050565b803567ffffffffffffffff81168114611b2457600080fd5b803560ff81168114611b2457600080fd5b600080600060608486031215611be057600080fd5b833567ffffffffffffffff811115611bf757600080fd5b8401601f81018613611c0857600080fd5b80356020611c18611b4a8361202b565b8083825282820191508285018a848660051b8801011115611c3857600080fd5b600095505b84861015611c6257611c4e81611b00565b835260019590950194918301918301611c3d565b509650611c729050878201611b00565b9450505050611c8360408501611b00565b90509250925092565b600080600060608486031215611ca157600080fd5b833567ffffffffffffffff80821115611cb957600080fd5b818601915086601f830112611ccd57600080fd5b81356020611cdd611b4a8361202b565b8083825282820191508286018b848660051b8901011115611cfd57600080fd5b600096505b84871015611d20578035835260019690960195918301918301611d02565b5097505087013592505080821115611d3757600080fd5b50611d4486828701611b29565b925050611c8360408501611bba565b600060208284031215611d6557600080fd5b5035919050565b60008060408385031215611d7f57600080fd5b82359150611d8f60208401611b00565b90509250929050565b600060208284031215611daa57600080fd5b5051919050565b60008060408385031215611dc457600080fd5b611dcd83611ba2565b9150611d8f60208401611ba2565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611e1381601785016020880161211f565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611e5081602884016020880161211f565b01602801949350505050565b600060408083018184528086548083526060925082860191508760005260208060002060005b83811015611e9e57815485529382019360019182019101611e82565b505086830381880152875480845260008981526020808220950193505b81600382011015611f0757845467ffffffffffffffff808216865281891c811685870152608082811c9091168987015260c09190911c8786015260019095019490930192600401611ebb565b8454955081811015611f285767ffffffffffffffff86168452928201926001015b81811015611f475785871c67ffffffffffffffff168452928201926001015b81811015611f6857608086901c67ffffffffffffffff168452928201926001015b81811015611f7c5760c086901c8452928201925b50919998505050505050505050565b6020815260008251806020840152611faa81604085016020870161211f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561202357612023612217565b604052919050565b600067ffffffffffffffff82111561204557612045612217565b5060051b60200190565b60008219821115612062576120626121b9565b500190565b60008261209d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120da576120da6121b9565b500290565b6000828210156120f1576120f16121b9565b500390565b600067ffffffffffffffff83811690831681811015612117576121176121b9565b039392505050565b60005b8381101561213a578181015183820152602001612122565b838111156105865750506000910152565b60008161215a5761215a6121b9565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156121b2576121b26121b9565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122014918df964b0dfe7e1733f7ae1442a40873f331e7a2320378a21c646897109d564736f6c634300080700335916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c80634e6b13f1116100ee57806391d1485411610097578063c011c5b011610071578063c011c5b014610421578063ccde501e14610434578063d547741f14610447578063efce9edd1461045a57600080fd5b806391d14854146103b0578063a217fddf14610406578063aa4bef8d1461040e57600080fd5b80636ac5dc46116100c85780636ac5dc461461036a5780637597323d1461038a5780638d4045271461039d57600080fd5b80634e6b13f11461030a5780635d34082b1461031d5780635da3e6f51461036257600080fd5b806329ba62381161015b57806336568abe1161013557806336568abe146102b957806342746072146102cc57806343223da9146102ec5780634c405020146102f757600080fd5b806329ba6238146102675780632f2ff15d14610293578063329c3e3d146102a657600080fd5b8063232c28c41161018c578063232c28c41461020a578063248a9ca31461021d57806324ea54f41461024057600080fd5b80630c016dc0146101b35780631573087c146101ed57806320be420a14610200575b600080fd5b6101da7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe56281565b6040519081526020015b60405180910390f35b6101da6101fb366004611d53565b61046e565b61020861048f565b005b610208610218366004611db1565b61058c565b6101da61022b366004611d53565b6000908152600b602052604090206001015490565b6101da7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b61027a610275366004611d53565b610607565b60405167ffffffffffffffff90911681526020016101e4565b6102086102a1366004611d6c565b610645565b61027a6102b4366004611d53565b610670565b6102086102c7366004611d6c565b610680565b600a5461027a9068010000000000000000900467ffffffffffffffff1681565b61027a633b9aca0081565b61027a610305366004611d53565b610712565b610208610318366004611c8c565b610722565b60015461033d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e4565b610208610a55565b60005461033d9073ffffffffffffffffffffffffffffffffffffffff1681565b6101da610398366004611d53565b610c46565b6102086103ab366004611bcb565b610c56565b6103f66103be366004611d6c565b6000918252600b6020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b60405190151581526020016101e4565b6101da600081565b6101da61041c366004611d53565b610e67565b61027a61042f366004611d53565b610e77565b6101da610442366004611d53565b610e87565b610208610455366004611d6c565b610e97565b600a5461027a9067ffffffffffffffff1681565b6004818154811061047e57600080fd5b600091825260209091200154905081565b600a546040805167ffffffffffffffff80841682526801000000000000000090930490921660208301527f8c2ad681201eaf10e67f2557b964de22af47dca1eb2fb61416379905ade5e0c1910160405180910390a1600154600a546040517fc628a6f700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808316600483015268010000000000000000909204909116602482015273ffffffffffffffffffffffffffffffffffffffff9091169063c628a6f790604401600060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b50505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416105b78133610ebd565b50600a805467ffffffffffffffff92831668010000000000000000027fffffffffffffffffffffffffffffffff000000000000000000000000000000009091169290931691909117919091179055565b6007818154811061061757600080fd5b9060005260206000209060049182820401919006600802915054906101000a900467ffffffffffffffff1681565b6000828152600b60205260409020600101546106618133610ebd565b61066b8383610f8f565b505050565b6003818154811061061757600080fd5b73ffffffffffffffffffffffffffffffffffffffff81163314610704576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b61070e8282611083565b5050565b6009818154811061061757600080fd5b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161074d8133610ebd565b8251845114801561075f575060008351115b6107c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f350000000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b60005b600184516107d691906120df565b811161089957801561088757846107ee6001836120df565b815181106107fe576107fe6121e8565b6020026020010151858281518110610818576108186121e8565b602002602001015111610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f370000000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b8061089181612180565b9150506107c8565b508160ff166001141561090e5783516108b99060029060208701906119ee565b5082516108cd906003906020860190611a39565b507f282808efb3e9ee96e0e38e46472797400e1adcf286e677897d7b566b279d2fc060026003604051610901929190611e5c565b60405180910390a1610586565b8160ff166002141561097557835161092d9060049060208701906119ee565b508251610941906005906020860190611a39565b507fac73cc8727e7a285f6f27260964016bb8a3e79bc7f1eed15994d486d161f952260046005604051610901929190611e5c565b8160ff16600314156109e45783516109949060069060208701906119ee565b5082516109a8906007906020860190611a39565b506109b161113e565b7f4baeeda8a3b1ec443944dc906aee519e7239a4fea7e774772af5bb3c86b48b8460066007604051610901929190611e5c565b83516109f79060089060208701906119ee565b508251610a0b906009906020860190611a39565b50610a1461113e565b7fbcccb929773c04c1dc7062d7adea041d6b0bcdbb2d7743c1a655e018844dac3560086009604051610a47929190611e5c565b60405180910390a150505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd377c536040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ac057600080fd5b505af1158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af89190611d98565b90506000610b098260026003611319565b90506000610b1a8360046005611319565b90506000610b2b8460066007611319565b90506000610b3c8560086009611319565b6040805187815267ffffffffffffffff87811660208301528681168284015285811660608301528316608082015290519192507fab79e7364d434b5fbbc74047c5f889087f2502936ec4d0d3df245a0cae08f5aa919081900360a00190a16000546040517f91a9ca4800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8087166004830152808616602483015280851660448301528316606482015273ffffffffffffffffffffffffffffffffffffffff909116906391a9ca4890608401600060405180830381600087803b158015610c2757600080fd5b505af1158015610c3b573d6000803e3d6000fd5b505050505050505050565b6002818154811061047e57600080fd5b7f5916f72c85af4ac6f7e34636ecc97619c4b2085da099a5d28f3e58436cfbe562610c818133610ebd565b600c54610100900460ff1680610c9a5750600c5460ff16155b610d26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106fb565b600c54610100900460ff16158015610d6557600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60005b8551811015610dc657610db47f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041878381518110610da757610da76121e8565b6020026020010151610f8f565b80610dbe81612180565b915050610d68565b50610df17f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504185610f8f565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790558015610e6057600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b6008818154811061047e57600080fd5b6005818154811061061757600080fd5b6006818154811061047e57600080fd5b6000828152600b6020526040902060010154610eb38133610ebd565b61066b8383611083565b6000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661070e57610f158173ffffffffffffffffffffffffffffffffffffffff1660146117ab565b610f208360206117ab565b604051602001610f31929190611ddb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526106fb91600401611f8b565b6000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661070e576000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556110253390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561070e576000828152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6006546001118015906111545750600854600111155b156113175760005b60095461116b906001906120df565b811161131557600060098281548110611186576111866121e8565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16111561130357633b9aca0067ffffffffffffffff16600982815481106111d6576111d66121e8565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff161115611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f333700000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b60006112926008838154811061127e5761127e6121e8565b906000526020600020015460066007611319565b67ffffffffffffffff1611611303576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f333800000000000000000000000000000000000000000000000000000000000060448201526064016106fb565b8061130d81612180565b91505061115c565b505b565b8154600090839061132c906001906120df565b8154811061133c5761133c6121e8565b9060005260206000200154841061139e578254829061135d906001906120df565b8154811061136d5761136d6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1690506117a4565b826000815481106113b1576113b16121e8565b906000526020600020015484116113d5578160008154811061136d5761136d6121e8565b825460009081906113e8906001906120df565b905060005b60016113f984846120df565b111561145457600261140b84846120df565b6114159190612067565b61141f908461204f565b905086868281548110611434576114346121e8565b90600052602060002001541161144c578092506113ed565b8091506113ed565b6000858481548110611468576114686121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff168684815481106114ae576114ae6121e8565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16111561163f578684815481106114ee576114ee6121e8565b906000526020600020015487848154811061150b5761150b6121e8565b906000526020600020015461152091906120df565b878581548110611532576115326121e8565b90600052602060002001548961154891906120df565b87868154811061155a5761155a6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16888681548110611596576115966121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff166115ca91906120f6565b67ffffffffffffffff166115de91906120a2565b6115e89190612067565b8685815481106115fa576115fa6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16611638919061204f565b905061179e565b868481548110611651576116516121e8565b906000526020600020015487848154811061166e5761166e6121e8565b906000526020600020015461168391906120df565b878581548110611695576116956121e8565b9060005260206000200154896116ab91906120df565b8785815481106116bd576116bd6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff168887815481106116f9576116f96121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1661172d91906120f6565b67ffffffffffffffff1661174191906120a2565b61174b9190612067565b86858154811061175d5761175d6121e8565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1661179b91906120df565b90505b93505050505b9392505050565b606060006117ba8360026120a2565b6117c590600261204f565b67ffffffffffffffff8111156117dd576117dd612217565b6040519080825280601f01601f191660200182016040528015611807576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061183e5761183e6121e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106118a1576118a16121e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006118dd8460026120a2565b6118e890600161204f565b90505b6001811115611985577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611929576119296121e8565b1a60f81b82828151811061193f5761193f6121e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361197e8161214b565b90506118eb565b5083156117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106fb565b828054828255906000526020600020908101928215611a29579160200282015b82811115611a29578251825591602001919060010190611a0e565b50611a35929150611aeb565b5090565b82805482825590600052602060002090600301600490048101928215611a295791602002820160005b83821115611aae57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611a62565b8015611ae25782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302611aae565b5050611a359291505b5b80821115611a355760008155600101611aec565b803573ffffffffffffffffffffffffffffffffffffffff81168114611b2457600080fd5b919050565b600082601f830112611b3a57600080fd5b81356020611b4f611b4a8361202b565b611fdc565b80838252828201915082860187848660051b8901011115611b6f57600080fd5b60005b85811015611b9557611b8382611ba2565b84529284019290840190600101611b72565b5090979650505050505050565b803567ffffffffffffffff81168114611b2457600080fd5b803560ff81168114611b2457600080fd5b600080600060608486031215611be057600080fd5b833567ffffffffffffffff811115611bf757600080fd5b8401601f81018613611c0857600080fd5b80356020611c18611b4a8361202b565b8083825282820191508285018a848660051b8801011115611c3857600080fd5b600095505b84861015611c6257611c4e81611b00565b835260019590950194918301918301611c3d565b509650611c729050878201611b00565b9450505050611c8360408501611b00565b90509250925092565b600080600060608486031215611ca157600080fd5b833567ffffffffffffffff80821115611cb957600080fd5b818601915086601f830112611ccd57600080fd5b81356020611cdd611b4a8361202b565b8083825282820191508286018b848660051b8901011115611cfd57600080fd5b600096505b84871015611d20578035835260019690960195918301918301611d02565b5097505087013592505080821115611d3757600080fd5b50611d4486828701611b29565b925050611c8360408501611bba565b600060208284031215611d6557600080fd5b5035919050565b60008060408385031215611d7f57600080fd5b82359150611d8f60208401611b00565b90509250929050565b600060208284031215611daa57600080fd5b5051919050565b60008060408385031215611dc457600080fd5b611dcd83611ba2565b9150611d8f60208401611ba2565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611e1381601785016020880161211f565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611e5081602884016020880161211f565b01602801949350505050565b600060408083018184528086548083526060925082860191508760005260208060002060005b83811015611e9e57815485529382019360019182019101611e82565b505086830381880152875480845260008981526020808220950193505b81600382011015611f0757845467ffffffffffffffff808216865281891c811685870152608082811c9091168987015260c09190911c8786015260019095019490930192600401611ebb565b8454955081811015611f285767ffffffffffffffff86168452928201926001015b81811015611f475785871c67ffffffffffffffff168452928201926001015b81811015611f6857608086901c67ffffffffffffffff168452928201926001015b81811015611f7c5760c086901c8452928201925b50919998505050505050505050565b6020815260008251806020840152611faa81604085016020870161211f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561202357612023612217565b604052919050565b600067ffffffffffffffff82111561204557612045612217565b5060051b60200190565b60008219821115612062576120626121b9565b500190565b60008261209d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120da576120da6121b9565b500290565b6000828210156120f1576120f16121b9565b500390565b600067ffffffffffffffff83811690831681811015612117576121176121b9565b039392505050565b60005b8381101561213a578181015183820152602001612122565b838111156105865750506000910152565b60008161215a5761215a6121b9565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156121b2576121b26121b9565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122014918df964b0dfe7e1733f7ae1442a40873f331e7a2320378a21c646897109d564736f6c63430008070033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This contract interacts with fee parameters for a given stablecoin/collateral pair`FeeManager` contains all the functions that keepers can call to update parameters in the `StableMaster` and `PerpetualManager` contractsThese parameters need to be updated by keepers because they depend on variables, like the collateral ratio, that are too expensive to compute each time transactions that would need it occur",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "The `_poolManager` address is used to grant the correct role. It does not need to be stored by the contractThere is no need to do a zero address check on the `_poolManager` as if the zero address is passed the function will revert when trying to fetch the `StableMaster`",
        "params": { "_poolManager": "`PoolManager` contract handling the collateral" }
      },
      "deployCollateral(address[],address,address)": {
        "details": "`GUARDIAN_ROLE` can then directly be granted or revoked by the corresponding `PoolManager` As `POOLMANAGER_ROLE` is admin of `GUARDIAN_ROLE`, it corresponds to the intended behaviour of roles",
        "params": {
          "_perpetualManager": "`PerpetualManager` contract handling the perpetuals of the pool",
          "governorList": "List of the governor addresses of the protocol",
          "guardian": "Guardian address of the protocol"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setFees(uint256[],uint64[],uint8)": {
        "details": "For `typeChange = 1`, `bonusMalusMint` fees are updatedFor `typeChange = 2`, `bonusMalusBurn` fees are updatedFor `typeChange = 3`, `slippage` values are updatedFor other values of `typeChange`, `slippageFee` values are updated",
        "params": {
          "typeChange": "Type of parameter to change",
          "xArray": "New collateral ratio thresholds (in ascending order)",
          "yArray": "New fees or values for the parameters at thresholds"
        }
      },
      "setHAFees(uint64,uint64)": {
        "params": {
          "_haFeeDeposit": "New parameter to modify deposit fee for HAs",
          "_haFeeWithdraw": "New parameter to modify withdraw fee for HAs"
        }
      },
      "updateHA()": {
        "details": "This function updates:     - The part of the fee taken from HAs when they open a perpetual or add collateral in it. This allows        governance to add penalties or bonuses in some occasions to HAs opening their perpetuals     - The part of the fee taken from the HA when they withdraw collateral from a perpetual. This allows       governance to add penalty or bonuses in some occasions to HAs closing their perpetualsPenalties or bonuses for HAs should almost never be usedIn the `PerpetualManager` contract, these parameters are multiplied to the fee amount depending on the HA hedge ratio to get the exact fee amount for HAsFor the moment, these parameters do not depend on the collateral ratio, and they are just an extra element that governance can play on to correct fees taken for HAs"
      },
      "updateUsersSLP()": {
        "details": "This function updates: \t-\t`bonusMalusMint`: part of the fee induced by a user minting depending on the collateral ratio                   In normal times, no fees are taken for that, and so this fee should be equal to `BASE_PARAMS`\t\t-\t`bonusMalusBurn`: part of the fee induced by a user burning depending on the collateral ratio\t\t-\tSlippage: what's given to SLPs compared with their claim when they exit\t\t-\tSlippageFee: that is the portion of fees that is put aside because the protocol         is not well collateralized`bonusMalusMint` and `bonusMalusBurn` allow governance to add penalties or bonuses for users minting and burning in some situations of collateral ratio. These parameters are multiplied to the fee amount depending on the hedge ratio by Hedging Agents to get the exact fee induced to the users"
      }
    },
    "title": "FeeManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "GUARDIAN_ROLE()": { "notice": "Role for guardians and governors" },
      "POOLMANAGER_ROLE()": { "notice": "Role for `PoolManager` only" },
      "constructor": { "notice": "Deploys the `FeeManager` contract for a pair stablecoin/collateral" },
      "deployCollateral(address[],address,address)": {
        "notice": "Initializes the governor and guardian roles of the contract as well as the reference to the `perpetualManager` contract"
      },
      "haFeeDeposit()": {
        "notice": "Bonus - Malus HA deposit Fee, means that if the `fee > BASE_PARAMS` then HAs incur a malus and will have larger fees, while `fee < BASE_PARAMS` they incur a smaller fee than what they would have if fees just consisted in what was obtained using hedge ratio"
      },
      "haFeeWithdraw()": { "notice": "Bonus - Malus HA withdraw Fee" },
      "perpetualManager()": {
        "notice": "Address of the `PerpetualManager` corresponding to this contract This reference cannot be modified"
      },
      "setFees(uint256[],uint64[],uint8)": {
        "notice": "Sets the x (i.e. thresholds of collateral ratio) array / y (i.e. value of fees at threshold)-array for users minting, burning, for SLPs withdrawal slippage or for the slippage fee when updating the exchange rate between sanTokens and collateral"
      },
      "setHAFees(uint64,uint64)": {
        "notice": "Sets the extra fees that can be used when HAs deposit or withdraw collateral from the protocol"
      },
      "stableMaster()": {
        "notice": "Address of the `StableMaster` contract corresponding to this contract This reference cannot be modified"
      },
      "updateHA()": {
        "notice": "Updates HA fees associated to the pair stablecoin/collateral in the `PerpetualManager` contract"
      },
      "updateUsersSLP()": {
        "notice": "Updates the SLP and Users fees associated to the pair stablecoin/collateral in the `StableMaster` contract"
      },
      "xBonusMalusBurn(uint256)": {
        "notice": "Values of the collateral ratio where burn transaction fees will change"
      },
      "xBonusMalusMint(uint256)": {
        "notice": "Bonus - Malus Fee, means that if the `fee > BASE_PARAMS` then agents incur a malus and will have larger fees, while `fee < BASE_PARAMS` they incur a smaller fee than what they would have if fees just consisted in what was obtained using the hedge ratioValues of the collateral ratio where mint transaction fees will change for users It should be ranked in ascending order"
      },
      "xSlippage(uint256)": {
        "notice": "Values of the collateral ratio where the slippage factor for SLPs exiting will evolve"
      },
      "xSlippageFee(uint256)": {
        "notice": "Values of the collateral ratio where the slippage fee, that is the portion of the fees that does not come to SLPs although changes"
      },
      "yBonusMalusBurn(uint256)": {
        "notice": "Values of the bonus/malus on the burn fees at the points of collateral ratio in the array above"
      },
      "yBonusMalusMint(uint256)": {
        "notice": "Values of the bonus/malus on the mint fees at the points of collateral ratio in the array above The evolution of the fees when collateral ratio is between two threshold values is linear"
      },
      "ySlippage(uint256)": { "notice": "Slippage factor at the values of collateral ratio above" },
      "ySlippageFee(uint256)": { "notice": "Slippage fee value at the values of collateral ratio above" }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18041,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "stableMaster",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IStableMaster)23188"
      },
      {
        "astId": 18045,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "perpetualManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPerpetualManager)22705"
      },
      {
        "astId": 18049,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "xBonusMalusMint",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 18053,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "yBonusMalusMint",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 18057,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "xBonusMalusBurn",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 18061,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "yBonusMalusBurn",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 18065,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "xSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 18069,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "ySlippage",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 18073,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "xSlippageFee",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 18077,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "ySlippageFee",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 18080,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "haFeeDeposit",
        "offset": 0,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 18083,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "haFeeWithdraw",
        "offset": 8,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 16345,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)16340_storage)"
      },
      {
        "astId": 3228,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3231,
        "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_contract(IPerpetualManager)22705": {
        "encoding": "inplace",
        "label": "contract IPerpetualManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStableMaster)23188": {
        "encoding": "inplace",
        "label": "contract IStableMaster",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)16340_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)16340_storage"
      },
      "t_struct(RoleData)16340_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16337,
            "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16339,
            "contract": "contracts/feeManager/FeeManager.sol:FeeManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" },
      "t_uint64": { "encoding": "inplace", "label": "uint64", "numberOfBytes": "8" }
    }
  }
}
