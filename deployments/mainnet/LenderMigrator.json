{
  "address": "0xd2a211Acea98c799A67aC47c274ebDF7deE24396",
  "abi": [
    {
      "inputs": [{ "internalType": "address", "name": "logic_", "type": "address" }],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "owner", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "spender", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "address", "name": "", "type": "address" },
        { "indexed": false, "internalType": "address", "name": "", "type": "address" }
      ],
      "name": "Migrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "from", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "owner", "type": "address" },
        { "internalType": "address", "name": "spender", "type": "address" }
      ],
      "name": "allowance",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "spender", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "approve",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
      "name": "balanceOf",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "spender", "type": "address" },
        { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }
      ],
      "name": "decreaseAllowance",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "spender", "type": "address" },
        { "internalType": "uint256", "name": "addedValue", "type": "uint256" }
      ],
      "name": "increaseAllowance",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    { "inputs": [], "name": "migrate", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [],
      "name": "name",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "operator", "type": "address" },
        { "internalType": "address", "name": "", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" },
        { "internalType": "bytes", "name": "", "type": "bytes" }
      ],
      "name": "onERC721Received",
      "outputs": [{ "internalType": "bytes4", "name": "", "type": "bytes4" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [{ "internalType": "contract IUniswapPool", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "owner_", "type": "address" }],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "recipient", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "transfer",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "sender", "type": "address" },
        { "internalType": "address", "name": "recipient", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "transferFrom",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x81e7beb1cd1b107cfa02c1eafd9502837ee54cc3bad39190ccc5ad8cc6eab12b",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xd2a211Acea98c799A67aC47c274ebDF7deE24396",
    "transactionIndex": 201,
    "gasUsed": "7934661",
    "logsBloom": "0x
    "blockHash": "0x1613b215d949a15372706f3645661475f3268c2fc2fd594a5b64e35c537c0b44",
    "transactionHash": "0x81e7beb1cd1b107cfa02c1eafd9502837ee54cc3bad39190ccc5ad8cc6eab12b",
    "logs": [
      {
        "transactionIndex": 201,
        "blockNumber": 14365021,
        "transactionHash": "0x81e7beb1cd1b107cfa02c1eafd9502837ee54cc3bad39190ccc5ad8cc6eab12b",
        "address": "0xd2a211Acea98c799A67aC47c274ebDF7deE24396",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2a211acea98c799a67ac47c274ebdf7dee24396"
        ],
        "data": "0x00000000000000000000000000000000000000000000003635c9adc5dea00000",
        "logIndex": 300,
        "blockHash": "0x1613b215d949a15372706f3645661475f3268c2fc2fd594a5b64e35c537c0b44"
      },
      {
        "transactionIndex": 201,
        "blockNumber": 14365021,
        "transactionHash": "0x81e7beb1cd1b107cfa02c1eafd9502837ee54cc3bad39190ccc5ad8cc6eab12b",
        "address": "0xd2a211Acea98c799A67aC47c274ebDF7deE24396",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d2a211acea98c799a67ac47c274ebdf7dee24396",
          "0x000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 301,
        "blockHash": "0x1613b215d949a15372706f3645661475f3268c2fc2fd594a5b64e35c537c0b44"
      },
      {
        "transactionIndex": 201,
        "blockNumber": 14365021,
        "transactionHash": "0x81e7beb1cd1b107cfa02c1eafd9502837ee54cc3bad39190ccc5ad8cc6eab12b",
        "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d2a211acea98c799a67ac47c274ebdf7dee24396",
          "0x000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 302,
        "blockHash": "0x1613b215d949a15372706f3645661475f3268c2fc2fd594a5b64e35c537c0b44"
      },
      {
        "transactionIndex": 201,
        "blockNumber": 14365021,
        "transactionHash": "0x81e7beb1cd1b107cfa02c1eafd9502837ee54cc3bad39190ccc5ad8cc6eab12b",
        "address": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
        "topics": [
          "0x783cca1c0412dd0d695e784568c96da2e9c22ff989357a2e8b1d9b2b4e6b7118",
          "0x000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888",
          "0x000000000000000000000000d2a211acea98c799a67ac47c274ebdf7dee24396",
          "0x0000000000000000000000000000000000000000000000000000000000000064"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c0a3f17128f461e5c2dca9e09ae7672fb8a9c9ed",
        "logIndex": 303,
        "blockHash": "0x1613b215d949a15372706f3645661475f3268c2fc2fd594a5b64e35c537c0b44"
      },
      {
        "transactionIndex": 201,
        "blockNumber": 14365021,
        "transactionHash": "0x81e7beb1cd1b107cfa02c1eafd9502837ee54cc3bad39190ccc5ad8cc6eab12b",
        "address": "0xc0a3f17128f461E5c2dcA9E09AE7672FB8A9c9ED",
        "topics": ["0x98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95"],
        "data": "0x00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 304,
        "blockHash": "0x1613b215d949a15372706f3645661475f3268c2fc2fd594a5b64e35c537c0b44"
      }
    ],
    "blockNumber": 14365021,
    "cumulativeGasUsed": "22238488",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x4ed4dd6fbB04B20fc9cfA2b56e3C8d305AE44fC8"],
  "numDeployments": 1,
  "solcInputHash": "49852441b120346a98e2cf914de9b17c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IUniswapPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"setOwner(address)\":{\"params\":{\"owner_\":\"Address of the new owner\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"LenderMigrator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setOwner(address)\":{\"notice\":\"Changes the minter address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LenderMigrator.sol\":\"LenderMigrator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/LenderMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./interfaces/ICore.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/Utils.sol\\\";\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\n/// @title LenderMigrator\\n/// @author Angle Core Team\\ncontract LenderMigrator is ERC20 {\\n    using SafeERC20 for IERC20;\\n    address public owner;\\n\\n    event Migrated(address, address);\\n\\n    ICore private _core = ICore(0x61ed74de9Ca5796cF2F8fD60D54160D47E30B7c3);\\n    address private constant _governor = 0xdC4e6DFe07EFCa50a197DF15D9200883eF4Eb1c8;\\n    address private constant _guardian = 0x0C2553e4B9dFA9f83b1A6D3EAB96c4bAaB42d430;\\n    address private constant _proxyAdmin = 0x1D941EF0D3Bba4ad67DBfBCeE5262F4CEE53A32b;\\n    IERC20 private constant _comp = IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\n    IComptroller private constant _comptroller = IComptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    IUniswapPositionManager private constant _uni = IUniswapPositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\\n    address private immutable _logic;\\n    IUniswapPool public immutable pool;\\n    uint24 private constant _poolFee = 100;\\n\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n    constructor(address logic_) ERC20(\\\"SV\\\", \\\"SV\\\") {\\n        _logic = logic_;\\n        owner = msg.sender;\\n        _mint(address(this), 1000 ether);\\n        _approve(address(this), address(_uni), type(uint256).max);\\n        _comp.approve(address(_uni), type(uint256).max);\\n\\n        require(msg.sender == owner, \\\"wrong caller\\\");\\n\\n        // Create Uni V3 Pool\\n        address token0;\\n        address token1;\\n        (token0, token1) = address(this) < address(_comp)\\n            ? (address(this), address(_comp))\\n            : (address(_comp), address(this));\\n\\n        pool = IUniswapPool(_uni.createAndInitializePoolIfNecessary(token0, token1, _poolFee, 2**96));\\n    }\\n\\n    /// @notice Changes the minter address\\n    /// @param owner_ Address of the new owner\\n    function setOwner(address owner_) external {\\n        require(msg.sender == owner, \\\"wrong caller\\\");\\n        require(owner_ != address(0), \\\"0 address\\\");\\n        owner = owner_;\\n    }\\n\\n    function migrate() external {\\n        require(msg.sender == owner, \\\"wrong caller\\\");\\n\\n        address newLender;\\n        IGenericLender lender = IGenericLender(0xC011882d0f7672D8942e7fE2248C174eeD640c8f);\\n        address cToken = IGenericCompound(address(lender)).cToken();\\n        IStrategy strategy = IStrategy(IGenericCompound(address(lender)).strategy());\\n\\n        IcToken(cToken).exchangeRateCurrent();\\n\\n        // Deploy New GenericCompound First\\n        {\\n            address[] memory governorList = new address[](1);\\n            governorList[0] = address(_governor);\\n\\n            address[] memory keeperList = new address[](2);\\n            keeperList[0] = 0xcC617C6f9725eACC993ac626C7efC6B96476916E;\\n            keeperList[1] = 0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185;\\n\\n            newLender = address(\\n                new TransparentUpgradeableProxy(\\n                    _logic,\\n                    _proxyAdmin,\\n                    abi.encodeWithSignature(\\n                        \\\"initialize(address,string,address,address[],address[],address)\\\",\\n                        address(strategy),\\n                        \\\"Compound Lender\\\",\\n                        cToken,\\n                        governorList,\\n                        keeperList,\\n                        _guardian\\n                    )\\n                )\\n            );\\n\\n            strategy.addLender(address(newLender));\\n        }\\n\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        // Withdraw all COMP from old contract\\n        address token0;\\n        address token1;\\n        (token0, token1) = address(this) < address(_comp)\\n            ? (address(this), address(_comp))\\n            : (address(_comp), address(this));\\n\\n        (, int24 tick, , , , , ) = pool.slot0();\\n        int24 tickLower = token0 == address(_comp) ? int24(-887160) : int24(tick + 1);\\n        int24 tickUpper = token0 == address(_comp) ? int24(tick - 1) : int24(887160);\\n\\n        (tokenId, liquidity, , ) = _uni.mint(\\n            MintParams({\\n                token0: token0,\\n                token1: token1,\\n                fee: _poolFee,\\n                tickLower: tickLower,\\n                tickUpper: tickUpper,\\n                amount0Desired: 1 ether,\\n                amount1Desired: 1 ether,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                recipient: address(this),\\n                deadline: block.timestamp\\n            })\\n        );\\n\\n        {\\n            address[] memory holders = new address[](1);\\n            address[] memory cTokens = new address[](1);\\n            holders[0] = address(lender);\\n            cTokens[0] = IGenericCompound(address(lender)).cToken();\\n            _comptroller.claimComp(holders, cTokens, true, true);\\n        }\\n\\n        IGenericCompound(address(lender)).setPath(abi.encodePacked(address(_comp), uint24(_poolFee), address(this)));\\n\\n        // Will eventually swap the comps\\n        // Withdraw all funds\\n        strategy.safeRemoveLender(address(lender));\\n\\n        _burn(address(lender), balanceOf(address(lender)));\\n        _comp.transfer(newLender, _comp.balanceOf(address(this))); // Send directly to multisg\\n\\n        // Withdraw all COMP from old contract\\n        strategy.harvest();\\n\\n        // Now DAI\\n        lender = IGenericLender(0xf89fa5D0f1A85c2bAda78dBCc1d6CDC09a7c8e12);\\n        cToken = IGenericCompound(address(lender)).cToken();\\n        strategy = IStrategy(IGenericCompound(address(lender)).strategy());\\n\\n        IcToken(cToken).exchangeRateCurrent();\\n\\n        // Deploy New GenericCompound First\\n        {\\n            address[] memory governorList = new address[](1);\\n            governorList[0] = address(_governor);\\n\\n            address[] memory keeperList = new address[](2);\\n            keeperList[0] = 0xcC617C6f9725eACC993ac626C7efC6B96476916E;\\n            keeperList[1] = 0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185;\\n\\n            address newLenderDAI = address(\\n                new TransparentUpgradeableProxy(\\n                    _logic,\\n                    _proxyAdmin,\\n                    abi.encodeWithSignature(\\n                        \\\"initialize(address,string,address,address[],address[],address)\\\",\\n                        address(strategy),\\n                        \\\"Compound Lender\\\",\\n                        cToken,\\n                        governorList,\\n                        keeperList,\\n                        _guardian\\n                    )\\n                )\\n            );\\n            emit Migrated(newLender, newLenderDAI);\\n            newLender = newLenderDAI;\\n\\n            strategy.addLender(address(newLender));\\n        }\\n\\n        {\\n            address[] memory holders = new address[](1);\\n            address[] memory cTokens = new address[](1);\\n            holders[0] = address(lender);\\n            cTokens[0] = IGenericCompound(address(lender)).cToken();\\n            _comptroller.claimComp(holders, cTokens, true, true);\\n        }\\n\\n        IGenericCompound(address(lender)).setPath(abi.encodePacked(address(_comp), uint24(_poolFee), address(this)));\\n\\n        // Will eventually swap the comps\\n        // Withdraw all funds\\n        strategy.safeRemoveLender(address(lender));\\n\\n        (, , , , , , , liquidity, , , , ) = _uni.positions(tokenId);\\n        _uni.decreaseLiquidity(\\n            DecreaseLiquidityParams({\\n                tokenId: tokenId,\\n                liquidity: liquidity,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                deadline: block.timestamp\\n            })\\n        );\\n\\n        _uni.collect(CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max));\\n        _uni.burn(tokenId);\\n\\n        _burn(address(lender), balanceOf(address(lender)));\\n        _comp.transfer(newLender, _comp.balanceOf(address(this))); // Send directly to multisg\\n\\n        // Withdraw all COMP from old contract\\n        strategy.harvest();\\n\\n        _core.removeGovernor(address(this));\\n    }\\n\\n    // ERC721 Management\\n    function onERC721Received(\\n        address operator,\\n        address,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0d5e454334b1dd17e938db02fcfb7f9def072b51a9cd59ee01b4b6531800b88a\",\"license\":\"GPL-3.0\"},\"contracts/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin. It is fully forked from OpenZeppelin\\n * `TransparentUpgradeableProxy`\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x541c923cc8e95e2f62a63280449729ed9ed7b0c33e9191c5ee25ee27df4a3d52\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x9d7026a8687410f69d53bbde5f6c7786d64721fb0949ed3ad92953f7163a693a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title ICore\\n/// @author Angle Core Team\\n/// @dev Interface for the functions of the `Core` contract\\ninterface ICore {\\n    function revokeStableMaster(address stableMaster) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian) external;\\n\\n    function revokeGuardian() external;\\n\\n    function governorList() external view returns (address[] memory);\\n\\n    function stablecoinList() external view returns (address[] memory);\\n\\n    function guardian() external view returns (address);\\n}\\n\",\"keccak256\":\"0x176a22323a1a922d63ae36f1dbe3c7f609acee109c0a594fa9290b31eb41ac00\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGenericLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IGenericLender\\n/// @author Yearn with slight modifications from Angle Core Team\\n/// @dev Interface for the `GenericLender` contract, the base interface for contracts interacting\\n/// with lending and yield farming platforms\\ninterface IGenericLender is IAccessControl {\\n    function lenderName() external view returns (string memory);\\n\\n    function nav() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function apr() external view returns (uint256);\\n\\n    function weightedApr() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    function emergencyWithdraw(uint256 amount) external;\\n\\n    function deposit() external;\\n\\n    function withdrawAll() external returns (bool);\\n\\n    function hasAssets() external view returns (bool);\\n\\n    function aprAfterDeposit(uint256 amount) external view returns (uint256);\\n\\n    function sweep(address _token, address to) external;\\n}\\n\",\"keccak256\":\"0xbf77aef426635f13466efce59404d4d9999d4ff8926fb6b8dcea08dccd3900f9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addLender(address newLender) external;\\n\\n    function safeRemoveLender(address lender) external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x02e7702f0afde1f473e70eb2219536b80d3124a7428f66dbb529940b59fe7a75\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IGenericLender.sol\\\";\\n\\ninterface IcToken {\\n    function exchangeRateCurrent() external returns (uint256);\\n}\\n\\ninterface IGenericCompound is IGenericLender {\\n    function setPath(bytes memory _path) external;\\n\\n    function cToken() external view returns (address);\\n\\n    function want() external view returns (address);\\n}\\n\\ninterface IComptroller {\\n    function claimComp(\\n        address[] memory holders,\\n        address[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n}\\n\\nstruct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n}\\n\\nstruct DecreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n}\\n\\nstruct CollectParams {\\n    uint256 tokenId;\\n    address recipient;\\n    uint128 amount0Max;\\n    uint128 amount1Max;\\n}\\n\\ninterface IUniswapPositionManager {\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function collect(CollectParams calldata params) external returns (uint256 amount0, uint256 amount1);\\n}\\n\\ninterface IUniswapFactory {\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n}\\n\\ninterface IUniswapPool {\\n    function liquidity() external view returns (uint128 liquidity);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    function fee() external view returns (uint24 fee);\\n}\\n\",\"keccak256\":\"0x4f9bba653cc1556ef80485ec8ddf713a75feedf87737043869dd576521c134b8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c0604052600680546001600160a01b0319167361ed74de9ca5796cf2f8fd60d54160d47e30b7c31790553480156200003757600080fd5b5060405162003e6138038062003e618339810160408190526200005a91620005af565b60408051808201825260028082526129ab60f11b602080840182815285518087019096529285528401528151919291620000979160039162000509565b508051620000ad90600490602084019062000509565b5050506001600160a01b038116608052600580546001600160a01b03191633179055620000e430683635c9adc5dea00000620002fc565b620001073073c36442b4a4522e871399cd717abdd847ab11fe88600019620003e1565b60405163095ea7b360e01b815273c36442b4a4522e871399cd717abdd847ab11fe886004820152600019602482015273c00e94cb662c3520282e6f5717214004a7f268889063095ea7b3906044016020604051808303816000875af115801562000175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019b9190620005e1565b506005546001600160a01b03163314620001eb5760405162461bcd60e51b815260206004820152600c60248201526b3bb937b7339031b0b63632b960a11b60448201526064015b60405180910390fd5b60008073c00e94cb662c3520282e6f5717214004a7f268883010620002265773c00e94cb662c3520282e6f5717214004a7f26888306200023d565b3073c00e94cb662c3520282e6f5717214004a7f268885b6040516309f56ab160e11b81526001600160a01b038084166004830152821660248201526064604482018190526c0100000000000000000000000090820152919350915073c36442b4a4522e871399cd717abdd847ab11fe88906313ead562906084016020604051808303816000875af1158015620002c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e69190620005af565b6001600160a01b031660a0525062000669915050565b6001600160a01b038216620003545760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620001e2565b806002600082825462000368919062000605565b90915550506001600160a01b038216600090815260208190526040812080548392906200039790849062000605565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038316620004455760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401620001e2565b6001600160a01b038216620004a85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401620001e2565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82805462000517906200062c565b90600052602060002090601f0160209004810192826200053b576000855562000586565b82601f106200055657805160ff191683800117855562000586565b8280016001018555821562000586579182015b828111156200058657825182559160200191906001019062000569565b506200059492915062000598565b5090565b5b8082111562000594576000815560010162000599565b600060208284031215620005c257600080fd5b81516001600160a01b0381168114620005da57600080fd5b9392505050565b600060208284031215620005f457600080fd5b81518015158114620005da57600080fd5b600082198211156200062757634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200064157607f821691505b602082108114156200066357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a0516137c46200069d600039600081816101a401526109a901526000818161081901526111e401526137c46000f3fe60806040523480156200001157600080fd5b5060043610620000fa5760003560e01c806306fdde0314620000ff578063095ea7b3146200012157806313af40351462000149578063150b7a02146200016257806316f0115b146200019e57806318160ddd14620001d557806323b872dd14620001e857806324ea54f414620001ff578063313ce5671462000227578063395093511462000237578063580b7c2e146200024e57806370a0823114620002765780638da5cb5b146200028d5780638fd3ab8014620002a157806395d89b4114620002ab578063a457c2d714620002b5578063a9059cbb14620002cc578063dd62ed3e14620002e3575b600080fd5b620001096200031f565b60405162000118919062001fe4565b60405180910390f35b620001386200013236600462002019565b620003b9565b604051901515815260200162000118565b620001606200015a36600462002048565b620003d1565b005b620001846200017336600462002068565b630a85bd0160e11b95945050505050565b6040516001600160e01b0319909116815260200162000118565b620001c67f000000000000000000000000000000000000000000000000000000000000000081565b6040516200011891906200210f565b6002545b60405190815260200162000118565b62000138620001f936600462002123565b6200046d565b620001d97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6040516012815260200162000118565b620001386200024836600462002019565b6200051d565b620001d97f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b620001d96200028736600462002048565b6200055d565b600554620001c6906001600160a01b031681565b6200016062000578565b6200010962001a9d565b62000138620002c636600462002019565b62001aae565b62000138620002dd36600462002019565b62001b4b565b620001d9620002f436600462002176565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546200033090620021b4565b80601f01602080910402602001604051908101604052809291908181526020018280546200035e90620021b4565b8015620003af5780601f106200038357610100808354040283529160200191620003af565b820191906000526020600020905b8154815290600101906020018083116200039157829003601f168201915b5050505050905090565b6000620003c833848462001b5a565b50600192915050565b6005546001600160a01b03163314620004075760405162461bcd60e51b8152600401620003fe90620021f1565b60405180910390fd5b6001600160a01b0381166200044b5760405162461bcd60e51b815260206004820152600960248201526830206164647265737360b81b6044820152606401620003fe565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60006200047c84848462001c83565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015620005035760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401620003fe565b62000512853385840362001b5a565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091620003c8918590620005579086906200222d565b62001b5a565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b03163314620005a55760405162461bcd60e51b8152600401620003fe90620021f1565b60008073c011882d0f7672d8942e7fe2248c174eed640c8f90506000816001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200062691906200225a565b90506000826001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000669573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200068f91906200225a565b9050816001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015620006d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006f891906200227a565b506040805160018082528183019092526000916020808301908036833701905050905073dc4e6dfe07efca50a197df15d9200883ef4eb1c88160008151811062000746576200074662002294565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352600093919290918301908036833701905050905073cc617c6f9725eacc993ac626c7efc6b96476916e81600081518110620007ac57620007ac62002294565b60200260200101906001600160a01b031690816001600160a01b03168152505073fda462548ce04282f4b6d6619823a7c64fdc018581600181518110620007f757620007f762002294565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000731d941ef0d3bba4ad67dbfbcee5262f4cee53a32b84868585730c2553e4b9dfa9f83b1a6d3eab96c4baab42d4306040516024016200087c959493929190620022f0565b60408051601f198184030181529181526020820180516001600160e01b0316635a71fd0960e01b17905251620008b29062001f86565b620008c0939291906200236f565b604051809103906000f080158015620008dd573d6000803e3d6000fd5b506040516324c212cd60e21b81529096506001600160a01b038416906393084b34906200090f9089906004016200210f565b600060405180830381600087803b1580156200092a57600080fd5b505af11580156200093f573d6000803e3d6000fd5b5050505050506000806000806000805160206200374f8339815191526001600160a01b0316306001600160a01b0316106200098b576000805160206200374f833981519152306200099d565b306000805160206200374f8339815191525b809250819350505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801562000a06573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a2c9190620023dd565b505050505091505060006000805160206200374f8339815191526001600160a01b0316846001600160a01b03161462000a725762000a6c8260016200247b565b62000a78565b620d8977195b905060006001600160a01b0385166000805160206200374f8339815191521462000aa657620d897862000ab3565b62000ab3600184620024c8565b60408051610160810182526001600160a01b03888116825287166020820152606481830152600285810b606083015283900b6080820152670de0b6b3a764000060a0820181905260c0820152600060e0820181905261010082015230610120820152426101408201529051634418b22b60e11b815291925073c36442b4a4522e871399cd717abdd847ab11fe889163883164569162000b559160040162002516565b6080604051808303816000875af115801562000b75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9b9190620025ed565b5050604080516001808252818301909252929950909750600091906020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090508b8260008151811062000c005762000c0062002294565b60200260200101906001600160a01b031690816001600160a01b0316815250508b6001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c5f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8591906200225a565b8160008151811062000c9b5762000c9b62002294565b6001600160a01b03909216602092830291909101909101526040516334086fd360e11b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636810dfa69062000cf3908590859060019081906004016200262c565b600060405180830381600087803b15801562000d0e57600080fd5b505af115801562000d23573d6000803e3d6000fd5b505050505050896001600160a01b031663f381e07d6000805160206200374f83398151915260643060405160200162000d5f939291906200266e565b6040516020818303038152906040526040518263ffffffff1660e01b815260040162000d8c919062001fe4565b600060405180830381600087803b15801562000da757600080fd5b505af115801562000dbc573d6000803e3d6000fd5b5050604051638baf295760e01b81526001600160a01b038b169250638baf2957915062000dee908d906004016200210f565b600060405180830381600087803b15801562000e0957600080fd5b505af115801562000e1e573d6000803e3d6000fd5b5050505062000e388a62000e328c6200055d565b62001e4a565b6040516370a0823160e01b81526000805160206200374f8339815191529063a9059cbb908d9083906370a082319062000e769030906004016200210f565b602060405180830381865afa15801562000e94573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eba91906200227a565b6040518363ffffffff1660e01b815260040162000ed9929190620026a4565b6020604051808303816000875af115801562000ef9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1f9190620026bd565b50876001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000f5c57600080fd5b505af115801562000f71573d6000803e3d6000fd5b5050505073f89fa5d0f1a85c2bada78dbcc1d6cdc09a7c8e129950896001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fcb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ff191906200225a565b9850896001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105891906200225a565b9750886001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156200109b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010c191906200227a565b506040805160018082528183019092526000916020808301908036833701905050905073dc4e6dfe07efca50a197df15d9200883ef4eb1c8816000815181106200110f576200110f62002294565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352600093919290918301908036833701905050905073cc617c6f9725eacc993ac626c7efc6b96476916e8160008151811062001175576200117562002294565b60200260200101906001600160a01b031690816001600160a01b03168152505073fda462548ce04282f4b6d6619823a7c64fdc018581600181518110620011c057620011c062002294565b60200260200101906001600160a01b031690816001600160a01b03168152505060007f0000000000000000000000000000000000000000000000000000000000000000731d941ef0d3bba4ad67dbfbcee5262f4cee53a32b8c8e8686730c2553e4b9dfa9f83b1a6d3eab96c4baab42d43060405160240162001247959493929190620022f0565b60408051601f198184030181529181526020820180516001600160e01b0316635a71fd0960e01b179052516200127d9062001f86565b6200128b939291906200236f565b604051809103906000f080158015620012a8573d6000803e3d6000fd5b5090507f844985ce6880ca51e25a6d4ecc8af37a5de880279f2081af96d0e875c42b70828e82604051620012f29291906001600160a01b0392831681529116602082015260400190565b60405180910390a1809d508a6001600160a01b03166393084b348f6040518263ffffffff1660e01b81526004016200132b91906200210f565b600060405180830381600087803b1580156200134657600080fd5b505af11580156200135b573d6000803e3d6000fd5b5060009550600194506200136f9350505050565b60405190808252806020026020018201604052801562001399578160200160208202803683370190505b5060408051600180825281830190925291925060009190602080830190803683370190505090508b82600081518110620013d757620013d762002294565b60200260200101906001600160a01b031690816001600160a01b0316815250508b6001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001436573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200145c91906200225a565b8160008151811062001472576200147262002294565b6001600160a01b03909216602092830291909101909101526040516334086fd360e11b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636810dfa690620014ca908590859060019081906004016200262c565b600060405180830381600087803b158015620014e557600080fd5b505af1158015620014fa573d6000803e3d6000fd5b505050505050896001600160a01b031663f381e07d6000805160206200374f83398151915260643060405160200162001536939291906200266e565b6040516020818303038152906040526040518263ffffffff1660e01b815260040162001563919062001fe4565b600060405180830381600087803b1580156200157e57600080fd5b505af115801562001593573d6000803e3d6000fd5b5050604051638baf295760e01b81526001600160a01b038b169250638baf29579150620015c5908d906004016200210f565b600060405180830381600087803b158015620015e057600080fd5b505af1158015620015f5573d6000803e3d6000fd5b505060405163133f757160e31b8152600481018a905273c36442b4a4522e871399cd717abdd847ab11fe8892506399fbab88915060240161018060405180830381865afa1580156200164b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016719190620026ef565b909192939495969798999a50909192939495969798995090919293949596979850909192939495969750909192939495965090919293949550909192939450909192509091509050508096505073c36442b4a4522e871399cd717abdd847ab11fe886001600160a01b0316630c49ccbe6040518060a001604052808a8152602001896001600160801b031681526020016000815260200160008152602001428152506040518263ffffffff1660e01b8152600401620017699190815181526020808301516001600160801b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b60408051808303816000875af115801562001788573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017ae9190620027df565b50506040805160808101825288815230602082019081526001600160801b0382840181815260608401828152945163fc6f786560e01b81529351600485015291516001600160a01b031660248401529051811660448301529151909116606482015273c36442b4a4522e871399cd717abdd847ab11fe889063fc6f78659060840160408051808303816000875af11580156200184e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018749190620027df565b5050604051630852cd8d60e31b81526004810188905273c36442b4a4522e871399cd717abdd847ab11fe88906342966c6890602401600060405180830381600087803b158015620018c457600080fd5b505af1158015620018d9573d6000803e3d6000fd5b50505050620018ed8a62000e328c6200055d565b6040516370a0823160e01b81526000805160206200374f8339815191529063a9059cbb908d9083906370a08231906200192b9030906004016200210f565b602060405180830381865afa15801562001949573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200196f91906200227a565b6040518363ffffffff1660e01b81526004016200198e929190620026a4565b6020604051808303816000875af1158015620019ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019d49190620026bd565b50876001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001a1157600080fd5b505af115801562001a26573d6000803e3d6000fd5b5050600654604051631dd9b59160e31b81526001600160a01b03909116925063eecdac88915062001a5c9030906004016200210f565b600060405180830381600087803b15801562001a7757600080fd5b505af115801562001a8c573d6000803e3d6000fd5b505050505050505050505050505050565b6060600480546200033090620021b4565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101562001b325760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401620003fe565b62001b41338585840362001b5a565b5060019392505050565b6000620003c833848462001c83565b6001600160a01b03831662001bbe5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401620003fe565b6001600160a01b03821662001c215760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401620003fe565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831662001ce95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401620003fe565b6001600160a01b03821662001d4d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401620003fe565b6001600160a01b0383166000908152602081905260409020548181101562001dc75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401620003fe565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929062001e009084906200222d565b92505081905550826001600160a01b0316846001600160a01b03166000805160206200376f8339815191528460405162001e3c91815260200190565b60405180910390a350505050565b6001600160a01b03821662001eac5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401620003fe565b6001600160a01b0382166000908152602081905260409020548181101562001f225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401620003fe565b6001600160a01b038316600090815260208190526040812083830390556002805484929062001f5390849062002804565b90915550506040518281526000906001600160a01b038516906000805160206200376f8339815191529060200162001c76565b610f30806200281f83390190565b6000815180845260005b8181101562001fbc5760208185018101518683018201520162001f9e565b8181111562001fcf576000602083870101525b50601f01601f19169290920160200192915050565b60208152600062001ff9602083018462001f94565b9392505050565b6001600160a01b03811681146200201657600080fd5b50565b600080604083850312156200202d57600080fd5b82356200203a8162002000565b946020939093013593505050565b6000602082840312156200205b57600080fd5b813562001ff98162002000565b6000806000806000608086880312156200208157600080fd5b85356200208e8162002000565b94506020860135620020a08162002000565b93506040860135925060608601356001600160401b0380821115620020c457600080fd5b818801915088601f830112620020d957600080fd5b813581811115620020e957600080fd5b896020828501011115620020fc57600080fd5b9699959850939650602001949392505050565b6001600160a01b0391909116815260200190565b6000806000606084860312156200213957600080fd5b8335620021468162002000565b92506020840135620021588162002000565b929592945050506040919091013590565b6001600160a01b03169052565b600080604083850312156200218a57600080fd5b8235620021978162002000565b91506020830135620021a98162002000565b809150509250929050565b600181811c90821680620021c957607f821691505b60208210811415620021eb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b3bb937b7339031b0b63632b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111562002243576200224362002217565b500190565b8051620022558162002000565b919050565b6000602082840312156200226d57600080fd5b815162001ff98162002000565b6000602082840312156200228d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015620022e55781516001600160a01b031687529582019590820190600101620022be565b509495945050505050565b600060018060a01b03808816835260c06020840152600f60c08401526e21b7b6b837bab732102632b73232b960891b60e084015261010081881660408501528060608501526200234381850188620022aa565b90508381036080850152620023598187620022aa565b92505080841660a0840152509695505050505050565b6001600160a01b038481168252831660208201526060604082018190526000906200239d9083018462001f94565b95945050505050565b8051600281900b81146200225557600080fd5b805161ffff811681146200225557600080fd5b805180151581146200225557600080fd5b600080600080600080600060e0888a031215620023f957600080fd5b8751620024068162002000565b96506200241660208901620023a6565b95506200242660408901620023b9565b94506200243660608901620023b9565b93506200244660808901620023b9565b925060a088015160ff811681146200245d57600080fd5b91506200246d60c08901620023cc565b905092959891949750929550565b60008160020b8360020b6000821282627fffff03821381151615620024a457620024a462002217565b82627fffff19038212811615620024bf57620024bf62002217565b50019392505050565b60008160020b8360020b6000811281627fffff1901831281151615620024f257620024f262002217565b81627fffff0183138116156200250c576200250c62002217565b5090039392505050565b6000610160820190506200252c82845162002169565b602083015162002540602084018262002169565b50604083015162002558604084018262ffffff169052565b5060608301516200256e606084018260020b9052565b50608083015162002584608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151620025c48285018262002169565b505061014092830151919092015290565b80516001600160801b03811681146200225557600080fd5b600080600080608085870312156200260457600080fd5b845193506200261660208601620025d5565b6040860151606090960151949790965092505050565b608081526000620026416080830187620022aa565b8281036020840152620026558187620022aa565b9415156040840152505090151560609091015292915050565b606093841b6001600160601b0319908116825260e89390931b6001600160e81b0319166014820152921b166017820152602b0190565b6001600160a01b03929092168252602082015260400190565b600060208284031215620026d057600080fd5b62001ff982620023cc565b805162ffffff811681146200225557600080fd5b6000806000806000806000806000806000806101808d8f0312156200271357600080fd5b8c516001600160601b03811681146200272b57600080fd5b9b506200273b60208e0162002248565b9a506200274b60408e0162002248565b99506200275b60608e0162002248565b98506200276b60808e01620026db565b97506200277b60a08e01620023a6565b96506200278b60c08e01620023a6565b95506200279b60e08e01620025d5565b94506101008d015193506101208d01519250620027bc6101408e01620025d5565b9150620027cd6101608e01620025d5565b90509295989b509295989b509295989b565b60008060408385031215620027f357600080fd5b505080516020909101519092909150565b60008282101562002819576200281962002217565b50039056fe608060405260405162000f3038038062000f30833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000ee9833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000ec983398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000f096027913962000381565b9392505050565b60006200021a60008051602062000ec983398151915260001b6200045e60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000ec983398151915260001b6200045e60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000ee983398151915260001b6200045e60201b620002081760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b61084380620006866000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b61008036600461068e565b610118565b61005b6100933660046106a9565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e436600461068e565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610380565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610380915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103ab565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107e7602791396103ff565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104d3565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60006000805160206107a78339815191525b546001600160a01b0316919050565b610389836104e9565b6000825111806103965750805b156101c3576103a58383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103d461035f565b604080516001600160a01b03928316815291841660208301520160405180910390a161015481610529565b6060833b61045e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b0316856040516104799190610757565b600060405180830381855af49150503d80600081146104b4576040519150601f19603f3d011682016040523d82523d6000602084013e6104b9565b606091505b50915091506104c98282866105c0565b9695505050505050565b60006000805160206107c7833981519152610371565b6104f2816105f9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b03811661058e5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b806000805160206107a78339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105cf575081610285565b8251156105df5782518084602001fd5b8160405162461bcd60e51b81526004016103289190610773565b803b61065d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b806000805160206107c783398151915261059f565b80356001600160a01b038116811461068957600080fd5b919050565b6000602082840312156106a057600080fd5b61028582610672565b6000806000604084860312156106be57600080fd5b6106c784610672565b925060208401356001600160401b03808211156106e357600080fd5b818601915086601f8301126106f757600080fd5b81358181111561070657600080fd5b87602082850101111561071857600080fd5b6020830194508093505050509250925092565b60005b8381101561074657818101518382015260200161072e565b838111156103a55750506000910152565b6000825161076981846020870161072b565b9190910192915050565b602081526000825180602084015261079281604085016020870161072b565b601f01601f1916919091016040019291505056feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209e523a4bf2195ff66e62a3ac0865e1aa8ef465b33eb1f512fe819dd9523b68e664736f6c634300080a0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122040a0012a745265c44ce048efc13a6a72db027f3a83781532b9999bebcb1eaa0764736f6c634300080a0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000fa5760003560e01c806306fdde0314620000ff578063095ea7b3146200012157806313af40351462000149578063150b7a02146200016257806316f0115b146200019e57806318160ddd14620001d557806323b872dd14620001e857806324ea54f414620001ff578063313ce5671462000227578063395093511462000237578063580b7c2e146200024e57806370a0823114620002765780638da5cb5b146200028d5780638fd3ab8014620002a157806395d89b4114620002ab578063a457c2d714620002b5578063a9059cbb14620002cc578063dd62ed3e14620002e3575b600080fd5b620001096200031f565b60405162000118919062001fe4565b60405180910390f35b620001386200013236600462002019565b620003b9565b604051901515815260200162000118565b620001606200015a36600462002048565b620003d1565b005b620001846200017336600462002068565b630a85bd0160e11b95945050505050565b6040516001600160e01b0319909116815260200162000118565b620001c67f000000000000000000000000000000000000000000000000000000000000000081565b6040516200011891906200210f565b6002545b60405190815260200162000118565b62000138620001f936600462002123565b6200046d565b620001d97f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6040516012815260200162000118565b620001386200024836600462002019565b6200051d565b620001d97f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b620001d96200028736600462002048565b6200055d565b600554620001c6906001600160a01b031681565b6200016062000578565b6200010962001a9d565b62000138620002c636600462002019565b62001aae565b62000138620002dd36600462002019565b62001b4b565b620001d9620002f436600462002176565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546200033090620021b4565b80601f01602080910402602001604051908101604052809291908181526020018280546200035e90620021b4565b8015620003af5780601f106200038357610100808354040283529160200191620003af565b820191906000526020600020905b8154815290600101906020018083116200039157829003601f168201915b5050505050905090565b6000620003c833848462001b5a565b50600192915050565b6005546001600160a01b03163314620004075760405162461bcd60e51b8152600401620003fe90620021f1565b60405180910390fd5b6001600160a01b0381166200044b5760405162461bcd60e51b815260206004820152600960248201526830206164647265737360b81b6044820152606401620003fe565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60006200047c84848462001c83565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015620005035760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401620003fe565b62000512853385840362001b5a565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091620003c8918590620005579086906200222d565b62001b5a565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b03163314620005a55760405162461bcd60e51b8152600401620003fe90620021f1565b60008073c011882d0f7672d8942e7fe2248c174eed640c8f90506000816001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200062691906200225a565b90506000826001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000669573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200068f91906200225a565b9050816001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015620006d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006f891906200227a565b506040805160018082528183019092526000916020808301908036833701905050905073dc4e6dfe07efca50a197df15d9200883ef4eb1c88160008151811062000746576200074662002294565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352600093919290918301908036833701905050905073cc617c6f9725eacc993ac626c7efc6b96476916e81600081518110620007ac57620007ac62002294565b60200260200101906001600160a01b031690816001600160a01b03168152505073fda462548ce04282f4b6d6619823a7c64fdc018581600181518110620007f757620007f762002294565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000731d941ef0d3bba4ad67dbfbcee5262f4cee53a32b84868585730c2553e4b9dfa9f83b1a6d3eab96c4baab42d4306040516024016200087c959493929190620022f0565b60408051601f198184030181529181526020820180516001600160e01b0316635a71fd0960e01b17905251620008b29062001f86565b620008c0939291906200236f565b604051809103906000f080158015620008dd573d6000803e3d6000fd5b506040516324c212cd60e21b81529096506001600160a01b038416906393084b34906200090f9089906004016200210f565b600060405180830381600087803b1580156200092a57600080fd5b505af11580156200093f573d6000803e3d6000fd5b5050505050506000806000806000805160206200374f8339815191526001600160a01b0316306001600160a01b0316106200098b576000805160206200374f833981519152306200099d565b306000805160206200374f8339815191525b809250819350505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801562000a06573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a2c9190620023dd565b505050505091505060006000805160206200374f8339815191526001600160a01b0316846001600160a01b03161462000a725762000a6c8260016200247b565b62000a78565b620d8977195b905060006001600160a01b0385166000805160206200374f8339815191521462000aa657620d897862000ab3565b62000ab3600184620024c8565b60408051610160810182526001600160a01b03888116825287166020820152606481830152600285810b606083015283900b6080820152670de0b6b3a764000060a0820181905260c0820152600060e0820181905261010082015230610120820152426101408201529051634418b22b60e11b815291925073c36442b4a4522e871399cd717abdd847ab11fe889163883164569162000b559160040162002516565b6080604051808303816000875af115801562000b75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9b9190620025ed565b5050604080516001808252818301909252929950909750600091906020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090508b8260008151811062000c005762000c0062002294565b60200260200101906001600160a01b031690816001600160a01b0316815250508b6001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c5f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8591906200225a565b8160008151811062000c9b5762000c9b62002294565b6001600160a01b03909216602092830291909101909101526040516334086fd360e11b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636810dfa69062000cf3908590859060019081906004016200262c565b600060405180830381600087803b15801562000d0e57600080fd5b505af115801562000d23573d6000803e3d6000fd5b505050505050896001600160a01b031663f381e07d6000805160206200374f83398151915260643060405160200162000d5f939291906200266e565b6040516020818303038152906040526040518263ffffffff1660e01b815260040162000d8c919062001fe4565b600060405180830381600087803b15801562000da757600080fd5b505af115801562000dbc573d6000803e3d6000fd5b5050604051638baf295760e01b81526001600160a01b038b169250638baf2957915062000dee908d906004016200210f565b600060405180830381600087803b15801562000e0957600080fd5b505af115801562000e1e573d6000803e3d6000fd5b5050505062000e388a62000e328c6200055d565b62001e4a565b6040516370a0823160e01b81526000805160206200374f8339815191529063a9059cbb908d9083906370a082319062000e769030906004016200210f565b602060405180830381865afa15801562000e94573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eba91906200227a565b6040518363ffffffff1660e01b815260040162000ed9929190620026a4565b6020604051808303816000875af115801562000ef9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1f9190620026bd565b50876001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000f5c57600080fd5b505af115801562000f71573d6000803e3d6000fd5b5050505073f89fa5d0f1a85c2bada78dbcc1d6cdc09a7c8e129950896001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fcb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ff191906200225a565b9850896001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105891906200225a565b9750886001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156200109b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010c191906200227a565b506040805160018082528183019092526000916020808301908036833701905050905073dc4e6dfe07efca50a197df15d9200883ef4eb1c8816000815181106200110f576200110f62002294565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352600093919290918301908036833701905050905073cc617c6f9725eacc993ac626c7efc6b96476916e8160008151811062001175576200117562002294565b60200260200101906001600160a01b031690816001600160a01b03168152505073fda462548ce04282f4b6d6619823a7c64fdc018581600181518110620011c057620011c062002294565b60200260200101906001600160a01b031690816001600160a01b03168152505060007f0000000000000000000000000000000000000000000000000000000000000000731d941ef0d3bba4ad67dbfbcee5262f4cee53a32b8c8e8686730c2553e4b9dfa9f83b1a6d3eab96c4baab42d43060405160240162001247959493929190620022f0565b60408051601f198184030181529181526020820180516001600160e01b0316635a71fd0960e01b179052516200127d9062001f86565b6200128b939291906200236f565b604051809103906000f080158015620012a8573d6000803e3d6000fd5b5090507f844985ce6880ca51e25a6d4ecc8af37a5de880279f2081af96d0e875c42b70828e82604051620012f29291906001600160a01b0392831681529116602082015260400190565b60405180910390a1809d508a6001600160a01b03166393084b348f6040518263ffffffff1660e01b81526004016200132b91906200210f565b600060405180830381600087803b1580156200134657600080fd5b505af11580156200135b573d6000803e3d6000fd5b5060009550600194506200136f9350505050565b60405190808252806020026020018201604052801562001399578160200160208202803683370190505b5060408051600180825281830190925291925060009190602080830190803683370190505090508b82600081518110620013d757620013d762002294565b60200260200101906001600160a01b031690816001600160a01b0316815250508b6001600160a01b03166369e527da6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001436573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200145c91906200225a565b8160008151811062001472576200147262002294565b6001600160a01b03909216602092830291909101909101526040516334086fd360e11b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90636810dfa690620014ca908590859060019081906004016200262c565b600060405180830381600087803b158015620014e557600080fd5b505af1158015620014fa573d6000803e3d6000fd5b505050505050896001600160a01b031663f381e07d6000805160206200374f83398151915260643060405160200162001536939291906200266e565b6040516020818303038152906040526040518263ffffffff1660e01b815260040162001563919062001fe4565b600060405180830381600087803b1580156200157e57600080fd5b505af115801562001593573d6000803e3d6000fd5b5050604051638baf295760e01b81526001600160a01b038b169250638baf29579150620015c5908d906004016200210f565b600060405180830381600087803b158015620015e057600080fd5b505af1158015620015f5573d6000803e3d6000fd5b505060405163133f757160e31b8152600481018a905273c36442b4a4522e871399cd717abdd847ab11fe8892506399fbab88915060240161018060405180830381865afa1580156200164b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016719190620026ef565b909192939495969798999a50909192939495969798995090919293949596979850909192939495969750909192939495965090919293949550909192939450909192509091509050508096505073c36442b4a4522e871399cd717abdd847ab11fe886001600160a01b0316630c49ccbe6040518060a001604052808a8152602001896001600160801b031681526020016000815260200160008152602001428152506040518263ffffffff1660e01b8152600401620017699190815181526020808301516001600160801b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b60408051808303816000875af115801562001788573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017ae9190620027df565b50506040805160808101825288815230602082019081526001600160801b0382840181815260608401828152945163fc6f786560e01b81529351600485015291516001600160a01b031660248401529051811660448301529151909116606482015273c36442b4a4522e871399cd717abdd847ab11fe889063fc6f78659060840160408051808303816000875af11580156200184e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018749190620027df565b5050604051630852cd8d60e31b81526004810188905273c36442b4a4522e871399cd717abdd847ab11fe88906342966c6890602401600060405180830381600087803b158015620018c457600080fd5b505af1158015620018d9573d6000803e3d6000fd5b50505050620018ed8a62000e328c6200055d565b6040516370a0823160e01b81526000805160206200374f8339815191529063a9059cbb908d9083906370a08231906200192b9030906004016200210f565b602060405180830381865afa15801562001949573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200196f91906200227a565b6040518363ffffffff1660e01b81526004016200198e929190620026a4565b6020604051808303816000875af1158015620019ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019d49190620026bd565b50876001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001a1157600080fd5b505af115801562001a26573d6000803e3d6000fd5b5050600654604051631dd9b59160e31b81526001600160a01b03909116925063eecdac88915062001a5c9030906004016200210f565b600060405180830381600087803b15801562001a7757600080fd5b505af115801562001a8c573d6000803e3d6000fd5b505050505050505050505050505050565b6060600480546200033090620021b4565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101562001b325760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401620003fe565b62001b41338585840362001b5a565b5060019392505050565b6000620003c833848462001c83565b6001600160a01b03831662001bbe5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401620003fe565b6001600160a01b03821662001c215760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401620003fe565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831662001ce95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401620003fe565b6001600160a01b03821662001d4d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401620003fe565b6001600160a01b0383166000908152602081905260409020548181101562001dc75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401620003fe565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929062001e009084906200222d565b92505081905550826001600160a01b0316846001600160a01b03166000805160206200376f8339815191528460405162001e3c91815260200190565b60405180910390a350505050565b6001600160a01b03821662001eac5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401620003fe565b6001600160a01b0382166000908152602081905260409020548181101562001f225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401620003fe565b6001600160a01b038316600090815260208190526040812083830390556002805484929062001f5390849062002804565b90915550506040518281526000906001600160a01b038516906000805160206200376f8339815191529060200162001c76565b610f30806200281f83390190565b6000815180845260005b8181101562001fbc5760208185018101518683018201520162001f9e565b8181111562001fcf576000602083870101525b50601f01601f19169290920160200192915050565b60208152600062001ff9602083018462001f94565b9392505050565b6001600160a01b03811681146200201657600080fd5b50565b600080604083850312156200202d57600080fd5b82356200203a8162002000565b946020939093013593505050565b6000602082840312156200205b57600080fd5b813562001ff98162002000565b6000806000806000608086880312156200208157600080fd5b85356200208e8162002000565b94506020860135620020a08162002000565b93506040860135925060608601356001600160401b0380821115620020c457600080fd5b818801915088601f830112620020d957600080fd5b813581811115620020e957600080fd5b896020828501011115620020fc57600080fd5b9699959850939650602001949392505050565b6001600160a01b0391909116815260200190565b6000806000606084860312156200213957600080fd5b8335620021468162002000565b92506020840135620021588162002000565b929592945050506040919091013590565b6001600160a01b03169052565b600080604083850312156200218a57600080fd5b8235620021978162002000565b91506020830135620021a98162002000565b809150509250929050565b600181811c90821680620021c957607f821691505b60208210811415620021eb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b3bb937b7339031b0b63632b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111562002243576200224362002217565b500190565b8051620022558162002000565b919050565b6000602082840312156200226d57600080fd5b815162001ff98162002000565b6000602082840312156200228d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015620022e55781516001600160a01b031687529582019590820190600101620022be565b509495945050505050565b600060018060a01b03808816835260c06020840152600f60c08401526e21b7b6b837bab732102632b73232b960891b60e084015261010081881660408501528060608501526200234381850188620022aa565b90508381036080850152620023598187620022aa565b92505080841660a0840152509695505050505050565b6001600160a01b038481168252831660208201526060604082018190526000906200239d9083018462001f94565b95945050505050565b8051600281900b81146200225557600080fd5b805161ffff811681146200225557600080fd5b805180151581146200225557600080fd5b600080600080600080600060e0888a031215620023f957600080fd5b8751620024068162002000565b96506200241660208901620023a6565b95506200242660408901620023b9565b94506200243660608901620023b9565b93506200244660808901620023b9565b925060a088015160ff811681146200245d57600080fd5b91506200246d60c08901620023cc565b905092959891949750929550565b60008160020b8360020b6000821282627fffff03821381151615620024a457620024a462002217565b82627fffff19038212811615620024bf57620024bf62002217565b50019392505050565b60008160020b8360020b6000811281627fffff1901831281151615620024f257620024f262002217565b81627fffff0183138116156200250c576200250c62002217565b5090039392505050565b6000610160820190506200252c82845162002169565b602083015162002540602084018262002169565b50604083015162002558604084018262ffffff169052565b5060608301516200256e606084018260020b9052565b50608083015162002584608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151620025c48285018262002169565b505061014092830151919092015290565b80516001600160801b03811681146200225557600080fd5b600080600080608085870312156200260457600080fd5b845193506200261660208601620025d5565b6040860151606090960151949790965092505050565b608081526000620026416080830187620022aa565b8281036020840152620026558187620022aa565b9415156040840152505090151560609091015292915050565b606093841b6001600160601b0319908116825260e89390931b6001600160e81b0319166014820152921b166017820152602b0190565b6001600160a01b03929092168252602082015260400190565b600060208284031215620026d057600080fd5b62001ff982620023cc565b805162ffffff811681146200225557600080fd5b6000806000806000806000806000806000806101808d8f0312156200271357600080fd5b8c516001600160601b03811681146200272b57600080fd5b9b506200273b60208e0162002248565b9a506200274b60408e0162002248565b99506200275b60608e0162002248565b98506200276b60808e01620026db565b97506200277b60a08e01620023a6565b96506200278b60c08e01620023a6565b95506200279b60e08e01620025d5565b94506101008d015193506101208d01519250620027bc6101408e01620025d5565b9150620027cd6101608e01620025d5565b90509295989b509295989b509295989b565b60008060408385031215620027f357600080fd5b505080516020909101519092909150565b60008282101562002819576200281962002217565b50039056fe608060405260405162000f3038038062000f30833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000ee9833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000ec983398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000f096027913962000381565b9392505050565b60006200021a60008051602062000ec983398151915260001b6200045e60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000ec983398151915260001b6200045e60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000ee983398151915260001b6200045e60201b620002081760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b61084380620006866000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b61008036600461068e565b610118565b61005b6100933660046106a9565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e436600461068e565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610380565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610380915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103ab565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107e7602791396103ff565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104d3565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60006000805160206107a78339815191525b546001600160a01b0316919050565b610389836104e9565b6000825111806103965750805b156101c3576103a58383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103d461035f565b604080516001600160a01b03928316815291841660208301520160405180910390a161015481610529565b6060833b61045e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b0316856040516104799190610757565b600060405180830381855af49150503d80600081146104b4576040519150601f19603f3d011682016040523d82523d6000602084013e6104b9565b606091505b50915091506104c98282866105c0565b9695505050505050565b60006000805160206107c7833981519152610371565b6104f2816105f9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b03811661058e5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b806000805160206107a78339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105cf575081610285565b8251156105df5782518084602001fd5b8160405162461bcd60e51b81526004016103289190610773565b803b61065d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b806000805160206107c783398151915261059f565b80356001600160a01b038116811461068957600080fd5b919050565b6000602082840312156106a057600080fd5b61028582610672565b6000806000604084860312156106be57600080fd5b6106c784610672565b925060208401356001600160401b03808211156106e357600080fd5b818601915086601f8301126106f757600080fd5b81358181111561070657600080fd5b87602082850101111561071857600080fd5b6020830194508093505050509250925092565b60005b8381101561074657818101518382015260200161072e565b838111156103a55750506000910152565b6000825161076981846020870161072b565b9190910192915050565b602081526000825180602084015261079281604085016020870161072b565b601f01601f1916919091016040019291505056feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209e523a4bf2195ff66e62a3ac0865e1aa8ef465b33eb1f512fe819dd9523b68e664736f6c634300080a0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122040a0012a745265c44ce048efc13a6a72db027f3a83781532b9999bebcb1eaa0764736f6c634300080a0033",
  "devdoc": {
    "author": "Angle Core Team",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": { "details": "See {IERC20-allowance}." },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": { "details": "See {IERC20-balanceOf}." },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": { "details": "Returns the name of the token." },
      "setOwner(address)": { "params": { "owner_": "Address of the new owner" } },
      "symbol()": { "details": "Returns the symbol of the token, usually a shorter version of the name." },
      "totalSupply()": { "details": "See {IERC20-totalSupply}." },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "LenderMigrator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": { "setOwner(address)": { "notice": "Changes the minter address" } },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1047,
        "contract": "contracts/LenderMigrator.sol:LenderMigrator",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1053,
        "contract": "contracts/LenderMigrator.sol:LenderMigrator",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1055,
        "contract": "contracts/LenderMigrator.sol:LenderMigrator",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1057,
        "contract": "contracts/LenderMigrator.sol:LenderMigrator",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1059,
        "contract": "contracts/LenderMigrator.sol:LenderMigrator",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 4476,
        "contract": "contracts/LenderMigrator.sol:LenderMigrator",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4488,
        "contract": "contracts/LenderMigrator.sol:LenderMigrator",
        "label": "_core",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ICore)5613"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_contract(ICore)5613": { "encoding": "inplace", "label": "contract ICore", "numberOfBytes": "20" },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": { "encoding": "bytes", "label": "string", "numberOfBytes": "32" },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" }
    }
  }
}
