{
  "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
  "abi": [
    {
      "inputs": [
        { "internalType": "address[]", "name": "governorList", "type": "address[]" },
        { "internalType": "address", "name": "guardian", "type": "address" },
        { "internalType": "address", "name": "rewardTokenAddress", "type": "address" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256", "name": "_amountToDistribute", "type": "uint256" },
        { "indexed": true, "internalType": "address", "name": "_stakingContract", "type": "address" }
      ],
      "name": "AmountToDistributeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "stakingContract", "type": "address" }],
      "name": "DeletedStakingContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "_caller", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "_amount", "type": "uint256" },
        { "indexed": false, "internalType": "address", "name": "_stakingContract", "type": "address" }
      ],
      "name": "Dripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256", "name": "_duration", "type": "uint256" },
        { "indexed": true, "internalType": "address", "name": "_stakingContract", "type": "address" }
      ],
      "name": "DurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256", "name": "_frequency", "type": "uint256" },
        { "indexed": true, "internalType": "address", "name": "_stakingContract", "type": "address" }
      ],
      "name": "FrequencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "uint256", "name": "_incentiveAmount", "type": "uint256" },
        { "indexed": true, "internalType": "address", "name": "_stakingContract", "type": "address" }
      ],
      "name": "IncentiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "newRewardsDistributor", "type": "address" }],
      "name": "NewRewardsDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "_stakingContract", "type": "address" }],
      "name": "NewStakingContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "uint256", "name": "_amount", "type": "uint256" }],
      "name": "RewardTokenWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract IStakingRewards", "name": "stakingContract", "type": "address" }],
      "name": "drip",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" },
        { "internalType": "contract IStakingRewards", "name": "stakingContract", "type": "address" }
      ],
      "name": "governorRecover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "amount", "type": "uint256" },
        { "internalType": "address", "name": "to", "type": "address" }
      ],
      "name": "governorWithdrawRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract IStakingRewards", "name": "stakingContract", "type": "address" }],
      "name": "removeStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_amountToDistribute", "type": "uint256" },
        { "internalType": "contract IStakingRewards", "name": "stakingContract", "type": "address" }
      ],
      "name": "setAmountToDistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_duration", "type": "uint256" },
        { "internalType": "contract IStakingRewards", "name": "stakingContract", "type": "address" }
      ],
      "name": "setDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_incentiveAmount", "type": "uint256" },
        { "internalType": "contract IStakingRewards", "name": "stakingContract", "type": "address" }
      ],
      "name": "setIncentiveAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "newRewardsDistributor", "type": "address" }],
      "name": "setNewRewardsDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_stakingContract", "type": "address" },
        { "internalType": "uint256", "name": "_duration", "type": "uint256" },
        { "internalType": "uint256", "name": "_incentiveAmount", "type": "uint256" },
        { "internalType": "uint256", "name": "_updateFrequency", "type": "uint256" },
        { "internalType": "uint256", "name": "_amountToDistribute", "type": "uint256" }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_updateFrequency", "type": "uint256" },
        { "internalType": "contract IStakingRewards", "name": "stakingContract", "type": "address" }
      ],
      "name": "setUpdateFrequency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "stakingContractsList",
      "outputs": [{ "internalType": "contract IStakingRewards", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract IStakingRewards", "name": "", "type": "address" }],
      "name": "stakingContractsMap",
      "outputs": [
        { "internalType": "uint256", "name": "distributedRewards", "type": "uint256" },
        { "internalType": "uint256", "name": "lastDistributionTime", "type": "uint256" },
        { "internalType": "uint256", "name": "updateFrequency", "type": "uint256" },
        { "internalType": "uint256", "name": "incentiveAmount", "type": "uint256" },
        { "internalType": "uint256", "name": "timeStarted", "type": "uint256" },
        { "internalType": "uint256", "name": "duration", "type": "uint256" },
        { "internalType": "uint256", "name": "amountToDistribute", "type": "uint256" }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
    "transactionIndex": 99,
    "gasUsed": "2532462",
    "logsBloom": "0x00000004000000000800000000000000080000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000020000400000000000000800000000000000000000000000000000000000000000000000000000000000000100000002000000000000000000004000000010000000000000010000000000000000000000000000001000000000001000000000020000000040008010000000000800000000000300000000000020000200800000000000008000000000000400000000400000000000000000040000",
    "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711",
    "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
    "logs": [
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x000000000000000000000000e02f8e39b8cfa7d3b62307e46077669010883459",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x000000000000000000000000e02f8e39b8cfa7d3b62307e46077669010883459",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000005183f032bf42109cd370b9559fd22207e432301e",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000005183f032bf42109cd370b9559fd22207e432301e",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 13473295,
        "transactionHash": "0xe4dc6cd788a5db3dedf7200ca5a4c3806b686376a570b88344975317706fc40e",
        "address": "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000c2553e4b9dfa9f83b1a6d3eab96c4baab42d430",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x2664652e63450ed05d3cd7ed5aa521ce7e2e48c1ceba0a290b75aa3b7759a711"
      }
    ],
    "blockNumber": 13473295,
    "cumulativeGasUsed": "8322891",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
      "0xe02F8E39b8cFA7d3b62307E46077669010883459",
      "0x5183f032bf42109cD370B9559FD22207e432301E"
    ],
    "0x0C2553e4B9dFA9f83b1A6D3EAB96c4bAaB42d430",
    "0x31429d1856aD1377A8A0079410B297e1a9e214c2"
  ],
  "solcInputHash": "c1a2cc7754e40d365e6c8a31eb4e6940",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToDistribute\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"AmountToDistributeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"DeletedStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"Dripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"DurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_frequency\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"FrequencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_incentiveAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"IncentiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRewardsDistributor\",\"type\":\"address\"}],\"name\":\"NewRewardsDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"NewStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"drip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"governorRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governorWithdrawRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"removeStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setAmountToDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_incentiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setIncentiveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardsDistributor\",\"type\":\"address\"}],\"name\":\"setNewRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updateFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToDistribute\",\"type\":\"uint256\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateFrequency\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setUpdateFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingContractsList\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingContractsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"distributedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDistributionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToDistribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team (forked form FEI Protocol)\",\"details\":\"Inspired from FEI contract: https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/FeiRewardsDistributor.sol\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"governorList\":\"List of the governor addresses of the protocol\",\"guardian\":\"The guardian address, optional\",\"rewardTokenAddress\":\"The ERC20 token to distribute\"}},\"drip(address)\":{\"details\":\"The way to pause this function is to set `updateFrequency` to infinity, or to completely delete the contractA keeper calling this function could be frontran by a miner seeing the potential profit from calling this functionThis function automatically computes the amount of reward tokens to send to the staking contract based on the time elapsed since the last drip, on the amount to distribute and on the duration of the distribution\",\"params\":{\"stakingContract\":\"Reference to the staking contract\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"governorRecover(address,address,uint256,address)\":{\"details\":\"A use case would be to claim tokens if the staked tokens accumulate rewards or if tokens were mistakenly sent to staking contracts\",\"params\":{\"amount\":\"Amount to transfer\",\"stakingContract\":\"Reference to the staking contract\",\"to\":\"Address to transfer to\",\"tokenAddress\":\"Address of the ERC20 to recover\"}},\"governorWithdrawRewardToken(uint256,address)\":{\"details\":\"Only callable by governance and not by the guardian\",\"params\":{\"amount\":\"Amount of tokens to send back to treasury\",\"to\":\"Address to send the tokens to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"removeStakingContract(address)\":{\"details\":\"Allows to clean some space and to avoid keeping in memory contracts which became uselessIt is also a way governance has to completely stop rewards distribution from a contract\",\"params\":{\"stakingContract\":\"Contract to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAmountToDistribute(uint256,address)\":{\"params\":{\"_amountToDistribute\":\"New amount to distribute\",\"stakingContract\":\"Reference to the staking contract\"}},\"setDuration(uint256,address)\":{\"params\":{\"_duration\":\"New duration\",\"stakingContract\":\"Reference to the staking contract\"}},\"setIncentiveAmount(uint256,address)\":{\"params\":{\"_incentiveAmount\":\"New incentive amount\",\"stakingContract\":\"Reference to the staking contract\"}},\"setNewRewardsDistributor(address)\":{\"details\":\"This contract is not upgradeable, setting a new contract could allow for upgrades, which should be propagated across all staking contractsThis function transfers all the reward tokens to the new addressThe new rewards distributor contract should be initialized correctly with all the staking contracts from the staking contract list\",\"params\":{\"newRewardsDistributor\":\"Address of the new rewards distributor contract\"}},\"setStakingContract(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Called by governance to activate a contractAfter setting a new staking contract, everything is as if the contract had already been set for `_updateFrequency` meaning that it is possible to `drip` the staking contract immediately after that\",\"params\":{\"_amountToDistribute\":\"Amount of gov tokens to give to the staking contract across all drips\",\"_duration\":\"Time frame during which tokens will be distributed\",\"_incentiveAmount\":\"Incentive amount given to keepers calling the update function\",\"_stakingContract\":\"Address of the staking contract\",\"_updateFrequency\":\"Frequency when it is possible to call the update function and give tokens to the staking contract\"}},\"setUpdateFrequency(uint256,address)\":{\"params\":{\"_updateFrequency\":\"New update frequency\",\"stakingContract\":\"Reference to the staking contract\"}}},\"title\":\"RewardsDistributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"GOVERNOR_ROLE()\":{\"notice\":\"Role for governors only\"},\"GUARDIAN_ROLE()\":{\"notice\":\"Role for guardians and governors\"},\"constructor\":{\"notice\":\"Initializes the distributor contract with a first set of parameters\"},\"drip(address)\":{\"notice\":\"Sends reward tokens to the staking contract\"},\"governorRecover(address,address,uint256,address)\":{\"notice\":\"Function to withdraw ERC20 tokens that could accrue on a staking contract\"},\"governorWithdrawRewardToken(uint256,address)\":{\"notice\":\"Sends tokens back to governance treasury or another address\"},\"removeStakingContract(address)\":{\"notice\":\"Deletes a staking contract from the staking contract map and removes it from the `stakingContractsList`\"},\"rewardToken()\":{\"notice\":\"Token used as a reward\"},\"setAmountToDistribute(uint256,address)\":{\"notice\":\"Sets the new amount to distribute to a staking contract\"},\"setDuration(uint256,address)\":{\"notice\":\"Sets the new duration with which tokens will be distributed to the staking contract\"},\"setIncentiveAmount(uint256,address)\":{\"notice\":\"Sets the incentive amount for calling drip\"},\"setNewRewardsDistributor(address)\":{\"notice\":\"Sets a new rewards distributor contract and automatically makes this contract useless\"},\"setStakingContract(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Notifies and initializes a new staking contract\"},\"setUpdateFrequency(uint256,address)\":{\"notice\":\"Sets the update frequency\"},\"stakingContractsList(uint256)\":{\"notice\":\"List of all the staking contracts handled by the rewards distributor Used to be able to change the rewards distributor and propagate a new reference to the underlying staking contract\"},\"stakingContractsMap(address)\":{\"notice\":\"Maps a `StakingContract` to its distribution parameters\"}},\"notice\":\"Controls and handles the distribution of governance tokens to the different staking contracts of the protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/RewardsDistributor.sol\":\"RewardsDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x861838bfd5077e0caf45a75cb5da2963f4e09d7be60e1733392a0bdd72bf563b\",\"license\":\"MIT\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xdcff5a800d6a08e33c23fa016b99bf4ccadfca065e270f691e6b0fb15a1fa001\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n/// @title IRewardsDistributor\\n/// @author Angle Core Team, inspired from Fei protocol\\n/// (https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/IRewardsDistributor.sol)\\n/// @notice Rewards Distributor interface\\ninterface IRewardsDistributor {\\n    // ========================= Public Parameter Getter ===========================\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    // ======================== External User Available Function ===================\\n\\n    function drip(IStakingRewards stakingContract) external returns (uint256);\\n\\n    // ========================= Governor Functions ================================\\n\\n    function governorWithdrawRewardToken(uint256 amount, address governance) external;\\n\\n    function governorRecover(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        IStakingRewards stakingContract\\n    ) external;\\n\\n    function setUpdateFrequency(uint256 _frequency, IStakingRewards stakingContract) external;\\n\\n    function setIncentiveAmount(uint256 _incentiveAmount, IStakingRewards stakingContract) external;\\n\\n    function setAmountToDistribute(uint256 _amountToDistribute, IStakingRewards stakingContract) external;\\n\\n    function setDuration(uint256 _duration, IStakingRewards stakingContract) external;\\n\\n    function setStakingContract(\\n        address _stakingContract,\\n        uint256 _duration,\\n        uint256 _incentiveAmount,\\n        uint256 _dripFrequency,\\n        uint256 _amountToDistribute\\n    ) external;\\n\\n    function setNewRewardsDistributor(address newRewardsDistributor) external;\\n\\n    function removeStakingContract(IStakingRewards stakingContract) external;\\n}\\n\",\"keccak256\":\"0x9cd8fd5725b7ff08f9e33e2abc4e49324798cf5fbf58a5e6a5ab2fec0c6e1dcf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IStakingRewardsFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\\ninterface IStakingRewardsFunctions {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function setNewRewardsDistribution(address newRewardsDistribution) external;\\n}\\n\\n/// @title IStakingRewards\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IStakingRewards is IStakingRewardsFunctions {\\n    function rewardToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x56c330c6d2c0dbb653b13dc28c779b9f88eb5ed8a6c40806ad8b617757fa9441\",\"license\":\"GPL-3.0\"},\"contracts/staking/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./RewardsDistributorEvents.sol\\\";\\n\\n/// @notice Distribution parameters for a given contract\\nstruct StakingParameters {\\n    // Amount of rewards distributed since the beginning\\n    uint256 distributedRewards;\\n    // Last time rewards were distributed to the staking contract\\n    uint256 lastDistributionTime;\\n    // Frequency with which rewards should be given to the underlying contract\\n    uint256 updateFrequency;\\n    // Number of tokens distributed for the person calling the update function\\n    uint256 incentiveAmount;\\n    // Time at which reward distribution started for this reward contract\\n    uint256 timeStarted;\\n    // Amount of time during which rewards will be distributed\\n    uint256 duration;\\n    // Amount of tokens to distribute to the concerned contract\\n    uint256 amountToDistribute;\\n}\\n\\n/// @title RewardsDistributor\\n/// @author Angle Core Team (forked form FEI Protocol)\\n/// @notice Controls and handles the distribution of governance tokens to the different staking contracts of the protocol\\n/// @dev Inspired from FEI contract:\\n/// https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/FeiRewardsDistributor.sol\\ncontract RewardsDistributor is RewardsDistributorEvents, IRewardsDistributor, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Role for governors only\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    // ============================ Reference to a contract ========================\\n\\n    /// @notice Token used as a reward\\n    IERC20 public immutable override rewardToken;\\n\\n    // ============================== Parameters ===================================\\n\\n    /// @notice Maps a `StakingContract` to its distribution parameters\\n    mapping(IStakingRewards => StakingParameters) public stakingContractsMap;\\n\\n    /// @notice List of all the staking contracts handled by the rewards distributor\\n    /// Used to be able to change the rewards distributor and propagate a new reference to the underlying\\n    /// staking contract\\n    IStakingRewards[] public stakingContractsList;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @notice Initializes the distributor contract with a first set of parameters\\n    /// @param governorList List of the governor addresses of the protocol\\n    /// @param guardian The guardian address, optional\\n    /// @param rewardTokenAddress The ERC20 token to distribute\\n    constructor(\\n        address[] memory governorList,\\n        address guardian,\\n        address rewardTokenAddress\\n    ) {\\n        require(rewardTokenAddress != address(0) && guardian != address(0), \\\"0\\\");\\n        require(governorList.length > 0, \\\"47\\\");\\n        rewardToken = IERC20(rewardTokenAddress);\\n        // Since this contract is independent from the rest of the protocol\\n        // When updating the governor list, governors should make sure to still update the roles\\n        // in this contract\\n        _setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, GOVERNOR_ROLE);\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            require(governorList[i] != address(0), \\\"0\\\");\\n            _setupRole(GOVERNOR_ROLE, governorList[i]);\\n            _setupRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n    }\\n\\n    // ============================ External Functions =============================\\n\\n    /// @notice Sends reward tokens to the staking contract\\n    /// @param stakingContract Reference to the staking contract\\n    /// @dev The way to pause this function is to set `updateFrequency` to infinity,\\n    /// or to completely delete the contract\\n    /// @dev A keeper calling this function could be frontran by a miner seeing the potential profit\\n    /// from calling this function\\n    /// @dev This function automatically computes the amount of reward tokens to send to the staking\\n    /// contract based on the time elapsed since the last drip, on the amount to distribute and on\\n    /// the duration of the distribution\\n    function drip(IStakingRewards stakingContract) external override returns (uint256) {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(_isDripAvailable(stakingParams), \\\"81\\\");\\n\\n        uint256 dripAmount = _computeDripAmount(stakingParams);\\n        stakingParams.lastDistributionTime = block.timestamp;\\n        require(dripAmount != 0, \\\"82\\\");\\n        stakingParams.distributedRewards += dripAmount;\\n        emit Dripped(msg.sender, dripAmount, address(stakingContract));\\n\\n        rewardToken.safeTransfer(address(stakingContract), dripAmount);\\n        IStakingRewards(stakingContract).notifyRewardAmount(dripAmount);\\n        _incentivize(stakingParams);\\n\\n        return dripAmount;\\n    }\\n\\n    // =========================== Governor Functions ==============================\\n\\n    /// @notice Sends tokens back to governance treasury or another address\\n    /// @param amount Amount of tokens to send back to treasury\\n    /// @param to Address to send the tokens to\\n    /// @dev Only callable by governance and not by the guardian\\n    function governorWithdrawRewardToken(uint256 amount, address to) external override onlyRole(GOVERNOR_ROLE) {\\n        emit RewardTokenWithdrawn(amount);\\n        rewardToken.safeTransfer(to, amount);\\n    }\\n\\n    /// @notice Function to withdraw ERC20 tokens that could accrue on a staking contract\\n    /// @param tokenAddress Address of the ERC20 to recover\\n    /// @param to Address to transfer to\\n    /// @param amount Amount to transfer\\n    /// @param stakingContract Reference to the staking contract\\n    /// @dev A use case would be to claim tokens if the staked tokens accumulate rewards or if tokens were\\n    /// mistakenly sent to staking contracts\\n    function governorRecover(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        IStakingRewards stakingContract\\n    ) external override onlyRole(GOVERNOR_ROLE) {\\n        stakingContract.recoverERC20(tokenAddress, to, amount);\\n    }\\n\\n    /// @notice Sets a new rewards distributor contract and automatically makes this contract useless\\n    /// @param newRewardsDistributor Address of the new rewards distributor contract\\n    /// @dev This contract is not upgradeable, setting a new contract could allow for upgrades, which should be\\n    /// propagated across all staking contracts\\n    /// @dev This function transfers all the reward tokens to the new address\\n    /// @dev The new rewards distributor contract should be initialized correctly with all the staking contracts\\n    /// from the staking contract list\\n    function setNewRewardsDistributor(address newRewardsDistributor) external override onlyRole(GOVERNOR_ROLE) {\\n        // Checking the compatibility of the reward tokens. It is checked at the initialization of each staking contract\\n        // in the `setStakingContract` function that reward tokens are compatible with the `rewardsDistributor`. If\\n        // the `newRewardsDistributor` has a compatible rewards token, then all staking contracts will automatically be\\n        // compatible with it\\n        require(address(IRewardsDistributor(newRewardsDistributor).rewardToken()) == address(rewardToken), \\\"83\\\");\\n        require(newRewardsDistributor != address(this), \\\"84\\\");\\n        for (uint256 i = 0; i < stakingContractsList.length; i++) {\\n            stakingContractsList[i].setNewRewardsDistribution(newRewardsDistributor);\\n        }\\n        rewardToken.safeTransfer(newRewardsDistributor, rewardToken.balanceOf(address(this)));\\n        // The functions `setStakingContract` should then be called for each staking contract in the `newRewardsDistributor`\\n        emit NewRewardsDistributor(newRewardsDistributor);\\n    }\\n\\n    /// @notice Deletes a staking contract from the staking contract map and removes it from the\\n    /// `stakingContractsList`\\n    /// @param stakingContract Contract to remove\\n    /// @dev Allows to clean some space and to avoid keeping in memory contracts which became useless\\n    /// @dev It is also a way governance has to completely stop rewards distribution from a contract\\n    function removeStakingContract(IStakingRewards stakingContract) external override onlyRole(GOVERNOR_ROLE) {\\n        uint256 indexMet;\\n        uint256 stakingContractsListLength = stakingContractsList.length;\\n        require(stakingContractsListLength >= 1, \\\"80\\\");\\n        for (uint256 i = 0; i < stakingContractsListLength - 1; i++) {\\n            if (stakingContractsList[i] == stakingContract) {\\n                indexMet = 1;\\n                stakingContractsList[i] = stakingContractsList[stakingContractsListLength - 1];\\n                break;\\n            }\\n        }\\n        require(indexMet == 1 || stakingContractsList[stakingContractsListLength - 1] == stakingContract, \\\"80\\\");\\n\\n        stakingContractsList.pop();\\n\\n        delete stakingContractsMap[stakingContract];\\n        emit DeletedStakingContract(address(stakingContract));\\n    }\\n\\n    // =================== Guardian Functions (for parameters) =====================\\n\\n    /// @notice Notifies and initializes a new staking contract\\n    /// @param _stakingContract Address of the staking contract\\n    /// @param _duration Time frame during which tokens will be distributed\\n    /// @param _incentiveAmount Incentive amount given to keepers calling the update function\\n    /// @param _updateFrequency Frequency when it is possible to call the update function and give tokens to the staking contract\\n    /// @param _amountToDistribute Amount of gov tokens to give to the staking contract across all drips\\n    /// @dev Called by governance to activate a contract\\n    /// @dev After setting a new staking contract, everything is as if the contract had already been set for `_updateFrequency`\\n    /// meaning that it is possible to `drip` the staking contract immediately after that\\n    function setStakingContract(\\n        address _stakingContract,\\n        uint256 _duration,\\n        uint256 _incentiveAmount,\\n        uint256 _updateFrequency,\\n        uint256 _amountToDistribute\\n    ) external override onlyRole(GOVERNOR_ROLE) {\\n        require(_duration > 0, \\\"85\\\");\\n        require(_duration >= _updateFrequency && block.timestamp >= _updateFrequency, \\\"86\\\");\\n\\n        IStakingRewards stakingContract = IStakingRewards(_stakingContract);\\n\\n        require(stakingContract.rewardToken() == rewardToken, \\\"83\\\");\\n\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n\\n        stakingParams.updateFrequency = _updateFrequency;\\n        stakingParams.incentiveAmount = _incentiveAmount;\\n        stakingParams.lastDistributionTime = block.timestamp - _updateFrequency;\\n        // In order to allow a drip whenever a `stakingContract` is set, we consider that staking has already started\\n        // `_updateFrequency` ago\\n        stakingParams.timeStarted = block.timestamp - _updateFrequency;\\n        stakingParams.duration = _duration;\\n        stakingParams.amountToDistribute = _amountToDistribute;\\n        stakingContractsList.push(stakingContract);\\n\\n        emit NewStakingContract(_stakingContract);\\n    }\\n\\n    /// @notice Sets the update frequency\\n    /// @param _updateFrequency New update frequency\\n    /// @param stakingContract Reference to the staking contract\\n    function setUpdateFrequency(uint256 _updateFrequency, IStakingRewards stakingContract)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n    {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(stakingParams.duration >= _updateFrequency, \\\"87\\\");\\n        stakingParams.updateFrequency = _updateFrequency;\\n        emit FrequencyUpdated(_updateFrequency, address(stakingContract));\\n    }\\n\\n    /// @notice Sets the incentive amount for calling drip\\n    /// @param _incentiveAmount New incentive amount\\n    /// @param stakingContract Reference to the staking contract\\n    function setIncentiveAmount(uint256 _incentiveAmount, IStakingRewards stakingContract)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n    {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        stakingParams.incentiveAmount = _incentiveAmount;\\n        emit IncentiveUpdated(_incentiveAmount, address(stakingContract));\\n    }\\n\\n    /// @notice Sets the new amount to distribute to a staking contract\\n    /// @param _amountToDistribute New amount to distribute\\n    /// @param stakingContract Reference to the staking contract\\n    function setAmountToDistribute(uint256 _amountToDistribute, IStakingRewards stakingContract)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n    {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(stakingParams.distributedRewards < _amountToDistribute, \\\"88\\\");\\n        stakingParams.amountToDistribute = _amountToDistribute;\\n        emit AmountToDistributeUpdated(_amountToDistribute, address(stakingContract));\\n    }\\n\\n    /// @notice Sets the new duration with which tokens will be distributed to the staking contract\\n    /// @param _duration New duration\\n    /// @param stakingContract Reference to the staking contract\\n    function setDuration(uint256 _duration, IStakingRewards stakingContract) external override onlyRole(GUARDIAN_ROLE) {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(_duration >= stakingParams.updateFrequency, \\\"87\\\");\\n        uint256 timeElapsed = _timeSinceStart(stakingParams);\\n        require(timeElapsed < stakingParams.duration && timeElapsed < _duration, \\\"66\\\");\\n        stakingParams.duration = _duration;\\n        emit DurationUpdated(_duration, address(stakingContract));\\n    }\\n\\n    // =========================== Internal Functions ==============================\\n\\n    /// @notice Gives the next time when `drip` could be called\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @return Block timestamp when `drip` will next be available\\n    function _nextDripAvailable(StakingParameters memory stakingParams) internal pure returns (uint256) {\\n        return stakingParams.lastDistributionTime + stakingParams.updateFrequency;\\n    }\\n\\n    /// @notice Tells if `drip` can currently be called\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @return If the `updateFrequency` has passed since the last drip\\n    function _isDripAvailable(StakingParameters memory stakingParams) internal view returns (bool) {\\n        return block.timestamp >= _nextDripAvailable(stakingParams);\\n    }\\n\\n    /// @notice Computes the amount of tokens to give at the current drip\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @dev Constant drip amount across time\\n    function _computeDripAmount(StakingParameters memory stakingParams) internal view returns (uint256) {\\n        if (stakingParams.distributedRewards >= stakingParams.amountToDistribute) {\\n            return 0;\\n        }\\n        uint256 dripAmount = (stakingParams.amountToDistribute *\\n            (block.timestamp - stakingParams.lastDistributionTime)) / stakingParams.duration;\\n        uint256 timeLeft = stakingParams.duration - _timeSinceStart(stakingParams);\\n        uint256 rewardsLeftToDistribute = stakingParams.amountToDistribute - stakingParams.distributedRewards;\\n        if (timeLeft < stakingParams.updateFrequency || rewardsLeftToDistribute < dripAmount || timeLeft == 0) {\\n            return rewardsLeftToDistribute;\\n        } else {\\n            return dripAmount;\\n        }\\n    }\\n\\n    /// @notice Computes the time since distribution has started for the staking contract\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @return The time since distribution has started for the staking contract\\n    function _timeSinceStart(StakingParameters memory stakingParams) internal view returns (uint256) {\\n        uint256 _duration = stakingParams.duration;\\n        // `block.timestamp` is always greater than `timeStarted`\\n        uint256 timePassed = block.timestamp - stakingParams.timeStarted;\\n        return timePassed > _duration ? _duration : timePassed;\\n    }\\n\\n    /// @notice Incentivizes the person calling the drip function\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    function _incentivize(StakingParameters memory stakingParams) internal {\\n        rewardToken.safeTransfer(msg.sender, stakingParams.incentiveAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x66bc825c0e24938a537938a49773c6e99744a4366566d6df553b2b6ff55f0aa9\",\"license\":\"GPL-3.0\"},\"contracts/staking/RewardsDistributorEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\n\\nimport \\\"../interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\n/// @title RewardsDistributorEvents\\n/// @author Angle Core Team\\n/// @notice All the events used in `RewardsDistributor` contract\\ncontract RewardsDistributorEvents {\\n    event Dripped(address indexed _caller, uint256 _amount, address _stakingContract);\\n\\n    event RewardTokenWithdrawn(uint256 _amount);\\n\\n    event FrequencyUpdated(uint256 _frequency, address indexed _stakingContract);\\n\\n    event IncentiveUpdated(uint256 _incentiveAmount, address indexed _stakingContract);\\n\\n    event AmountToDistributeUpdated(uint256 _amountToDistribute, address indexed _stakingContract);\\n\\n    event DurationUpdated(uint256 _duration, address indexed _stakingContract);\\n\\n    event NewStakingContract(address indexed _stakingContract);\\n\\n    event DeletedStakingContract(address indexed stakingContract);\\n\\n    event NewRewardsDistributor(address indexed newRewardsDistributor);\\n}\\n\",\"keccak256\":\"0xe71ca9542602fb4b6e77c5a91a439f4f563ca76ab7a2e331a915a6b0c4be2a92\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002e0338038062002e0383398101604081905262000034916200034d565b6001600160a01b038116158015906200005557506001600160a01b03821615155b6200008b5760405162461bcd60e51b81526020600482015260016024820152600360fc1b60448201526064015b60405180910390fd5b6000835111620000c35760405162461bcd60e51b8152602060048201526002602482015261343760f01b604482015260640162000082565b6001600160601b0319606082901b16608052620000f060008051602062002dc3833981519152806200022c565b6200011a60008051602062002de383398151915260008051602062002dc38339815191526200022c565b60005b8351811015620002075760006001600160a01b031684828151811062000147576200014762000476565b60200260200101516001600160a01b031614156200018c5760405162461bcd60e51b81526020600482015260016024820152600360fc1b604482015260640162000082565b620001c960008051602062002dc3833981519152858381518110620001b557620001b562000476565b60200260200101516200028060201b60201c565b620001f260008051602062002de3833981519152858381518110620001b557620001b562000476565b80620001fe816200044c565b9150506200011d565b506200022360008051602062002de38339815191528362000280565b505050620004a2565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6200028c828262000290565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200028c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002ec3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200034857600080fd5b919050565b6000806000606084860312156200036357600080fd5b83516001600160401b03808211156200037b57600080fd5b818601915086601f8301126200039057600080fd5b8151602082821115620003a757620003a76200048c565b8160051b604051601f19603f83011681018181108682111715620003cf57620003cf6200048c565b604052838152828101945085830182870184018c1015620003ef57600080fd5b600096505b848710156200041d57620004088162000330565b865260019690960195948301948301620003f4565b5097506200042f905088820162000330565b955050505050620004436040850162000330565b90509250925092565b60006000198214156200046f57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160601c6128d1620004f2600039600081816104110152818161088a01528181610bb001528181610e6b01528181610efc01528181610fe00152818161129c0152611f2001526128d16000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80634c6a92e6116100d8578063ccc574901161008c578063d547741f11610066578063d547741f146103e6578063e35c9b44146103f9578063f7c618c11461040c57600080fd5b8063ccc5749014610374578063cd9566591461039b578063d247e0f8146103d357600080fd5b80636ea334bd116100bd5780636ea334bd1461030557806391d1485414610318578063a217fddf1461036c57600080fd5b80634c6a92e6146102df57806367a5cd06146102f257600080fd5b80633a8117df1161012f5780633de7126b116101145780633de7126b146102a657806342109f12146102b95780634b3c8c94146102cc57600080fd5b80633a8117df146102145780633b4afe081461022757600080fd5b806324ea54f41161016057806324ea54f4146101c75780632f2ff15d146101ee57806336568abe1461020157600080fd5b80631090c2c01461017c578063248a9ca314610191575b600080fd5b61018f61018a366004612524565b610433565b005b6101b461019f36600461250b565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b6101b47f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b61018f6101fc366004612524565b61054c565b61018f61020f366004612524565b610577565b61018f610222366004612524565b610604565b610271610235366004612435565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492939192909187565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016101be565b61018f6102b43660046124a5565b610778565b61018f6102c7366004612452565b610ac1565b61018f6102da366004612435565b610b83565b61018f6102ed366004612524565b610f68565b6101b4610300366004612435565b611007565b61018f610313366004612524565b6113a0565b61035c610326366004612524565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b60405190151581526020016101be565b6101b4600081565b6101b47f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6103ae6103a936600461250b565b6115f4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101be565b61018f6103e1366004612524565b61162b565b61018f6103f4366004612524565b6117a3565b61018f610407366004612435565b6117c9565b6103ae7f000000000000000000000000000000000000000000000000000000000000000081565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161045e8133611b39565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902060058101546104f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6003810184905560405184815273ffffffffffffffffffffffffffffffffffffffff8416907fd9536e856b2ef83701ab78868596ba05039859709dc5f8406a69c668c09c7c5e906020015b60405180910390a250505050565b6000828152602081905260409020600101546105688133611b39565b6105728383611c09565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146105f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6106008282611cf9565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161062f8133611b39565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902060058101546106bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b80548411610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383800000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6006810184905560405184815273ffffffffffffffffffffffffffffffffffffffff8416907fbb413288279da18c017bf38bbdd947481ef17687929444fa26d433ae92e9e4079060200161053e565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556107a38133611b39565b6000851161080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383500000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b82851015801561081d5750824210155b610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383600000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b60008690507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612554565b73ffffffffffffffffffffffffffffffffffffffff16146109ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383300000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902060028101859055600381018690556109f78542612708565b6001820155610a068542612708565b600482015560058101879055600681018490556002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85811691909117909155604051908a16917ff228d09c7f9308ef1c29067a996fb4332eab58e7a67d0b405cf84ffba2fd205691a25050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610aec8133611b39565b6040517f1171bda900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015260448201859052831690631171bda990606401600060405180830381600087803b158015610b6457600080fd5b505af1158015610b78573d6000803e3d6000fd5b505050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610bae8133611b39565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2b57600080fd5b505afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190612554565b73ffffffffffffffffffffffffffffffffffffffff1614610ce0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383300000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b73ffffffffffffffffffffffffffffffffffffffff8216301415610d60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383400000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b60005b600254811015610e215760028181548110610d8057610d8061281b565b6000918252602090912001546040517f873291bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063873291bb90602401600060405180830381600087803b158015610df657600080fd5b505af1158015610e0a573d6000803e3d6000fd5b505050508080610e1990612784565b915050610d63565b506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610f2390839073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190612571565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169190611db0565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f058fa9577dc29aece41d41c2d3bff2ed4e8d5085762198e8f7faab35039555da90600090a25050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610f938133611b39565b6040518381527fc153761d6d1b89a5525acd53d2bec7b851c0f72a52e13c3c9663ac0e08b42a2b9060200160405180910390a161057273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168385611db0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206005810154611097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526110ec90611e3d565b611152576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383100000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526000906111aa90611e51565b426001840155905080611219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383200000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b8082600001600082825461122d9190612678565b90915550506040805182815273ffffffffffffffffffffffffffffffffffffffff8616602082015233917f9fa52952803bc57696c9fd3c1c2d8287f2d795d0d9a40e32750f25eba46b6630910160405180910390a26112c373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168583611db0565b6040517f3c6b16ab0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff851690633c6b16ab90602401600060405180830381600087803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b50506040805160e08101825285548152600186015460208201526002860154918101919091526003850154606082015260048501546080820152600585015460a0820152600685015460c082015261139992509050611f00565b9392505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416113cb8133611b39565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020600581015461145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b80600201548410156114c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383700000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260009061152190611f4b565b905081600501548110801561153557508481105b61159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f363600000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6005820185905560405185815273ffffffffffffffffffffffffffffffffffffffff8516907fbee09afa44760aa24732e07ec15b6fa5f4432550051c3a0d1a08a50326a1defb9060200160405180910390a25050505050565b6002818154811061160457600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416116568133611b39565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902060058101546116e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b8381600501541015611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383700000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6002810184905560405184815273ffffffffffffffffffffffffffffffffffffffff8416907fbfd33a2575f88c85e7e7e86d842b48bf98c1ef211bc56e33211acd0e0bd31f7c9060200161053e565b6000828152602081905260409020600101546117bf8133611b39565b6105728383611cf9565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556117f48133611b39565b6002546000906001811015611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b60005b611873600183612708565b811015611984578473ffffffffffffffffffffffffffffffffffffffff16600282815481106118a4576118a461281b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415611972576001925060026118dc8484612708565b815481106118ec576118ec61281b565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff90921691839081106119255761192561281b565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611984565b8061197c81612784565b915050611868565b5081600114806119e7575073ffffffffffffffffffffffffffffffffffffffff841660026119b3600184612708565b815481106119c3576119c361281b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b611a4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6002805480611a5e57611a5e6127ec565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff86168083526001918290526040808420848155928301849055600283018490556003830184905560048301849055600583018490556006909201839055905190917f0847cc014e998c8a980971cc19d157bd4f42f7c9927dded789e9f88a941bf14691a250505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661060057611b8f8173ffffffffffffffffffffffffffffffffffffffff166014611f7e565b611b9a836020611f7e565b604051602001611bab9291906125a6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526104ea91600401612627565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106005760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611c9b3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106005760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105729084906121c1565b6000611e48826122cd565b42101592915050565b60008160c00151826000015110611e6a57506000919050565b60008260a00151836020015142611e819190612708565b8460c00151611e9091906126cb565b611e9a9190612690565b90506000611ea784611f4b565b8460a00151611eb69190612708565b9050600084600001518560c00151611ece9190612708565b90508460400151821080611ee157508281105b80611eea575081155b15611ef757949350505050565b50909392505050565b6060810151611f489073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016903390611db0565b50565b60a08101516080820151600091908290611f659042612708565b9050818111611f745780611f76565b815b949350505050565b60606000611f8d8360026126cb565b611f98906002612678565b67ffffffffffffffff811115611fb057611fb061284a565b6040519080825280601f01601f191660200182016040528015611fda576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120115761201161281b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120745761207461281b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006120b08460026126cb565b6120bb906001612678565b90505b6001811115612158577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106120fc576120fc61281b565b1a60f81b8282815181106121125761211261281b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936121518161274f565b90506120be565b508315611399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104ea565b6000612223826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122e99092919063ffffffff16565b805190915015610572578080602001905181019061224191906124e9565b610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104ea565b6000816040015182602001516122e39190612678565b92915050565b6060611f76848460008585843b61235c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ea565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612385919061258a565b60006040518083038185875af1925050503d80600081146123c2576040519150601f19603f3d011682016040523d82523d6000602084013e6123c7565b606091505b50915091506123d78282866123e2565b979650505050505050565b606083156123f1575081611399565b8251156124015782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea9190612627565b60006020828403121561244757600080fd5b813561139981612879565b6000806000806080858703121561246857600080fd5b843561247381612879565b9350602085013561248381612879565b925060408501359150606085013561249a81612879565b939692955090935050565b600080600080600060a086880312156124bd57600080fd5b85356124c881612879565b97602087013597506040870135966060810135965060800135945092505050565b6000602082840312156124fb57600080fd5b8151801515811461139957600080fd5b60006020828403121561251d57600080fd5b5035919050565b6000806040838503121561253757600080fd5b82359150602083013561254981612879565b809150509250929050565b60006020828403121561256657600080fd5b815161139981612879565b60006020828403121561258357600080fd5b5051919050565b6000825161259c81846020870161271f565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125de81601785016020880161271f565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161261b81602884016020880161271f565b01602801949350505050565b602081526000825180602084015261264681604085016020870161271f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561268b5761268b6127bd565b500190565b6000826126c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612703576127036127bd565b500290565b60008282101561271a5761271a6127bd565b500390565b60005b8381101561273a578181015183820152602001612722565b83811115612749576000848401525b50505050565b60008161275e5761275e6127bd565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127b6576127b66127bd565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114611f4857600080fdfea2646970667358221220921910580aa59f834d1ebbde619478225f880a64b1655f7c80f72bc1097ab4cc64736f6c634300080700337935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5555435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80634c6a92e6116100d8578063ccc574901161008c578063d547741f11610066578063d547741f146103e6578063e35c9b44146103f9578063f7c618c11461040c57600080fd5b8063ccc5749014610374578063cd9566591461039b578063d247e0f8146103d357600080fd5b80636ea334bd116100bd5780636ea334bd1461030557806391d1485414610318578063a217fddf1461036c57600080fd5b80634c6a92e6146102df57806367a5cd06146102f257600080fd5b80633a8117df1161012f5780633de7126b116101145780633de7126b146102a657806342109f12146102b95780634b3c8c94146102cc57600080fd5b80633a8117df146102145780633b4afe081461022757600080fd5b806324ea54f41161016057806324ea54f4146101c75780632f2ff15d146101ee57806336568abe1461020157600080fd5b80631090c2c01461017c578063248a9ca314610191575b600080fd5b61018f61018a366004612524565b610433565b005b6101b461019f36600461250b565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b6101b47f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b61018f6101fc366004612524565b61054c565b61018f61020f366004612524565b610577565b61018f610222366004612524565b610604565b610271610235366004612435565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492939192909187565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016101be565b61018f6102b43660046124a5565b610778565b61018f6102c7366004612452565b610ac1565b61018f6102da366004612435565b610b83565b61018f6102ed366004612524565b610f68565b6101b4610300366004612435565b611007565b61018f610313366004612524565b6113a0565b61035c610326366004612524565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b60405190151581526020016101be565b6101b4600081565b6101b47f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6103ae6103a936600461250b565b6115f4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101be565b61018f6103e1366004612524565b61162b565b61018f6103f4366004612524565b6117a3565b61018f610407366004612435565b6117c9565b6103ae7f000000000000000000000000000000000000000000000000000000000000000081565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161045e8133611b39565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902060058101546104f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6003810184905560405184815273ffffffffffffffffffffffffffffffffffffffff8416907fd9536e856b2ef83701ab78868596ba05039859709dc5f8406a69c668c09c7c5e906020015b60405180910390a250505050565b6000828152602081905260409020600101546105688133611b39565b6105728383611c09565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146105f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6106008282611cf9565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161062f8133611b39565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902060058101546106bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b80548411610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383800000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6006810184905560405184815273ffffffffffffffffffffffffffffffffffffffff8416907fbb413288279da18c017bf38bbdd947481ef17687929444fa26d433ae92e9e4079060200161053e565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556107a38133611b39565b6000851161080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383500000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b82851015801561081d5750824210155b610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383600000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b60008690507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612554565b73ffffffffffffffffffffffffffffffffffffffff16146109ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383300000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902060028101859055600381018690556109f78542612708565b6001820155610a068542612708565b600482015560058101879055600681018490556002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85811691909117909155604051908a16917ff228d09c7f9308ef1c29067a996fb4332eab58e7a67d0b405cf84ffba2fd205691a25050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610aec8133611b39565b6040517f1171bda900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015260448201859052831690631171bda990606401600060405180830381600087803b158015610b6457600080fd5b505af1158015610b78573d6000803e3d6000fd5b505050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610bae8133611b39565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2b57600080fd5b505afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190612554565b73ffffffffffffffffffffffffffffffffffffffff1614610ce0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383300000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b73ffffffffffffffffffffffffffffffffffffffff8216301415610d60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383400000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b60005b600254811015610e215760028181548110610d8057610d8061281b565b6000918252602090912001546040517f873291bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063873291bb90602401600060405180830381600087803b158015610df657600080fd5b505af1158015610e0a573d6000803e3d6000fd5b505050508080610e1990612784565b915050610d63565b506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610f2390839073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190612571565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169190611db0565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f058fa9577dc29aece41d41c2d3bff2ed4e8d5085762198e8f7faab35039555da90600090a25050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610f938133611b39565b6040518381527fc153761d6d1b89a5525acd53d2bec7b851c0f72a52e13c3c9663ac0e08b42a2b9060200160405180910390a161057273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168385611db0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206005810154611097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526110ec90611e3d565b611152576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383100000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526000906111aa90611e51565b426001840155905080611219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383200000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b8082600001600082825461122d9190612678565b90915550506040805182815273ffffffffffffffffffffffffffffffffffffffff8616602082015233917f9fa52952803bc57696c9fd3c1c2d8287f2d795d0d9a40e32750f25eba46b6630910160405180910390a26112c373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168583611db0565b6040517f3c6b16ab0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff851690633c6b16ab90602401600060405180830381600087803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b50506040805160e08101825285548152600186015460208201526002860154918101919091526003850154606082015260048501546080820152600585015460a0820152600685015460c082015261139992509050611f00565b9392505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416113cb8133611b39565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020600581015461145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b80600201548410156114c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383700000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260009061152190611f4b565b905081600501548110801561153557508481105b61159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f363600000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6005820185905560405185815273ffffffffffffffffffffffffffffffffffffffff8516907fbee09afa44760aa24732e07ec15b6fa5f4432550051c3a0d1a08a50326a1defb9060200160405180910390a25050505050565b6002818154811061160457600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416116568133611b39565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902060058101546116e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b8381600501541015611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383700000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6002810184905560405184815273ffffffffffffffffffffffffffffffffffffffff8416907fbfd33a2575f88c85e7e7e86d842b48bf98c1ef211bc56e33211acd0e0bd31f7c9060200161053e565b6000828152602081905260409020600101546117bf8133611b39565b6105728383611cf9565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556117f48133611b39565b6002546000906001811015611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b60005b611873600183612708565b811015611984578473ffffffffffffffffffffffffffffffffffffffff16600282815481106118a4576118a461281b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415611972576001925060026118dc8484612708565b815481106118ec576118ec61281b565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff90921691839081106119255761192561281b565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611984565b8061197c81612784565b915050611868565b5081600114806119e7575073ffffffffffffffffffffffffffffffffffffffff841660026119b3600184612708565b815481106119c3576119c361281b565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b611a4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383000000000000000000000000000000000000000000000000000000000000060448201526064016104ea565b6002805480611a5e57611a5e6127ec565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff86168083526001918290526040808420848155928301849055600283018490556003830184905560048301849055600583018490556006909201839055905190917f0847cc014e998c8a980971cc19d157bd4f42f7c9927dded789e9f88a941bf14691a250505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661060057611b8f8173ffffffffffffffffffffffffffffffffffffffff166014611f7e565b611b9a836020611f7e565b604051602001611bab9291906125a6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526104ea91600401612627565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106005760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611c9b3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106005760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105729084906121c1565b6000611e48826122cd565b42101592915050565b60008160c00151826000015110611e6a57506000919050565b60008260a00151836020015142611e819190612708565b8460c00151611e9091906126cb565b611e9a9190612690565b90506000611ea784611f4b565b8460a00151611eb69190612708565b9050600084600001518560c00151611ece9190612708565b90508460400151821080611ee157508281105b80611eea575081155b15611ef757949350505050565b50909392505050565b6060810151611f489073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016903390611db0565b50565b60a08101516080820151600091908290611f659042612708565b9050818111611f745780611f76565b815b949350505050565b60606000611f8d8360026126cb565b611f98906002612678565b67ffffffffffffffff811115611fb057611fb061284a565b6040519080825280601f01601f191660200182016040528015611fda576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120115761201161281b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120745761207461281b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006120b08460026126cb565b6120bb906001612678565b90505b6001811115612158577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106120fc576120fc61281b565b1a60f81b8282815181106121125761211261281b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936121518161274f565b90506120be565b508315611399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104ea565b6000612223826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122e99092919063ffffffff16565b805190915015610572578080602001905181019061224191906124e9565b610572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104ea565b6000816040015182602001516122e39190612678565b92915050565b6060611f76848460008585843b61235c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ea565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612385919061258a565b60006040518083038185875af1925050503d80600081146123c2576040519150601f19603f3d011682016040523d82523d6000602084013e6123c7565b606091505b50915091506123d78282866123e2565b979650505050505050565b606083156123f1575081611399565b8251156124015782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea9190612627565b60006020828403121561244757600080fd5b813561139981612879565b6000806000806080858703121561246857600080fd5b843561247381612879565b9350602085013561248381612879565b925060408501359150606085013561249a81612879565b939692955090935050565b600080600080600060a086880312156124bd57600080fd5b85356124c881612879565b97602087013597506040870135966060810135965060800135945092505050565b6000602082840312156124fb57600080fd5b8151801515811461139957600080fd5b60006020828403121561251d57600080fd5b5035919050565b6000806040838503121561253757600080fd5b82359150602083013561254981612879565b809150509250929050565b60006020828403121561256657600080fd5b815161139981612879565b60006020828403121561258357600080fd5b5051919050565b6000825161259c81846020870161271f565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125de81601785016020880161271f565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161261b81602884016020880161271f565b01602801949350505050565b602081526000825180602084015261264681604085016020870161271f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561268b5761268b6127bd565b500190565b6000826126c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612703576127036127bd565b500290565b60008282101561271a5761271a6127bd565b500390565b60005b8381101561273a578181015183820152602001612722565b83811115612749576000848401525b50505050565b60008161275e5761275e6127bd565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127b6576127b66127bd565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114611f4857600080fdfea2646970667358221220921910580aa59f834d1ebbde619478225f880a64b1655f7c80f72bc1097ab4cc64736f6c63430008070033",
  "devdoc": {
    "author": "Angle Core Team (forked form FEI Protocol)",
    "details": "Inspired from FEI contract: https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/FeiRewardsDistributor.sol",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "governorList": "List of the governor addresses of the protocol",
          "guardian": "The guardian address, optional",
          "rewardTokenAddress": "The ERC20 token to distribute"
        }
      },
      "drip(address)": {
        "details": "The way to pause this function is to set `updateFrequency` to infinity, or to completely delete the contractA keeper calling this function could be frontran by a miner seeing the potential profit from calling this functionThis function automatically computes the amount of reward tokens to send to the staking contract based on the time elapsed since the last drip, on the amount to distribute and on the duration of the distribution",
        "params": { "stakingContract": "Reference to the staking contract" }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "governorRecover(address,address,uint256,address)": {
        "details": "A use case would be to claim tokens if the staked tokens accumulate rewards or if tokens were mistakenly sent to staking contracts",
        "params": {
          "amount": "Amount to transfer",
          "stakingContract": "Reference to the staking contract",
          "to": "Address to transfer to",
          "tokenAddress": "Address of the ERC20 to recover"
        }
      },
      "governorWithdrawRewardToken(uint256,address)": {
        "details": "Only callable by governance and not by the guardian",
        "params": { "amount": "Amount of tokens to send back to treasury", "to": "Address to send the tokens to" }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "removeStakingContract(address)": {
        "details": "Allows to clean some space and to avoid keeping in memory contracts which became uselessIt is also a way governance has to completely stop rewards distribution from a contract",
        "params": { "stakingContract": "Contract to remove" }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAmountToDistribute(uint256,address)": {
        "params": {
          "_amountToDistribute": "New amount to distribute",
          "stakingContract": "Reference to the staking contract"
        }
      },
      "setDuration(uint256,address)": {
        "params": { "_duration": "New duration", "stakingContract": "Reference to the staking contract" }
      },
      "setIncentiveAmount(uint256,address)": {
        "params": { "_incentiveAmount": "New incentive amount", "stakingContract": "Reference to the staking contract" }
      },
      "setNewRewardsDistributor(address)": {
        "details": "This contract is not upgradeable, setting a new contract could allow for upgrades, which should be propagated across all staking contractsThis function transfers all the reward tokens to the new addressThe new rewards distributor contract should be initialized correctly with all the staking contracts from the staking contract list",
        "params": { "newRewardsDistributor": "Address of the new rewards distributor contract" }
      },
      "setStakingContract(address,uint256,uint256,uint256,uint256)": {
        "details": "Called by governance to activate a contractAfter setting a new staking contract, everything is as if the contract had already been set for `_updateFrequency` meaning that it is possible to `drip` the staking contract immediately after that",
        "params": {
          "_amountToDistribute": "Amount of gov tokens to give to the staking contract across all drips",
          "_duration": "Time frame during which tokens will be distributed",
          "_incentiveAmount": "Incentive amount given to keepers calling the update function",
          "_stakingContract": "Address of the staking contract",
          "_updateFrequency": "Frequency when it is possible to call the update function and give tokens to the staking contract"
        }
      },
      "setUpdateFrequency(uint256,address)": {
        "params": { "_updateFrequency": "New update frequency", "stakingContract": "Reference to the staking contract" }
      }
    },
    "title": "RewardsDistributor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "GOVERNOR_ROLE()": { "notice": "Role for governors only" },
      "GUARDIAN_ROLE()": { "notice": "Role for guardians and governors" },
      "constructor": { "notice": "Initializes the distributor contract with a first set of parameters" },
      "drip(address)": { "notice": "Sends reward tokens to the staking contract" },
      "governorRecover(address,address,uint256,address)": {
        "notice": "Function to withdraw ERC20 tokens that could accrue on a staking contract"
      },
      "governorWithdrawRewardToken(uint256,address)": {
        "notice": "Sends tokens back to governance treasury or another address"
      },
      "removeStakingContract(address)": {
        "notice": "Deletes a staking contract from the staking contract map and removes it from the `stakingContractsList`"
      },
      "rewardToken()": { "notice": "Token used as a reward" },
      "setAmountToDistribute(uint256,address)": { "notice": "Sets the new amount to distribute to a staking contract" },
      "setDuration(uint256,address)": {
        "notice": "Sets the new duration with which tokens will be distributed to the staking contract"
      },
      "setIncentiveAmount(uint256,address)": { "notice": "Sets the incentive amount for calling drip" },
      "setNewRewardsDistributor(address)": {
        "notice": "Sets a new rewards distributor contract and automatically makes this contract useless"
      },
      "setStakingContract(address,uint256,uint256,uint256,uint256)": {
        "notice": "Notifies and initializes a new staking contract"
      },
      "setUpdateFrequency(uint256,address)": { "notice": "Sets the update frequency" },
      "stakingContractsList(uint256)": {
        "notice": "List of all the staking contracts handled by the rewards distributor Used to be able to change the rewards distributor and propagate a new reference to the underlying staking contract"
      },
      "stakingContractsMap(address)": { "notice": "Maps a `StakingContract` to its distribution parameters" }
    },
    "notice": "Controls and handles the distribution of governance tokens to the different staking contracts of the protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16352,
        "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)16347_storage)"
      },
      {
        "astId": 35891,
        "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
        "label": "stakingContractsMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IStakingRewards)23177,t_struct(StakingParameters)35856_storage)"
      },
      {
        "astId": 35896,
        "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
        "label": "stakingContractsList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_contract(IStakingRewards)23177)dyn_storage"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_array(t_contract(IStakingRewards)23177)dyn_storage": {
        "base": "t_contract(IStakingRewards)23177",
        "encoding": "dynamic_array",
        "label": "contract IStakingRewards[]",
        "numberOfBytes": "32"
      },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_contract(IStakingRewards)23177": {
        "encoding": "inplace",
        "label": "contract IStakingRewards",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)16347_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)16347_storage"
      },
      "t_mapping(t_contract(IStakingRewards)23177,t_struct(StakingParameters)35856_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IStakingRewards)23177",
        "label": "mapping(contract IStakingRewards => struct StakingParameters)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingParameters)35856_storage"
      },
      "t_struct(RoleData)16347_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16344,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16346,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakingParameters)35856_storage": {
        "encoding": "inplace",
        "label": "struct StakingParameters",
        "members": [
          {
            "astId": 35843,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "distributedRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 35845,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "lastDistributionTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35847,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "updateFrequency",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 35849,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "incentiveAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 35851,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "timeStarted",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 35853,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "duration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 35855,
            "contract": "contracts/staking/RewardsDistributor.sol:RewardsDistributor",
            "label": "amountToDistribute",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" }
    }
  }
}
