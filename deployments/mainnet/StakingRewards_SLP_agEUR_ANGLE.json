{
  "address": "0xA86CC1ae2D94C6ED2aB3bF68fB128c2825673267",
  "abi": [
    {
      "inputs": [
        { "internalType": "address", "name": "_rewardsDistribution", "type": "address" },
        { "internalType": "address", "name": "_rewardToken", "type": "address" },
        { "internalType": "address", "name": "_stakingToken", "type": "address" },
        { "internalType": "uint256", "name": "_rewardsDuration", "type": "uint256" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "uint256", "name": "reward", "type": "uint256" }],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "user", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "reward", "type": "uint256" }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "_rewardsDistribution", "type": "address" }],
      "name": "RewardsDistributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "user", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "user", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
      "name": "balanceOf",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
      "name": "earned",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "exit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "getReward", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "reward", "type": "uint256" }],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "rewards",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDistribution",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "_rewardsDistribution", "type": "address" }],
      "name": "setNewRewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "amount", "type": "uint256" },
        { "internalType": "address", "name": "onBehalf", "type": "address" }
      ],
      "name": "stakeOnBehalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingBase",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "userRewardPerTokenPaid",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x76f7be97aa932964eb19d0bd5f4017f4ea55a5526722d8925a1c25242739f7a7",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xA86CC1ae2D94C6ED2aB3bF68fB128c2825673267",
    "transactionIndex": 153,
    "gasUsed": "1550254",
    "logsBloom": "0x
    "blockHash": "0x39fc443b92e75f1db603a251a4a02c08866a0196dc2cf6bf87967b921bc460aa",
    "transactionHash": "0x76f7be97aa932964eb19d0bd5f4017f4ea55a5526722d8925a1c25242739f7a7",
    "logs": [],
    "blockNumber": 13582900,
    "cumulativeGasUsed": "11534478",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC06481fc1D0196C138770fD2148DCB306cB24E20",
    "0x31429d1856aD1377A8A0079410B297e1a9e214c2",
    "0x1f4c763bde1d4832b3ea0640e66da00b98831355",
    "606000"
  ],
  "solcInputHash": "e281d18b7b4209f86d24ee132ca15bd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"RewardsDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setNewRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"}],\"name\":\"stakeOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Forked form SetProtocol https://github.com/SetProtocol/index-coop-contracts/blob/master/contracts/staking/StakingRewards.sol\",\"details\":\"This contracts is managed by the reward distributor and implements the staking interface\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Used instead of having a public variable to respect the ERC20 standard\",\"params\":{\"account\":\"Account to query the balance of\"}},\"constructor\":{\"params\":{\"_rewardToken\":\"ERC20 token given as reward\",\"_rewardsDistribution\":\"Address owning the rewards token\",\"_rewardsDuration\":\"Duration of the staking contract\",\"_stakingToken\":\"ERC20 token used for staking\"}},\"earned(address)\":{\"details\":\"It adds to the rewards the amount of reward earned since last time that is the difference in reward per token from now and last time multiplied by the number of tokens staked by the person\",\"params\":{\"account\":\"Address for which the request is made\"},\"returns\":{\"_0\":\"How much a given account earned rewards\"}},\"exit()\":{\"details\":\"This function lets the caller withdraw its staking and claim rewards\"},\"lastTimeRewardApplicable()\":{\"details\":\"Returns the current timestamp if a reward is being distributed and the end of the staking period if staking is done\"},\"notifyRewardAmount(uint256)\":{\"details\":\"This reward will be distributed during `rewardsDuration` set previously\",\"params\":{\"reward\":\"Amount of reward tokens to distribute\"}},\"recoverERC20(address,address,uint256)\":{\"details\":\"A use case would be to claim tokens if the staked tokens accumulate rewards\",\"params\":{\"amount\":\"Amount to transfer\",\"to\":\"Address to transfer to\",\"tokenAddress\":\"Address of the ERC20 token to withdraw\"}},\"rewardPerToken()\":{\"details\":\"It adds to the reward per token: the time elapsed since the `rewardPerTokenStored` was last updated multiplied by the `rewardRate` divided by the number of tokens\"},\"setNewRewardsDistribution(address)\":{\"details\":\"This function was also added by Angle Core TeamA compatibility check of the reward token is already performed in the current `RewardsDistributor` implementation which has right to call this function\",\"params\":{\"_rewardsDistribution\":\"Address of the new rewards distributor contract\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount of ERC20 staking token that the `msg.sender` wants to stake\"}},\"stakeOnBehalf(uint256,address)\":{\"params\":{\"amount\":\"Amount to stake\",\"onBehalf\":\"Address to stake onBehalf of\"}},\"totalSupply()\":{\"details\":\"Used instead of having a public variable to respect the ERC20 standard\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of the ERC20 staking token that the `msg.sender` wants to withdraw\"}}},\"title\":\"StakingRewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Accesses the number of token staked by an account\"},\"constructor\":{\"notice\":\"Initializes the staking contract with a first set of parameters\"},\"earned(address)\":{\"notice\":\"Returns how much a given account earned rewards\"},\"exit()\":{\"notice\":\"Exits someone\"},\"getReward()\":{\"notice\":\"Triggers a payment of the reward earned to the msg.sender\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Queries the last timestamp at which a reward was distributed\"},\"lastUpdateTime()\":{\"notice\":\"Last time `rewardPerTokenStored` was updated\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Adds rewards to be distributed\"},\"periodFinish()\":{\"notice\":\"Time at which distribution ends\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens that could accrue on this contract\"},\"rewardPerToken()\":{\"notice\":\"Used to actualize the `rewardPerTokenStored`\"},\"rewardPerTokenStored()\":{\"notice\":\"Helps to compute the amount earned by someone Cumulates rewards accumulated for one token since the beginning. Stored as a uint so it is actually a float times the base of the reward token\"},\"rewardRate()\":{\"notice\":\"Reward per second given to the staking contract, split among the staked tokens\"},\"rewardToken()\":{\"notice\":\"ERC20 token given as reward\"},\"rewards(address)\":{\"notice\":\"Stores for each account the accumulated rewards\"},\"rewardsDistribution()\":{\"notice\":\"Rewards Distribution contract for this staking contract\"},\"rewardsDuration()\":{\"notice\":\"Duration of the reward distribution\"},\"setNewRewardsDistribution(address)\":{\"notice\":\"Changes the rewards distributor associated to this contract\"},\"stake(uint256)\":{\"notice\":\"Lets someone stake a given amount of `stakingTokens`\"},\"stakeOnBehalf(uint256,address)\":{\"notice\":\"Allows to stake on behalf of another address\"},\"stakingBase()\":{\"notice\":\"Base of the staked token, it is going to be used in the case of sanTokens which are not in base 10**18\"},\"stakingToken()\":{\"notice\":\"ERC20 token used for staking\"},\"totalSupply()\":{\"notice\":\"Accesses the total supply\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"Stores for each account the `rewardPerToken`: we do the difference between the current and the old value to compute what has been earned by an account\"},\"withdraw(uint256)\":{\"notice\":\"Lets a user withdraw a given amount of collateral from the staking contract\"}},\"notice\":\"The `StakingRewards` contracts allows to stake an ERC20 token to receive as reward another ERC20\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14f6a40365c520e587ddc50dbe238cea9dcd5f6b99961528376d68566b10051b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n/// @title IRewardsDistributor\\n/// @author Angle Core Team, inspired from Fei protocol\\n/// (https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/IRewardsDistributor.sol)\\n/// @notice Rewards Distributor interface\\ninterface IRewardsDistributor {\\n    // ========================= Public Parameter Getter ===========================\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    // ======================== External User Available Function ===================\\n\\n    function drip(IStakingRewards stakingContract) external returns (uint256);\\n\\n    // ========================= Governor Functions ================================\\n\\n    function governorWithdrawRewardToken(uint256 amount, address governance) external;\\n\\n    function governorRecover(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        IStakingRewards stakingContract\\n    ) external;\\n\\n    function setUpdateFrequency(uint256 _frequency, IStakingRewards stakingContract) external;\\n\\n    function setIncentiveAmount(uint256 _incentiveAmount, IStakingRewards stakingContract) external;\\n\\n    function setAmountToDistribute(uint256 _amountToDistribute, IStakingRewards stakingContract) external;\\n\\n    function setDuration(uint256 _duration, IStakingRewards stakingContract) external;\\n\\n    function setStakingContract(\\n        address _stakingContract,\\n        uint256 _duration,\\n        uint256 _incentiveAmount,\\n        uint256 _dripFrequency,\\n        uint256 _amountToDistribute\\n    ) external;\\n\\n    function setNewRewardsDistributor(address newRewardsDistributor) external;\\n\\n    function removeStakingContract(IStakingRewards stakingContract) external;\\n}\\n\",\"keccak256\":\"0xe0ef7acff13bc1a56b361519b0438d53fbacc9c89094d67b1df15e4e89384abb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IStakingRewardsFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\\ninterface IStakingRewardsFunctions {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function setNewRewardsDistribution(address newRewardsDistribution) external;\\n}\\n\\n/// @title IStakingRewards\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IStakingRewards is IStakingRewardsFunctions {\\n    function rewardToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xade33925dd7db841ece4880f783d9b6795db17c1189961ff43f760a44943700c\",\"license\":\"GPL-3.0\"},\"contracts/staking/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./StakingRewardsEvents.sol\\\";\\n\\n/// @title StakingRewards\\n/// @author Forked form SetProtocol\\n/// https://github.com/SetProtocol/index-coop-contracts/blob/master/contracts/staking/StakingRewards.sol\\n/// @notice The `StakingRewards` contracts allows to stake an ERC20 token to receive as reward another ERC20\\n/// @dev This contracts is managed by the reward distributor and implements the staking interface\\ncontract StakingRewards is StakingRewardsEvents, IStakingRewards, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Checks to see if it is the `rewardsDistribution` calling this contract\\n    /// @dev There is no Access Control here, because it can be handled cheaply through these modifiers\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"1\\\");\\n        _;\\n    }\\n\\n    // ============================ References to contracts ========================\\n\\n    /// @notice ERC20 token given as reward\\n    IERC20 public immutable override rewardToken;\\n\\n    /// @notice ERC20 token used for staking\\n    IERC20 public immutable stakingToken;\\n\\n    /// @notice Base of the staked token, it is going to be used in the case of sanTokens\\n    /// which are not in base 10**18\\n    uint256 public immutable stakingBase;\\n\\n    /// @notice Rewards Distribution contract for this staking contract\\n    address public rewardsDistribution;\\n\\n    // ============================ Staking parameters =============================\\n\\n    /// @notice Time at which distribution ends\\n    uint256 public periodFinish;\\n\\n    /// @notice Reward per second given to the staking contract, split among the staked tokens\\n    uint256 public rewardRate;\\n\\n    /// @notice Duration of the reward distribution\\n    uint256 public rewardsDuration;\\n\\n    /// @notice Last time `rewardPerTokenStored` was updated\\n    uint256 public lastUpdateTime;\\n\\n    /// @notice Helps to compute the amount earned by someone\\n    /// Cumulates rewards accumulated for one token since the beginning.\\n    /// Stored as a uint so it is actually a float times the base of the reward token\\n    uint256 public rewardPerTokenStored;\\n\\n    /// @notice Stores for each account the `rewardPerToken`: we do the difference\\n    /// between the current and the old value to compute what has been earned by an account\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    /// @notice Stores for each account the accumulated rewards\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @notice Initializes the staking contract with a first set of parameters\\n    /// @param _rewardsDistribution Address owning the rewards token\\n    /// @param _rewardToken ERC20 token given as reward\\n    /// @param _stakingToken ERC20 token used for staking\\n    /// @param _rewardsDuration Duration of the staking contract\\n    constructor(\\n        address _rewardsDistribution,\\n        address _rewardToken,\\n        address _stakingToken,\\n        uint256 _rewardsDuration\\n    ) {\\n        require(_stakingToken != address(0) && _rewardToken != address(0) && _rewardsDistribution != address(0), \\\"0\\\");\\n\\n        // We are not checking the compatibility of the reward token between the distributor and this contract here\\n        // because it is checked by the `RewardsDistributor` when activating the staking contract\\n        // Parameters\\n        rewardToken = IERC20(_rewardToken);\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsDuration = _rewardsDuration;\\n        rewardsDistribution = _rewardsDistribution;\\n\\n        stakingBase = 10**IERC20Metadata(_stakingToken).decimals();\\n    }\\n\\n    // ============================ Modifiers ======================================\\n\\n    /// @notice Checks to see if the calling address is the zero address\\n    /// @param account Address to check\\n    modifier zeroCheck(address account) {\\n        require(account != address(0), \\\"0\\\");\\n        _;\\n    }\\n\\n    /// @notice Called frequently to update the staking parameters associated to an address\\n    /// @param account Address of the account to update\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    // ============================ View functions =================================\\n\\n    /// @notice Accesses the total supply\\n    /// @dev Used instead of having a public variable to respect the ERC20 standard\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Accesses the number of token staked by an account\\n    /// @param account Account to query the balance of\\n    /// @dev Used instead of having a public variable to respect the ERC20 standard\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice Queries the last timestamp at which a reward was distributed\\n    /// @dev Returns the current timestamp if a reward is being distributed and the end of the staking\\n    /// period if staking is done\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    /// @notice Used to actualize the `rewardPerTokenStored`\\n    /// @dev It adds to the reward per token: the time elapsed since the `rewardPerTokenStored` was\\n    /// last updated multiplied by the `rewardRate` divided by the number of tokens\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * stakingBase) / _totalSupply);\\n    }\\n\\n    /// @notice Returns how much a given account earned rewards\\n    /// @param account Address for which the request is made\\n    /// @return How much a given account earned rewards\\n    /// @dev It adds to the rewards the amount of reward earned since last time that is the difference\\n    /// in reward per token from now and last time multiplied by the number of tokens staked by the person\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) /\\n            stakingBase +\\n            rewards[account];\\n    }\\n\\n    // ======================== Mutative functions forked ==========================\\n\\n    /// @notice Lets someone stake a given amount of `stakingTokens`\\n    /// @param amount Amount of ERC20 staking token that the `msg.sender` wants to stake\\n    function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {\\n        _stake(amount, msg.sender);\\n    }\\n\\n    /// @notice Lets a user withdraw a given amount of collateral from the staking contract\\n    /// @param amount Amount of the ERC20 staking token that the `msg.sender` wants to withdraw\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"89\\\");\\n        _totalSupply = _totalSupply - amount;\\n        _balances[msg.sender] = _balances[msg.sender] - amount;\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    /// @notice Triggers a payment of the reward earned to the msg.sender\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    /// @notice Exits someone\\n    /// @dev This function lets the caller withdraw its staking and claim rewards\\n    // Attention here, there may be reentrancy attacks because of the following call\\n    // to an external contract done before other things are modified, yet since the `rewardToken`\\n    // is mostly going to be a trusted contract controlled by governance (namely the ANGLE token),\\n    // this is not an issue. If the `rewardToken` changes to an untrusted contract, this need to be updated.\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    // ====================== Functions added by Angle Core Team ===================\\n\\n    /// @notice Allows to stake on behalf of another address\\n    /// @param amount Amount to stake\\n    /// @param onBehalf Address to stake onBehalf of\\n    function stakeOnBehalf(uint256 amount, address onBehalf)\\n        external\\n        nonReentrant\\n        zeroCheck(onBehalf)\\n        updateReward(onBehalf)\\n    {\\n        _stake(amount, onBehalf);\\n    }\\n\\n    /// @notice Internal function to stake called by `stake` and `stakeOnBehalf`\\n    /// @param amount Amount to stake\\n    /// @param onBehalf Address to stake on behalf of\\n    /// @dev Before calling this function, it has already been verified whether this address was a zero address or not\\n    function _stake(uint256 amount, address onBehalf) internal {\\n        require(amount > 0, \\\"90\\\");\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        _totalSupply = _totalSupply + amount;\\n        _balances[onBehalf] = _balances[onBehalf] + amount;\\n        emit Staked(onBehalf, amount);\\n    }\\n\\n    // ====================== Restricted Functions =================================\\n\\n    /// @notice Adds rewards to be distributed\\n    /// @param reward Amount of reward tokens to distribute\\n    /// @dev This reward will be distributed during `rewardsDuration` set previously\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardsDistribution\\n        nonReentrant\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            // If no reward is currently being distributed, the new rate is just `reward / duration`\\n            rewardRate = reward / rewardsDuration;\\n        } else {\\n            // Otherwise, cancel the future reward and add the amount left to distribute to reward\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (reward + leftover) / rewardsDuration;\\n        }\\n\\n        // Ensures the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of `rewardRate` in the earned and `rewardsPerToken` functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        require(rewardRate <= balance / rewardsDuration, \\\"91\\\");\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + rewardsDuration; // Change the duration\\n        emit RewardAdded(reward);\\n    }\\n\\n    /// @notice Withdraws ERC20 tokens that could accrue on this contract\\n    /// @param tokenAddress Address of the ERC20 token to withdraw\\n    /// @param to Address to transfer to\\n    /// @param amount Amount to transfer\\n    /// @dev A use case would be to claim tokens if the staked tokens accumulate rewards\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount\\n    ) external override onlyRewardsDistribution {\\n        require(tokenAddress != address(stakingToken) && tokenAddress != address(rewardToken), \\\"20\\\");\\n\\n        IERC20(tokenAddress).safeTransfer(to, amount);\\n        emit Recovered(tokenAddress, to, amount);\\n    }\\n\\n    /// @notice Changes the rewards distributor associated to this contract\\n    /// @param _rewardsDistribution Address of the new rewards distributor contract\\n    /// @dev This function was also added by Angle Core Team\\n    /// @dev A compatibility check of the reward token is already performed in the current `RewardsDistributor` implementation\\n    /// which has right to call this function\\n    function setNewRewardsDistribution(address _rewardsDistribution) external override onlyRewardsDistribution {\\n        rewardsDistribution = _rewardsDistribution;\\n        emit RewardsDistributionUpdated(_rewardsDistribution);\\n    }\\n}\\n\",\"keccak256\":\"0x145d9165a80eb1fd923b38d3e025d2b629e516f6bb9ccc806df4ab8ac9c9cf53\",\"license\":\"GPL-3.0\"},\"contracts/staking/StakingRewardsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\n\\nimport \\\"../interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\n/// @title StakingRewardsEvents\\n/// @author Angle Core Team\\n/// @notice All the events used in `StakingRewards` contract\\ncontract StakingRewardsEvents {\\n    event RewardAdded(uint256 reward);\\n\\n    event Staked(address indexed user, uint256 amount);\\n\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n\\n    event RewardsDistributionUpdated(address indexed _rewardsDistribution);\\n}\\n\",\"keccak256\":\"0xab58e23796876e6b44fcffe84323553e9d4ffaebbb41acf10dfc9bd0623cb6df\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101975760003560e01c80637b0a47ee116100e3578063c8f33c911161008c578063e9fad8ee11610066578063e9fad8ee14610383578063ebe2b12b1461038b578063f7c618c11461039457600080fd5b8063c8f33c9114610369578063cd3daf9d14610372578063df136d651461037a57600080fd5b80638b876347116100bd5780638b87634714610323578063a694fc3a14610343578063aceccf8f1461035657600080fd5b80637b0a47ee146102ff57806380faa57d14610308578063873291bb1461031057600080fd5b80633c6b16ab116101455780636041c34f1161011f5780636041c34f1461027b57806370a08231146102a257806372f702f3146102d857600080fd5b80633c6b16ab1461021b5780633d18b9121461022e5780633fc6df6e1461023657600080fd5b806318160ddd1161017657806318160ddd146101f75780632e1a7d4d146101ff578063386a95251461021257600080fd5b80628cc2621461019c5780630700037d146101c25780631171bda9146101e2575b600080fd5b6101af6101aa366004611752565b6103bb565b6040519081526020015b60405180910390f35b6101af6101d0366004611752565b60086020526000908152604090205481565b6101f56101f036600461176d565b61046a565b005b6009546101af565b6101f561020d3660046117cb565b61068b565b6101af60045481565b6101f56102293660046117cb565b61089c565b6101f5610bf2565b6001546102569073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b9565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b6101af6102b0366004611752565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205490565b6102567f000000000000000000000000000000000000000000000000000000000000000081565b6101af60035481565b6101af610d7c565b6101f561031e366004611752565b610d8f565b6101af610331366004611752565b60076020526000908152604090205481565b6101f56103513660046117cb565b610e7f565b6101f56103643660046117fd565b610f70565b6101af60055481565b6101af6110ea565b6101af60065481565b6101f5611165565b6101af60025481565b6102567f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff811660009081526008602090815260408083205460079092528220547f0000000000000000000000000000000000000000000000000000000000000000906104166110ea565b6104209190611926565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600a602052604090205461045091906118e9565b61045a91906118ae565b6104649190611896565b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f310000000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561059857507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b6105fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f323000000000000000000000000000000000000000000000000000000000000060448201526064016104e7565b61061f73ffffffffffffffffffffffffffffffffffffffff84168383611188565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488360405161067e91815260200190565b60405180910390a3505050565b600260005414156106f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104e7565b6002600055336107066110ea565b600655610711610d7c565b60055573ffffffffffffffffffffffffffffffffffffffff81161561077257610739816103bb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556006546007909152919020555b600082116107dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f383900000000000000000000000000000000000000000000000000000000000060448201526064016104e7565b816009546107ea9190611926565b600955336000908152600a6020526040902054610808908390611926565b336000818152600a602052604090209190915561085d907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169084611188565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b60015473ffffffffffffffffffffffffffffffffffffffff16331461091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f310000000000000000000000000000000000000000000000000000000000000060448201526064016104e7565b6002600054141561098a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104e7565b600260009081556109996110ea565b6006556109a4610d7c565b60055573ffffffffffffffffffffffffffffffffffffffff811615610a05576109cc816103bb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556006546007909152919020555b6002544210610a2357600454610a1b90836118ae565b600355610a65565b600042600254610a339190611926565b9050600060035482610a4591906118e9565b600454909150610a558286611896565b610a5f91906118ae565b60035550505b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610aed57600080fd5b505afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2591906117e4565b905060045481610b3591906118ae565b6003541115610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f393100000000000000000000000000000000000000000000000000000000000060448201526064016104e7565b426005819055600454610bb291611896565b6002556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050600160005550565b60026000541415610c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104e7565b600260005533610c6d6110ea565b600655610c78610d7c565b60055573ffffffffffffffffffffffffffffffffffffffff811615610cd957610ca0816103bb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556006546007909152919020555b336000908152600860205260409020548015610d735733600081815260086020526040812055610d41907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169083611188565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200161088b565b50506001600055565b6000610d8a42600254611261565b905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f310000000000000000000000000000000000000000000000000000000000000060448201526064016104e7565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f1c794a043683a294127c95bc365bae91b63b651eb9884a2c9120afee2bb690b490600090a250565b60026000541415610eec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104e7565b600260005533610efa6110ea565b600655610f05610d7c565b60055573ffffffffffffffffffffffffffffffffffffffff811615610f6657610f2d816103bb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556006546007909152919020555b610d738233611279565b60026000541415610fdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104e7565b60026000558073ffffffffffffffffffffffffffffffffffffffff8116611060576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f300000000000000000000000000000000000000000000000000000000000000060448201526064016104e7565b816110696110ea565b600655611074610d7c565b60055573ffffffffffffffffffffffffffffffffffffffff8116156110d55761109c816103bb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556006546007909152919020555b6110df8484611279565b505060016000555050565b6000600954600014156110fe575060065490565b6009547f0000000000000000000000000000000000000000000000000000000000000000600354600554611130610d7c565b61113a9190611926565b61114491906118e9565b61114e91906118e9565b61115891906118ae565b600654610d8a9190611896565b336000908152600a602052604090205461117e9061068b565b611186610bf2565b565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261125c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526113cf565b505050565b60008183106112705781611272565b825b9392505050565b600082116112e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f393000000000000000000000000000000000000000000000000000000000000060448201526064016104e7565b61132573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330856114db565b816009546113339190611896565b60095573ffffffffffffffffffffffffffffffffffffffff81166000908152600a6020526040902054611367908390611896565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600a6020526040908190209290925590517f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906113c39085815260200190565b60405180910390a25050565b6000611431826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661153f9092919063ffffffff16565b80519091501561125c578080602001905181019061144f91906117a9565b61125c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104e7565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526115399085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016111da565b50505050565b606061154e8484600085611556565b949350505050565b6060824710156115e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104e7565b843b611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e7565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116799190611829565b60006040518083038185875af1925050503d80600081146116b6576040519150601f19603f3d011682016040523d82523d6000602084013e6116bb565b606091505b50915091506116cb8282866116d6565b979650505050505050565b606083156116e5575081611272565b8251156116f55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e79190611845565b803573ffffffffffffffffffffffffffffffffffffffff8116811461174d57600080fd5b919050565b60006020828403121561176457600080fd5b61127282611729565b60008060006060848603121561178257600080fd5b61178b84611729565b925061179960208501611729565b9150604084013590509250925092565b6000602082840312156117bb57600080fd5b8151801515811461127257600080fd5b6000602082840312156117dd57600080fd5b5035919050565b6000602082840312156117f657600080fd5b5051919050565b6000806040838503121561181057600080fd5b8235915061182060208401611729565b90509250929050565b6000825161183b81846020870161193d565b9190910192915050565b602081526000825180602084015261186481604085016020870161193d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156118a9576118a9611969565b500190565b6000826118e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561192157611921611969565b500290565b60008282101561193857611938611969565b500390565b60005b83811015611958578181015183820152602001611940565b838111156115395750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122077f991a49e4728e59e531169e15d2eda16ef6a44d51ad55135afbbba85844e7b64736f6c63430008070033",
  "devdoc": {
    "author": "Forked form SetProtocol https://github.com/SetProtocol/index-coop-contracts/blob/master/contracts/staking/StakingRewards.sol",
    "details": "This contracts is managed by the reward distributor and implements the staking interface",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "Used instead of having a public variable to respect the ERC20 standard",
        "params": { "account": "Account to query the balance of" }
      },
      "constructor": {
        "params": {
          "_rewardToken": "ERC20 token given as reward",
          "_rewardsDistribution": "Address owning the rewards token",
          "_rewardsDuration": "Duration of the staking contract",
          "_stakingToken": "ERC20 token used for staking"
        }
      },
      "earned(address)": {
        "details": "It adds to the rewards the amount of reward earned since last time that is the difference in reward per token from now and last time multiplied by the number of tokens staked by the person",
        "params": { "account": "Address for which the request is made" },
        "returns": { "_0": "How much a given account earned rewards" }
      },
      "exit()": { "details": "This function lets the caller withdraw its staking and claim rewards" },
      "lastTimeRewardApplicable()": {
        "details": "Returns the current timestamp if a reward is being distributed and the end of the staking period if staking is done"
      },
      "notifyRewardAmount(uint256)": {
        "details": "This reward will be distributed during `rewardsDuration` set previously",
        "params": { "reward": "Amount of reward tokens to distribute" }
      },
      "recoverERC20(address,address,uint256)": {
        "details": "A use case would be to claim tokens if the staked tokens accumulate rewards",
        "params": {
          "amount": "Amount to transfer",
          "to": "Address to transfer to",
          "tokenAddress": "Address of the ERC20 token to withdraw"
        }
      },
      "rewardPerToken()": {
        "details": "It adds to the reward per token: the time elapsed since the `rewardPerTokenStored` was last updated multiplied by the `rewardRate` divided by the number of tokens"
      },
      "setNewRewardsDistribution(address)": {
        "details": "This function was also added by Angle Core TeamA compatibility check of the reward token is already performed in the current `RewardsDistributor` implementation which has right to call this function",
        "params": { "_rewardsDistribution": "Address of the new rewards distributor contract" }
      },
      "stake(uint256)": {
        "params": { "amount": "Amount of ERC20 staking token that the `msg.sender` wants to stake" }
      },
      "stakeOnBehalf(uint256,address)": {
        "params": { "amount": "Amount to stake", "onBehalf": "Address to stake onBehalf of" }
      },
      "totalSupply()": { "details": "Used instead of having a public variable to respect the ERC20 standard" },
      "withdraw(uint256)": {
        "params": { "amount": "Amount of the ERC20 staking token that the `msg.sender` wants to withdraw" }
      }
    },
    "title": "StakingRewards",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": { "notice": "Accesses the number of token staked by an account" },
      "constructor": { "notice": "Initializes the staking contract with a first set of parameters" },
      "earned(address)": { "notice": "Returns how much a given account earned rewards" },
      "exit()": { "notice": "Exits someone" },
      "getReward()": { "notice": "Triggers a payment of the reward earned to the msg.sender" },
      "lastTimeRewardApplicable()": { "notice": "Queries the last timestamp at which a reward was distributed" },
      "lastUpdateTime()": { "notice": "Last time `rewardPerTokenStored` was updated" },
      "notifyRewardAmount(uint256)": { "notice": "Adds rewards to be distributed" },
      "periodFinish()": { "notice": "Time at which distribution ends" },
      "recoverERC20(address,address,uint256)": {
        "notice": "Withdraws ERC20 tokens that could accrue on this contract"
      },
      "rewardPerToken()": { "notice": "Used to actualize the `rewardPerTokenStored`" },
      "rewardPerTokenStored()": {
        "notice": "Helps to compute the amount earned by someone Cumulates rewards accumulated for one token since the beginning. Stored as a uint so it is actually a float times the base of the reward token"
      },
      "rewardRate()": { "notice": "Reward per second given to the staking contract, split among the staked tokens" },
      "rewardToken()": { "notice": "ERC20 token given as reward" },
      "rewards(address)": { "notice": "Stores for each account the accumulated rewards" },
      "rewardsDistribution()": { "notice": "Rewards Distribution contract for this staking contract" },
      "rewardsDuration()": { "notice": "Duration of the reward distribution" },
      "setNewRewardsDistribution(address)": { "notice": "Changes the rewards distributor associated to this contract" },
      "stake(uint256)": { "notice": "Lets someone stake a given amount of `stakingTokens`" },
      "stakeOnBehalf(uint256,address)": { "notice": "Allows to stake on behalf of another address" },
      "stakingBase()": {
        "notice": "Base of the staked token, it is going to be used in the case of sanTokens which are not in base 10**18"
      },
      "stakingToken()": { "notice": "ERC20 token used for staking" },
      "totalSupply()": { "notice": "Accesses the total supply" },
      "userRewardPerTokenPaid(address)": {
        "notice": "Stores for each account the `rewardPerToken`: we do the difference between the current and the old value to compute what has been earned by an account"
      },
      "withdraw(uint256)": { "notice": "Lets a user withdraw a given amount of collateral from the staking contract" }
    },
    "notice": "The `StakingRewards` contracts allows to stake an ERC20 token to receive as reward another ERC20",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8748,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 36904,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "rewardsDistribution",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 36907,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 36910,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 36913,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 36916,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 36919,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 36924,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36929,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36931,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 36935,
        "contract": "contracts/staking/StakingRewards.sol:StakingRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" }
    }
  }
}
