{
  "address": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
  "abi": [
    {
      "inputs": [
        { "internalType": "address", "name": "_strategy", "type": "address" },
        { "internalType": "string", "name": "name", "type": "string" },
        { "internalType": "address", "name": "_uniswapRouter", "type": "address" },
        { "internalType": "address", "name": "_comp", "type": "address" },
        { "internalType": "bytes", "name": "_path", "type": "bytes" },
        { "internalType": "address", "name": "_cToken", "type": "address" },
        { "internalType": "address[]", "name": "governorList", "type": "address[]" },
        { "internalType": "address", "name": "guardian", "type": "address" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCKS_PER_YEAR",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apr",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }],
      "name": "aprAfterDeposit",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cToken",
      "outputs": [{ "internalType": "contract CEtherI", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comp",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "deposit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAssets",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lenderName",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCompToSell",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nav",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "path",
      "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [{ "internalType": "contract IPoolManager", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes", "name": "_path", "type": "bytes" }],
      "name": "setPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_token", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalanceStored",
      "outputs": [{ "internalType": "uint256", "name": "balance", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedApr",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }],
      "name": "withdraw",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
    "transactionIndex": 17,
    "gasUsed": "2966788",
    "logsBloom": "0x0800000400000000080000200000000008000140400000000000000001000004000000000000000000c0000000000000000000000000000000000000002008001c0000000000000000000000000000000000000000000000000000000000000000000000028000400000000000000800000000000000008000000000000000000000000000000010000000000000000000000000000000000000800000004000020000000000000000000000000000000000000000010200001000000040000000400000020000000000000000000000200000000000000100000000000020000010000000000000000010000000000000002000000020101000000000040000",
    "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17",
    "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x000000000000000000000000001979aeda465c05731a4618e1db50062667a270",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000003931c80bf7a911fcda8b684b23a433d124b59f06",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c",
          "0x0000000000000000000000002667fbb9abfa6d7a153b95972c7f4940444164a1",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0x7Fe50B9793072E55573993F61E21Cc3eB844f7d4",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0xc778417E063141139Fce010982780140Aa0cD5Ab",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007fe50b9793072e55573993f61e21cc3eb844f7d4",
          "0x0000000000000000000000002667fbb9abfa6d7a153b95972c7f4940444164a1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 22,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171752,
        "transactionHash": "0x26ec0e296f1da06b29af1359c35b98fc1eab4d9a6ca5dd75ff2a89fe23888ce1",
        "address": "0x4f4fb1D5900f2bFE98E2d5EB481E2FB2Df154488",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007fe50b9793072e55573993f61e21cc3eb844f7d4",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 23,
        "blockHash": "0x9486328665cb0b9334bcaf220f551a911e7f27222708fe4033645b292722bd17"
      }
    ],
    "blockNumber": 10171752,
    "cumulativeGasUsed": "8579651",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2667fBb9ABfA6D7a153B95972C7f4940444164a1",
    "GenericCompoundRinkeby_EUR_WETH",
    "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "0x4f4fb1D5900f2bFE98E2d5EB481E2FB2Df154488",
    "0x00",
    "0xd6801a1DfFCd0a410336Ef88DeF4320D6DF1883e",
    ["0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e"],
    "0x3931C80BF7a911fcda8b684b23A433D124b59F06"
  ],
  "solcInputHash": "f5b703f620df957f43c941891d87f163",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"aprAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CEtherI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCompToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"path\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Forked from https://github.com/Grandthrax/yearnv2/blob/master/contracts/GenericDyDx/GenericCompound.sol\",\"details\":\"This contract is the Rinkeby version of `GenericCompound`, it differs in the `apr` function\",\"kind\":\"dev\",\"methods\":{\"aprAfterDeposit(uint256)\":{\"params\":{\"amount\":\"The amount to add to the lending platform\"}},\"constructor\":{\"params\":{\"_cToken\":\"Address of the cToken\",\"_comp\":\"Address of the comp token\",\"_path\":\"Bytes to encode the swap from comp to want\",\"_strategy\":\"Reference to the strategy using this lender\",\"_uniswapRouter\":\"Uniswap router interface to swap reward tokens\",\"governorList\":\"List of addresses with governor privilege\",\"guardian\":\"Address of the guardian\"}},\"emergencyWithdraw(uint256)\":{\"details\":\"Does not check if any error occurs or the amount withdrawn\",\"params\":{\"amount\":\"Amount to withdraw\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setPath(bytes)\":{\"params\":{\"_path\":\"New path\"}},\"sweep(address,address)\":{\"details\":\"Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.\",\"params\":{\"_token\":\"The token to transfer out of this poolManager.\",\"to\":\"Address to send the tokens to.\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"The amount the caller wants to withdraw\"},\"returns\":{\"_0\":\"The amounts actually withdrawn\"}},\"withdrawAll()\":{\"returns\":{\"_0\":\"Whether everything was withdrawn or not\"}}},\"title\":\"GenericCompound\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"apr()\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate\"},\"aprAfterDeposit(uint256)\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate after a new deposit\"},\"constructor\":{\"notice\":\"Constructor of the GenericLenderBase\"},\"deposit()\":{\"notice\":\"Deposits the current balance to the lending platform\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraws as much as possible in case of emergency and sends it to the poolManager\"},\"hasAssets()\":{\"notice\":\"Check if any assets is currently managed by this contract\"},\"nav()\":{\"notice\":\"Helper function to get the current total of assets managed by the lender.\"},\"poolManager()\":{\"notice\":\"Reference to the protocol's collateral poolManager\"},\"setPath(bytes)\":{\"notice\":\"Sets the path for the swap of COMP tokens\"},\"strategy()\":{\"notice\":\"Reference to the `Strategy`\"},\"sweep(address,address)\":{\"notice\":\"Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance.\"},\"underlyingBalanceStored()\":{\"notice\":\"Helper function the current balance of cTokens\"},\"want()\":{\"notice\":\"Reference to the token lent\"},\"weightedApr()\":{\"notice\":\"Returns an estimation of the current Annual Percentage Rate weighted by a factor\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws a given amount from lender\"},\"withdrawAll()\":{\"notice\":\"Withdraws as much as possible\"}},\"notice\":\"A contract to lend any ERC20 to Compound\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/genericLender/GenericCompoundRinkebyETH.sol\":\"GenericCompoundRinkebyETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14f6a40365c520e587ddc50dbe238cea9dcd5f6b99961528376d68566b10051b\",\"license\":\"GPL-3.0\"},\"contracts/genericLender/GenericCompoundRinkebyETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/external/compound/CEtherI.sol\\\";\\nimport \\\"../interfaces/external/compound/InterestRateModel.sol\\\";\\nimport \\\"../interfaces/external/uniswap/IUniswapRouter.sol\\\";\\n\\nimport \\\"./GenericLenderBase.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 wad) external;\\n\\n    function deposit() external payable;\\n}\\n\\n/// @title GenericCompound\\n/// @author Forked from https://github.com/Grandthrax/yearnv2/blob/master/contracts/GenericDyDx/GenericCompound.sol\\n/// @notice A contract to lend any ERC20 to Compound\\n/// @dev This contract is the Rinkeby version of `GenericCompound`, it differs in the `apr` function\\ncontract GenericCompoundRinkebyETH is GenericLenderBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    uint256 public constant BLOCKS_PER_YEAR = 2_300_000;\\n\\n    // ==================== References to contracts =============================\\n\\n    address public uniswapRouter;\\n    address public comp;\\n    CEtherI public cToken;\\n\\n    // ==================== Parameters =============================\\n\\n    bytes public path;\\n    uint256 public minCompToSell = 0.5 ether;\\n\\n    // ============================= Constructor =============================\\n\\n    /// @notice Constructor of the GenericLenderBase\\n    /// @param _strategy Reference to the strategy using this lender\\n    /// @param _uniswapRouter Uniswap router interface to swap reward tokens\\n    /// @param _comp Address of the comp token\\n    /// @param _path Bytes to encode the swap from comp to want\\n    /// @param _cToken Address of the cToken\\n    /// @param governorList List of addresses with governor privilege\\n    /// @param guardian Address of the guardian\\n    constructor(\\n        address _strategy,\\n        string memory name,\\n        address _uniswapRouter,\\n        address _comp,\\n        bytes memory _path,\\n        address _cToken,\\n        address[] memory governorList,\\n        address guardian\\n    ) GenericLenderBase(_strategy, name, governorList, guardian) {\\n        require(address(_comp) != address(0) && address(_strategy) != address(0), \\\"0\\\");\\n        uniswapRouter = _uniswapRouter;\\n        comp = _comp;\\n        path = _path;\\n        cToken = CEtherI(_cToken);\\n        IERC20(comp).safeApprove(address(_uniswapRouter), type(uint256).max);\\n    }\\n\\n    // ===================== External Strategy Functions ===========================\\n\\n    /// @notice Deposits the current balance to the lending platform\\n    function deposit() external override onlyRole(STRATEGY_ROLE) {\\n        uint256 balance = IWETH(address(want)).balanceOf(address(this));\\n        IWETH(address(want)).withdraw(balance);\\n        cToken.mint{ value: balance }();\\n    }\\n\\n    /// @notice Withdraws a given amount from lender\\n    /// @param amount The amount the caller wants to withdraw\\n    /// @return The amounts actually withdrawn\\n    function withdraw(uint256 amount) external override onlyRole(STRATEGY_ROLE) returns (uint256) {\\n        return _withdraw(amount);\\n    }\\n\\n    /// @notice Withdraws as much as possible\\n    /// @return Whether everything was withdrawn or not\\n    function withdrawAll() external override onlyRole(STRATEGY_ROLE) returns (bool) {\\n        uint256 invested = _nav();\\n        uint256 returned = _withdraw(invested);\\n        return returned >= invested;\\n    }\\n\\n    // ============================= External View Functions =============================\\n\\n    /// @notice Helper function to get the current total of assets managed by the lender.\\n    function nav() external view override returns (uint256) {\\n        return _nav();\\n    }\\n\\n    /// @notice Helper function the current balance of cTokens\\n    function underlyingBalanceStored() public view returns (uint256 balance) {\\n        uint256 currentCr = cToken.balanceOf(address(this));\\n        if (currentCr == 0) {\\n            balance = 0;\\n        } else {\\n            //The current exchange rate as an unsigned integer, scaled by 1e18.\\n            balance = (currentCr * cToken.exchangeRateStored()) / 1e18;\\n        }\\n    }\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate\\n    function apr() external view override returns (uint256) {\\n        return _apr();\\n    }\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate weighted by a factor\\n    function weightedApr() external view override returns (uint256) {\\n        uint256 a = _apr();\\n        return a * _nav();\\n    }\\n\\n    /// @notice Returns an estimation of the current Annual Percentage Rate after a new deposit\\n    /// @param amount The amount to add to the lending platform\\n    // solhint-disable-next-line no-unused-vars\\n    function aprAfterDeposit(uint256 amount) external view override returns (uint256) {\\n        // Rinkeby version\\n        return _apr();\\n    }\\n\\n    /// @notice Check if any assets is currently managed by this contract\\n    function hasAssets() external view override returns (bool) {\\n        return cToken.balanceOf(address(this)) > 0 || IWETH(address(want)).balanceOf(address(this)) > 0;\\n    }\\n\\n    // ============================= Governance =============================\\n\\n    /// @notice Sets the path for the swap of COMP tokens\\n    /// @param _path New path\\n    function setPath(bytes memory _path) external onlyRole(GUARDIAN_ROLE) {\\n        path = _path;\\n    }\\n\\n    /// @notice Withdraws as much as possible in case of emergency and sends it to the poolManager\\n    /// @param amount Amount to withdraw\\n    /// @dev Does not check if any error occurs or the amount withdrawn\\n    function emergencyWithdraw(uint256 amount) external override onlyRole(GUARDIAN_ROLE) {\\n        // Don't care about errors here. we want to exit what we can\\n        cToken.redeemUnderlying(amount);\\n        IWETH(address(want)).withdraw(address(this).balance);\\n        want.safeTransfer(address(poolManager), IWETH(address(want)).balanceOf(address(this)));\\n    }\\n\\n    // ============================= Internal Functions =============================\\n\\n    /// @notice See 'apr'\\n    function _apr() internal view returns (uint256) {\\n        return cToken.supplyRatePerBlock() * BLOCKS_PER_YEAR;\\n    }\\n\\n    /// @notice See 'nav'\\n    function _nav() internal view returns (uint256) {\\n        return IWETH(address(want)).balanceOf(address(this)) + underlyingBalanceStored();\\n    }\\n\\n    /// @notice See 'withdraw'\\n    function _withdraw(uint256 amount) internal returns (uint256) {\\n        uint256 balanceUnderlying = cToken.balanceOfUnderlying(address(this));\\n        uint256 looseBalance = IWETH(address(want)).balanceOf(address(this));\\n        uint256 total = balanceUnderlying + looseBalance;\\n\\n        if (amount > total) {\\n            //cant withdraw more than we own\\n            amount = total;\\n        }\\n\\n        if (looseBalance >= amount) {\\n            want.safeTransfer(address(strategy), amount);\\n            return amount;\\n        }\\n\\n        //not state changing but OK because of previous call\\n        uint256 liquidity = want.balanceOf(address(cToken));\\n\\n        if (liquidity > 1) {\\n            uint256 toWithdraw = amount - looseBalance;\\n\\n            if (toWithdraw <= liquidity) {\\n                //we can take all\\n                require(cToken.redeemUnderlying(toWithdraw) == 0, \\\"redeemUnderlying fail\\\");\\n                IWETH(address(want)).deposit{ value: address(this).balance }();\\n            } else {\\n                //take all we can\\n                require(cToken.redeemUnderlying(liquidity) == 0, \\\"redeemUnderlying fail\\\");\\n                IWETH(address(want)).deposit{ value: address(this).balance }();\\n            }\\n        }\\n        _disposeOfComp();\\n        looseBalance = want.balanceOf(address(this));\\n        want.safeTransfer(address(strategy), looseBalance);\\n        return looseBalance;\\n    }\\n\\n    /// @notice Claims and swaps to Uniswap the Comp earned\\n    function _disposeOfComp() internal {\\n        uint256 _comp = IERC20(comp).balanceOf(address(this));\\n\\n        if (_comp > minCompToSell) {\\n            IUniswapV3Router(uniswapRouter).exactInput(\\n                ExactInputParams(path, address(this), block.timestamp, _comp, uint256(0))\\n            );\\n        }\\n    }\\n\\n    /// @notice Specifies the token managed by this contract during normal operation\\n    function _protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](3);\\n        protected[0] = address(want);\\n        protected[1] = address(cToken);\\n        protected[2] = comp;\\n        return protected;\\n    }\\n\\n    /// @notice In case ETH is required for some transactions\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5b9579ec7f1f9275813f67fd62e3f49bd477840d04f47d19fc2a46b4ca7d97ef\",\"license\":\"GPL-3.0\"},\"contracts/genericLender/GenericLenderBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\n\\nimport \\\"../interfaces/IGenericLender.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\n/// @title GenericLenderBase\\n/// @author Forked from https://github.com/Grandthrax/yearnV2-generic-lender-strat/tree/master/contracts/GenericLender\\n/// @notice A base contract to build contracts to lend assets\\nabstract contract GenericLenderBase is IGenericLender, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n    string public override lenderName;\\n\\n    // ============================= References to contracts =============================\\n\\n    /// @notice Reference to the protocol's collateral poolManager\\n    IPoolManager public poolManager;\\n\\n    /// @notice Reference to the `Strategy`\\n    address public override strategy;\\n\\n    /// @notice Reference to the token lent\\n    IERC20 public want;\\n\\n    // ============================= Constructor =============================\\n\\n    /// @notice Constructor of the `GenericLenderBase`\\n    /// @param _strategy Reference to the strategy using this lender\\n    /// @param governorList List of addresses with governor privilege\\n    /// @param guardian Address of the guardian\\n    constructor(\\n        address _strategy,\\n        string memory _name,\\n        address[] memory governorList,\\n        address guardian\\n    ) {\\n        strategy = _strategy;\\n        // The corresponding `PoolManager` is inferred from the `Strategy`\\n        poolManager = IPoolManager(IStrategy(strategy).poolManager());\\n        want = IERC20(poolManager.token());\\n        lenderName = _name;\\n\\n        _setupRole(GUARDIAN_ROLE, address(poolManager));\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _setupRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(STRATEGY_ROLE, _strategy);\\n        _setRoleAdmin(GUARDIAN_ROLE, STRATEGY_ROLE);\\n        _setRoleAdmin(STRATEGY_ROLE, GUARDIAN_ROLE);\\n\\n        want.safeApprove(_strategy, type(uint256).max);\\n    }\\n\\n    // ============================= Governance =============================\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    /// @notice\\n    /// Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this poolManager.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external override onlyRole(GUARDIAN_ROLE) {\\n        address[] memory __protectedTokens = _protectedTokens();\\n        for (uint256 i = 0; i < __protectedTokens.length; i++) require(_token != __protectedTokens[i], \\\"93\\\");\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x724919d007338b8a2d2cbeb31bfe490153c681255dfdeb2e0eba79c3e2cc7658\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb2c30a33c8210d99b5d3eda0c391fde5a91c122361795c65cffc9e0fee6b982e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7afc0ffbbe114c38cc447805e375fe75b3b6a4f947a5b2737225db03825372bf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGenericLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IGenericLender\\n/// @author Yearn with slight modifications from Angle Core Team\\n/// @dev Interface for the `GenericLender` contract, the base interface for contracts interacting\\n/// with lending and yield farming platforms\\ninterface IGenericLender is IAccessControl {\\n    function lenderName() external view returns (string memory);\\n\\n    function nav() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function apr() external view returns (uint256);\\n\\n    function weightedApr() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    function emergencyWithdraw(uint256 amount) external;\\n\\n    function deposit() external;\\n\\n    function withdrawAll() external returns (bool);\\n\\n    function hasAssets() external view returns (bool);\\n\\n    function aprAfterDeposit(uint256 amount) external view returns (uint256);\\n\\n    function sweep(address _token, address to) external;\\n}\\n\",\"keccak256\":\"0xbf77aef426635f13466efce59404d4d9999d4ff8926fb6b8dcea08dccd3900f9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdff1e21452e346fd841752ea50fb6bc6fd6c502eb27569d3ebb92ee667f3a29d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\\n/// @title Interface of the contract managing perpetuals with claim function\\n/// @author Angle Core Team\\n/// @dev Front interface with rewards function, meaning only user-facing functions\\ninterface IPerpetualManagerFrontWithClaim is IPerpetualManagerFront, IPerpetualManager {\\n    function getReward(uint256 perpetualID) external;\\n}\\n\",\"keccak256\":\"0xdedceeaa33dd4779bcb9a34caf38e4e16849ea801f071308968d80c05c4828bb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0x522874693d1bc7322cd505c644904cf34bf4a9edb8a7f36e8a981cbff1b02085\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x20a728d054df379cf30435b21cf51d8bb7038eb810b42ac2f1ab9496ceec61f6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/compound/CEtherI.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./CTokenI.sol\\\";\\n\\ninterface CEtherI is CTokenI {\\n    function mint() external payable;\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x997682c035481b39d0aa4a1dda9b42f7f736648b7adc79b71da738e14710767e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/compound/CTokenI.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ninterface CTokenI {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (InterestRateModel);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0d844a9b39b2bfb4778eecbecd4b34180db3e098f4e8813284ae0a619971fa82\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\ninterface InterestRateModel {\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n\\n    // Rinkeby function\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 _reserves\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x9e01464d5d03af4f8ca9b91e992c02d2c48fdeb9685535f2cc1580f3939e63a6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/uniswap/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nstruct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3Router {\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\\n/// @title Router for price estimation functionality\\n/// @notice Functions for getting the price of one token with respect to another using Uniswap V2\\n/// @dev This interface is only used for non critical elements of the protocol\\ninterface IUniswapV2Router {\\n    /// @notice Given an input asset amount, returns the maximum output amount of the\\n    /// other asset (accounting for fees) given reserves.\\n    /// @param path Addresses of the pools used to get prices\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 swapAmount,\\n        uint256 minExpected,\\n        address[] calldata path,\\n        address receiver,\\n        uint256 swapDeadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xee11af8f09a5dfbca37d9bc1069c39bdd3c0a1007828d75368043fbc196b7649\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c806369e527da116100f7578063b8dc491b11610095578063d37db1d211610064578063d37db1d2146105a6578063d547741f146105bd578063dc4c90d3146105dd578063f381e07d1461060a57600080fd5b8063b8dc491b14610547578063c1590cd714610567578063c6afba3c1461057c578063d0e30db01461059157600080fd5b80638b202176116100d15780638b2021761461049f57806391d14854146104b4578063a217fddf14610505578063a8c62e761461051a57600080fd5b806369e527da14610430578063735de9f71461045d578063853828b61461048a57600080fd5b80632e1a7d4d1161016f5780635312ea8e1161013e5780635312ea8e146103a257806357ded9c9146103c2578063580b7c2e146103d75780635be9b2d31461040b57600080fd5b80632e1a7d4d1461031e5780632f2ff15d1461033e57806336568abe146103605780633dc063561461038057600080fd5b8063149a4ae4116101ab578063149a4ae41461026d5780631f1fcd511461028d578063248a9ca3146102ba57806324ea54f4146102ea57600080fd5b806304324af8146101dd578063109d0af814610206578063116ac4a31461025857600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101f360095481565b6040519081526020015b60405180910390f35b34801561021257600080fd5b506006546102339073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fd565b34801561026457600080fd5b506101f361062a565b34801561027957600080fd5b506101f361028836600461276e565b61064f565b34801561029957600080fd5b506004546102339073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102c657600080fd5b506101f36102d536600461276e565b60009081526020819052604090206001015490565b3480156102f657600080fd5b506101f37f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b34801561032a57600080fd5b506101f361033936600461276e565b61065f565b34801561034a57600080fd5b5061035e610359366004612787565b61069e565b005b34801561036c57600080fd5b5061035e61037b366004612787565b6106c9565b34801561038c57600080fd5b5061039561075b565b6040516101fd9190612979565b3480156103ae57600080fd5b5061035e6103bd36600461276e565b6107e9565b3480156103ce57600080fd5b506101f3610a0d565b3480156103e357600080fd5b506101f37f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b34801561041757600080fd5b50610420610a1c565b60405190151581526020016101fd565b34801561043c57600080fd5b506007546102339073ffffffffffffffffffffffffffffffffffffffff1681565b34801561046957600080fd5b506005546102339073ffffffffffffffffffffffffffffffffffffffff1681565b34801561049657600080fd5b50610420610b76565b3480156104ab57600080fd5b50610395610bc7565b3480156104c057600080fd5b506104206104cf366004612787565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561051157600080fd5b506101f3600081565b34801561052657600080fd5b506003546102339073ffffffffffffffffffffffffffffffffffffffff1681565b34801561055357600080fd5b5061035e610562366004612719565b610bd4565b34801561057357600080fd5b506101f3610da0565b34801561058857600080fd5b506101f3610daa565b34801561059d57600080fd5b5061035e610f1d565b3480156105b257600080fd5b506101f36223186081565b3480156105c957600080fd5b5061035e6105d8366004612787565b611102565b3480156105e957600080fd5b506002546102339073ffffffffffffffffffffffffffffffffffffffff1681565b34801561061657600080fd5b5061035e6106253660046127aa565b611128565b60008061063561138e565b905061063f61143e565b6106499082612a45565b91505090565b600061065961138e565b92915050565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c61068c81336114f4565b610695836115c4565b91505b50919050565b6000828152602081905260409020600101546106ba81336114f4565b6106c48383611c3c565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6107578282611d2c565b5050565b6008805461076890612afa565b80601f016020809104026020016040519081016040528092919081815260200182805461079490612afa565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b505050505081565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161081481336114f4565b6007546040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063852a12e390602401602060405180830381600087803b15801561088057600080fd5b505af1158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190612879565b50600480546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152479281019290925273ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561092557600080fd5b505af1158015610939573d6000803e3d6000fd5b5050600254600480546040517f70a082310000000000000000000000000000000000000000000000000000000081523092810192909252610757945073ffffffffffffffffffffffffffffffffffffffff928316935091909116906370a082319060240160206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190612879565b60045473ffffffffffffffffffffffffffffffffffffffff169190611de3565b6000610a1761138e565b905090565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091829173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015610a8a57600080fd5b505afa158015610a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac29190612879565b1180610a175750600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925260009173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015610b3857600080fd5b505afa158015610b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190612879565b11905090565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610ba381336114f4565b6000610bad61143e565b90506000610bba826115c4565b91909110159250505b5090565b6001805461076890612afa565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610bff81336114f4565b6000610c09611e39565b905060005b8151811015610cd857818181518110610c2957610c29612bb0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610cc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f39330000000000000000000000000000000000000000000000000000000000006044820152606401610744565b80610cd081612b48565b915050610c0e565b506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610d9a90849073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b158015610d4457600080fd5b505afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190612879565b73ffffffffffffffffffffffffffffffffffffffff87169190611de3565b50505050565b6000610a1761143e565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091829173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015610e1857600080fd5b505afa158015610e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e509190612879565b905080610e5f57600091505090565b600754604080517f182df0f50000000000000000000000000000000000000000000000000000000081529051670de0b6b3a76400009273ffffffffffffffffffffffffffffffffffffffff169163182df0f5916004808301926020929190829003018186803b158015610ed157600080fd5b505afa158015610ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190612879565b610f139083612a45565b6106499190612a0a565b7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c610f4881336114f4565b600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925260009173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015610fb757600080fd5b505afa158015610fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fef9190612879565b600480546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff1691632e1a7d4d916110499185910190815260200190565b600060405180830381600087803b15801561106357600080fd5b505af1158015611077573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110e557600080fd5b505af11580156110f9573d6000803e3d6000fd5b50505050505050565b60008281526020819052604090206001015461111e81336114f4565b6106c48383611d2c565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161115381336114f4565b81516106c4906008906020850190612660565b80158061121557506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156111db57600080fd5b505afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112139190612879565b155b6112a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610744565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106c49084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f32565b6060611384848460008561203e565b90505b9392505050565b600062231860600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fc57600080fd5b505afa158015611410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114349190612879565b610a179190612a45565b6000611448610daa565b600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925273ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156114b257600080fd5b505afa1580156114c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ea9190612879565b610a1791906129f2565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166107575761154a8173ffffffffffffffffffffffffffffffffffffffff1660146121be565b6115558360206121be565b6040516020016115669291906128f8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261074491600401612979565b6007546040517f3af9e669000000000000000000000000000000000000000000000000000000008152306004820152600091829173ffffffffffffffffffffffffffffffffffffffff90911690633af9e66990602401602060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166c9190612879565b600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925291925060009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156116dc57600080fd5b505afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117149190612879565b9050600061172282846129f2565b905080851115611730578094505b84821061176a576003546004546117619173ffffffffffffffffffffffffffffffffffffffff918216911687611de3565b50929392505050565b600480546007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216938101939093526000929116906370a082319060240160206040518083038186803b1580156117dd57600080fd5b505afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190612879565b90506001811115611b5b57600061182c8488612a82565b90508181116119c9576007546040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063852a12e390602401602060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d99190612879565b15611940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f72656465656d556e6465726c79696e67206661696c00000000000000000000006044820152606401610744565b60048054604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263d0e30db0924792808301926000929182900301818588803b1580156119ab57600080fd5b505af11580156119bf573d6000803e3d6000fd5b5050505050611b59565b6007546040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063852a12e390602401602060405180830381600087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d9190612879565b15611ad4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f72656465656d556e6465726c79696e67206661696c00000000000000000000006044820152606401610744565b60048054604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263d0e30db0924792808301926000929182900301818588803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b50505050505b505b611b63612401565b600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925273ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015611bcd57600080fd5b505afa158015611be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c059190612879565b600354600454919450611c329173ffffffffffffffffffffffffffffffffffffffff908116911685611de3565b5090949350505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166107575760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611cce3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156107575760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106c49084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016112f3565b60408051600380825260808201909252606091600091906020820184803683375050600454825192935073ffffffffffffffffffffffffffffffffffffffff1691839150600090611e8c57611e8c612bb0565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600754825191169082906001908110611eca57611eca612bb0565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600654825191169082906002908110611f0857611f08612bb0565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152919050565b6000611f94826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113759092919063ffffffff16565b8051909150156106c45780806020019051810190611fb2919061274c565b6106c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610744565b6060824710156120d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610744565b843b612138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610744565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161216191906128dc565b60006040518083038185875af1925050503d806000811461219e576040519150601f19603f3d011682016040523d82523d6000602084013e6121a3565b606091505b50915091506121b382828661260d565b979650505050505050565b606060006121cd836002612a45565b6121d89060026129f2565b67ffffffffffffffff8111156121f0576121f0612bdf565b6040519080825280601f01601f19166020018201604052801561221a576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061225157612251612bb0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122b4576122b4612bb0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006122f0846002612a45565b6122fb9060016129f2565b90505b6001811115612398577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061233c5761233c612bb0565b1a60f81b82828151811061235257612352612bb0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361239181612ac5565b90506122fe565b508315611387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610744565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561246b57600080fd5b505afa15801561247f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a39190612879565b905060095481111561260a576005546040805160a081019091526008805473ffffffffffffffffffffffffffffffffffffffff9093169263c04b8d59929182916124ec90612afa565b80601f016020809104026020016040519081016040528092919081815260200182805461251890612afa565b80156125655780601f1061253a57610100808354040283529160200191612565565b820191906000526020600020905b81548152906001019060200180831161254857829003601f168201915b505050505081526020013073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152506040518263ffffffff1660e01b81526004016125b8919061298c565b602060405180830381600087803b1580156125d257600080fd5b505af11580156125e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190612879565b50565b6060831561261c575081611387565b82511561262c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107449190612979565b82805461266c90612afa565b90600052602060002090601f01602090048101928261268e57600085556126d4565b82601f106126a757805160ff19168380011785556126d4565b828001600101855582156126d4579182015b828111156126d45782518255916020019190600101906126b9565b50610bc39291505b80821115610bc357600081556001016126dc565b803573ffffffffffffffffffffffffffffffffffffffff8116811461271457600080fd5b919050565b6000806040838503121561272c57600080fd5b612735836126f0565b9150612743602084016126f0565b90509250929050565b60006020828403121561275e57600080fd5b8151801515811461138757600080fd5b60006020828403121561278057600080fd5b5035919050565b6000806040838503121561279a57600080fd5b82359150612743602084016126f0565b6000602082840312156127bc57600080fd5b813567ffffffffffffffff808211156127d457600080fd5b818401915084601f8301126127e857600080fd5b8135818111156127fa576127fa612bdf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561284057612840612bdf565b8160405282815287602084870101111561285957600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561288b57600080fd5b5051919050565b600081518084526128aa816020860160208601612a99565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082516128ee818460208701612a99565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612930816017850160208801612a99565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161296d816028840160208801612a99565b01602801949350505050565b6020815260006113876020830184612892565b602081526000825160a060208401526129a860c0840182612892565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008219821115612a0557612a05612b81565b500190565b600082612a40577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a7d57612a7d612b81565b500290565b600082821015612a9457612a94612b81565b500390565b60005b83811015612ab4578181015183820152602001612a9c565b83811115610d9a5750506000910152565b600081612ad457612ad4612b81565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600181811c90821680612b0e57607f821691505b60208210811415610698577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b7a57612b7a612b81565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122061868ab85065fc48e21db58764dd49d17b762b88ed6f31c6572b98419e96b68064736f6c63430008070033",
  "devdoc": {
    "author": "Forked from https://github.com/Grandthrax/yearnv2/blob/master/contracts/GenericDyDx/GenericCompound.sol",
    "details": "This contract is the Rinkeby version of `GenericCompound`, it differs in the `apr` function",
    "kind": "dev",
    "methods": {
      "aprAfterDeposit(uint256)": { "params": { "amount": "The amount to add to the lending platform" } },
      "constructor": {
        "params": {
          "_cToken": "Address of the cToken",
          "_comp": "Address of the comp token",
          "_path": "Bytes to encode the swap from comp to want",
          "_strategy": "Reference to the strategy using this lender",
          "_uniswapRouter": "Uniswap router interface to swap reward tokens",
          "governorList": "List of addresses with governor privilege",
          "guardian": "Address of the guardian"
        }
      },
      "emergencyWithdraw(uint256)": {
        "details": "Does not check if any error occurs or the amount withdrawn",
        "params": { "amount": "Amount to withdraw" }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setPath(bytes)": { "params": { "_path": "New path" } },
      "sweep(address,address)": {
        "details": "Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.",
        "params": { "_token": "The token to transfer out of this poolManager.", "to": "Address to send the tokens to." }
      },
      "withdraw(uint256)": {
        "params": { "amount": "The amount the caller wants to withdraw" },
        "returns": { "_0": "The amounts actually withdrawn" }
      },
      "withdrawAll()": { "returns": { "_0": "Whether everything was withdrawn or not" } }
    },
    "title": "GenericCompound",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "apr()": { "notice": "Returns an estimation of the current Annual Percentage Rate" },
      "aprAfterDeposit(uint256)": {
        "notice": "Returns an estimation of the current Annual Percentage Rate after a new deposit"
      },
      "constructor": { "notice": "Constructor of the GenericLenderBase" },
      "deposit()": { "notice": "Deposits the current balance to the lending platform" },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraws as much as possible in case of emergency and sends it to the poolManager"
      },
      "hasAssets()": { "notice": "Check if any assets is currently managed by this contract" },
      "nav()": { "notice": "Helper function to get the current total of assets managed by the lender." },
      "poolManager()": { "notice": "Reference to the protocol's collateral poolManager" },
      "setPath(bytes)": { "notice": "Sets the path for the swap of COMP tokens" },
      "strategy()": { "notice": "Reference to the `Strategy`" },
      "sweep(address,address)": {
        "notice": "Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance."
      },
      "underlyingBalanceStored()": { "notice": "Helper function the current balance of cTokens" },
      "want()": { "notice": "Reference to the token lent" },
      "weightedApr()": { "notice": "Returns an estimation of the current Annual Percentage Rate weighted by a factor" },
      "withdraw(uint256)": { "notice": "Withdraws a given amount from lender" },
      "withdrawAll()": { "notice": "Withdraws as much as possible" }
    },
    "notice": "A contract to lend any ERC20 to Compound",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16499,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)16494_storage)"
      },
      {
        "astId": 22001,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "lenderName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 22005,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "poolManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPoolManager)23066"
      },
      {
        "astId": 22009,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "strategy",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 22013,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "want",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)9459"
      },
      {
        "astId": 21304,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21306,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "comp",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 21309,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "cToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(CEtherI)24061"
      },
      {
        "astId": 21311,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "path",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes_storage"
      },
      {
        "astId": 21314,
        "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
        "label": "minCompToSell",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_bytes_storage": { "encoding": "bytes", "label": "bytes", "numberOfBytes": "32" },
      "t_contract(CEtherI)24061": { "encoding": "inplace", "label": "contract CEtherI", "numberOfBytes": "20" },
      "t_contract(IERC20)9459": { "encoding": "inplace", "label": "contract IERC20", "numberOfBytes": "20" },
      "t_contract(IPoolManager)23066": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)16494_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)16494_storage"
      },
      "t_string_storage": { "encoding": "bytes", "label": "string", "numberOfBytes": "32" },
      "t_struct(RoleData)16494_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16491,
            "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16493,
            "contract": "contracts/genericLender/GenericCompoundRinkebyETH.sol:GenericCompoundRinkebyETH",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" }
    }
  }
}
