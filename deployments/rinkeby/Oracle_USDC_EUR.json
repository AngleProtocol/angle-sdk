{
  "address": "0x71B0dFd21fCce7Ff28202A6e0F6e806719Bd4eEF",
  "abi": [
    {
      "inputs": [
        { "internalType": "address[]", "name": "_circuitChainlink", "type": "address[]" },
        { "internalType": "uint8[]", "name": "_circuitChainIsMultiplied", "type": "uint8[]" },
        { "internalType": "uint256", "name": "_inBase", "type": "uint256" },
        { "internalType": "uint32", "name": "stalePeriod", "type": "uint32" },
        { "internalType": "address[]", "name": "guardians", "type": "address[]" },
        { "internalType": "bytes32", "name": "_description", "type": "bytes32" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE_CHAINLINK",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "chainlinkDecimals",
      "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint32", "name": "_stalePeriod", "type": "uint32" }],
      "name": "changeStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "circuitChainIsMultiplied",
      "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "circuitChainlink",
      "outputs": [{ "internalType": "contract AggregatorV3Interface", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inBase",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "read",
      "outputs": [{ "internalType": "uint256", "name": "rate", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readAll",
      "outputs": [
        { "internalType": "uint256", "name": "", "type": "uint256" },
        { "internalType": "uint256", "name": "", "type": "uint256" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readLower",
      "outputs": [{ "internalType": "uint256", "name": "rate", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "quoteAmount", "type": "uint256" }],
      "name": "readQuote",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "quoteAmount", "type": "uint256" }],
      "name": "readQuoteLower",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readUpper",
      "outputs": [{ "internalType": "uint256", "name": "rate", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalePeriod",
      "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa66361c9ce65934151a31fbe43e2385d092b06c6ab29fb8cbc320ac1a3a8527",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0x71B0dFd21fCce7Ff28202A6e0F6e806719Bd4eEF",
    "transactionIndex": 4,
    "gasUsed": "1423092",
    "logsBloom": "0x
    "blockHash": "0x723fb3a987f89f241ed5aef62d8a50918c3ed25cc84ee8fb9a30e7060a5e0a04",
    "transactionHash": "0xfa66361c9ce65934151a31fbe43e2385d092b06c6ab29fb8cbc320ac1a3a8527",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 10171696,
        "transactionHash": "0xfa66361c9ce65934151a31fbe43e2385d092b06c6ab29fb8cbc320ac1a3a8527",
        "address": "0x71B0dFd21fCce7Ff28202A6e0F6e806719Bd4eEF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000003931c80bf7a911fcda8b684b23a433d124b59f06",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x723fb3a987f89f241ed5aef62d8a50918c3ed25cc84ee8fb9a30e7060a5e0a04"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 10171696,
        "transactionHash": "0xfa66361c9ce65934151a31fbe43e2385d092b06c6ab29fb8cbc320ac1a3a8527",
        "address": "0x71B0dFd21fCce7Ff28202A6e0F6e806719Bd4eEF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x723fb3a987f89f241ed5aef62d8a50918c3ed25cc84ee8fb9a30e7060a5e0a04"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 10171696,
        "transactionHash": "0xfa66361c9ce65934151a31fbe43e2385d092b06c6ab29fb8cbc320ac1a3a8527",
        "address": "0x71B0dFd21fCce7Ff28202A6e0F6e806719Bd4eEF",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x723fb3a987f89f241ed5aef62d8a50918c3ed25cc84ee8fb9a30e7060a5e0a04"
      }
    ],
    "blockNumber": 10171696,
    "cumulativeGasUsed": "1652132",
    "status": 1,
    "byzantium": true
  },
  "args": [
    ["0xa24de01df22b63d23Ebc1882a5E3d4ec0d907bFB", "0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F"],
    [1, 0],
    "1000000",
    86400,
    ["0x3931C80BF7a911fcda8b684b23A433D124b59F06", "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e"],
    "0x618c7c056ee613e15967a95f943dfd4d9a5950d7f2d80c06b87e0f5f605aef98"
  ],
  "solcInputHash": "f5b703f620df957f43c941891d87f163",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_circuitChainlink\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_circuitChainIsMultiplied\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_inBase\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stalePeriod\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"_description\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE_CHAINLINK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainlinkDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"}],\"name\":\"changeStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circuitChainIsMultiplied\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circuitChainlink\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readLower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"readQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"readQuoteLower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readUpper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This contract concerns an oracle that uses Chainlink with multiple pools to read fromIt inherits the `ModuleChainlinkMulti` contract and like all oracle contracts, this contract is an instance of `OracleAstract` that contains some base functions\",\"kind\":\"dev\",\"methods\":{\"changeStalePeriod(uint32)\":{\"params\":{\"_stalePeriod\":\"New stale period (in seconds)\"}},\"constructor\":{\"params\":{\"_circuitChainIsMultiplied\":\"Whether we should multiply or divide by this rate\",\"_circuitChainlink\":\"Chainlink pool addresses (in order)\",\"_description\":\"Description of the assets concerned by the oracle\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"read()\":{\"returns\":{\"rate\":\"The current rate between the in-currency and out-currency\"}},\"readAll()\":{\"details\":\"The rate returned is expressed with base `BASE` (and not the base of the out-currency)\",\"returns\":{\"_0\":\"Return all available rates (Chainlink and Uniswap) with the lowest rate returned first.\"}},\"readLower()\":{\"details\":\"If there is only one rate computed in an oracle contract, then the only rate is returned regardless of the value of the `lower` parameterThe rate returned is expressed with base `BASE` (and not the base of the out-currency)\",\"returns\":{\"rate\":\"The lower rate between Chainlink and Uniswap\"}},\"readQuote(uint256)\":{\"details\":\"The amount returned is expressed with base `BASE` (and not the base of the out-currency)\",\"params\":{\"quoteAmount\":\"Amount (in the input collateral) to be converted in out-currency\"},\"returns\":{\"_0\":\"Quote amount in out-currency from the base amount in in-currency\"}},\"readQuoteLower(uint256)\":{\"details\":\"The rate returned is expressed with base `BASE` (and not the base of the out-currency)\",\"params\":{\"quoteAmount\":\"Amount (in the input collateral) to be converted\"},\"returns\":{\"_0\":\"The lowest quote amount from the quote amount in in-currency\"}},\"readUpper()\":{\"details\":\"If there is only one rate computed in an oracle contract, then the only rate is returned regardless of the value of the `lower` parameterThe rate returned is expressed with base `BASE` (and not the base of the out-currency)\",\"returns\":{\"rate\":\"The upper rate between Chainlink and Uniswap\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"title\":\"OracleChainlinkMulti\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE()\":{\"notice\":\"Base used for computation\"},\"chainlinkDecimals(uint256)\":{\"notice\":\"Decimals for each Chainlink pairs\"},\"changeStalePeriod(uint32)\":{\"notice\":\"Changes the Stale Period\"},\"circuitChainIsMultiplied(uint256)\":{\"notice\":\"Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided\"},\"circuitChainlink(uint256)\":{\"notice\":\"Chanlink pools, the order of the pools has to be the order in which they are read for the computation of the price\"},\"constructor\":{\"notice\":\"Constructor for an oracle using Chainlink with multiple pools to read from\"},\"description()\":{\"notice\":\"Description of the assets concerned by the oracle and the price outputted\"},\"inBase()\":{\"notice\":\"Unit of the in-currency\"},\"read()\":{\"notice\":\"Reads the rate from the Chainlink circuit\"},\"readAll()\":{\"notice\":\"Read rates from the circuit of both Uniswap and Chainlink if there are both circuits else returns twice the same price\"},\"readLower()\":{\"notice\":\"Reads rates from the circuit of both Uniswap and Chainlink if there are both circuits and returns either the highest of both rates or the lowest\"},\"readQuote(uint256)\":{\"notice\":\"Converts an in-currency quote amount to out-currency using Chainlink's circuit\"},\"readQuoteLower(uint256)\":{\"notice\":\"Returns the lowest quote amount between Uniswap and Chainlink circuits (if possible). If the oracle contract only involves a single feed, then this returns the value of this feed\"},\"readUpper()\":{\"notice\":\"Reads rates from the circuit of both Uniswap and Chainlink if there are both circuits and returns either the highest of both rates or the lowest\"},\"stalePeriod()\":{\"notice\":\"Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale\"}},\"notice\":\"Oracle contract, one contract is deployed per collateral/stablecoin pair\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/OracleChainlinkMulti.sol\":\"OracleChainlinkMulti\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14f6a40365c520e587ddc50dbe238cea9dcd5f6b99961528376d68566b10051b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdff1e21452e346fd841752ea50fb6bc6fd6c502eb27569d3ebb92ee667f3a29d\",\"license\":\"GPL-3.0\"},\"contracts/oracle/OracleAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\n/// @title OracleAbstract\\n/// @author Angle Core Team\\n/// @notice Abstract Oracle contract that contains some of the functions that are used across all oracle contracts\\n/// @dev This is the most generic form of oracle contract\\n/// @dev A rate gives the price of the out-currency with respect to the in-currency in base `BASE`. For instance\\n/// if the out-currency is ETH worth 1000 USD, then the rate ETH-USD is 10**21\\nabstract contract OracleAbstract is IOracle {\\n    /// @notice Base used for computation\\n    uint256 public constant BASE = 10**18;\\n    /// @notice Unit of the in-currency\\n    uint256 public override inBase;\\n    /// @notice Description of the assets concerned by the oracle and the price outputted\\n    bytes32 public description;\\n\\n    /// @notice Reads one of the rates from the circuits given\\n    /// @return rate The current rate between the in-currency and out-currency\\n    /// @dev By default if the oracle involves a Uniswap price and a Chainlink price\\n    /// this function will return the Uniswap price\\n    /// @dev The rate returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function read() external view virtual override returns (uint256 rate);\\n\\n    /// @notice Read rates from the circuit of both Uniswap and Chainlink if there are both circuits\\n    /// else returns twice the same price\\n    /// @return Return all available rates (Chainlink and Uniswap) with the lowest rate returned first.\\n    /// @dev The rate returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function readAll() external view override returns (uint256, uint256) {\\n        return _readAll(inBase);\\n    }\\n\\n    /// @notice Reads rates from the circuit of both Uniswap and Chainlink if there are both circuits\\n    /// and returns either the highest of both rates or the lowest\\n    /// @return rate The lower rate between Chainlink and Uniswap\\n    /// @dev If there is only one rate computed in an oracle contract, then the only rate is returned\\n    /// regardless of the value of the `lower` parameter\\n    /// @dev The rate returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function readLower() external view override returns (uint256 rate) {\\n        (rate, ) = _readAll(inBase);\\n    }\\n\\n    /// @notice Reads rates from the circuit of both Uniswap and Chainlink if there are both circuits\\n    /// and returns either the highest of both rates or the lowest\\n    /// @return rate The upper rate between Chainlink and Uniswap\\n    /// @dev If there is only one rate computed in an oracle contract, then the only rate is returned\\n    /// regardless of the value of the `lower` parameter\\n    /// @dev The rate returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function readUpper() external view override returns (uint256 rate) {\\n        (, rate) = _readAll(inBase);\\n    }\\n\\n    /// @notice Converts an in-currency quote amount to out-currency using one of the rates available in the oracle\\n    /// contract\\n    /// @param quoteAmount Amount (in the input collateral) to be converted to be converted in out-currency\\n    /// @return Quote amount in out-currency from the base amount in in-currency\\n    /// @dev Like in the read function, if the oracle involves a Uniswap and a Chainlink price, this function\\n    /// will use the Uniswap price to compute the out quoteAmount\\n    /// @dev The rate returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function readQuote(uint256 quoteAmount) external view virtual override returns (uint256);\\n\\n    /// @notice Returns the lowest quote amount between Uniswap and Chainlink circuits (if possible). If the oracle\\n    /// contract only involves a single feed, then this returns the value of this feed\\n    /// @param quoteAmount Amount (in the input collateral) to be converted\\n    /// @return The lowest quote amount from the quote amount in in-currency\\n    /// @dev The rate returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function readQuoteLower(uint256 quoteAmount) external view override returns (uint256) {\\n        (uint256 quoteSmall, ) = _readAll(quoteAmount);\\n        return quoteSmall;\\n    }\\n\\n    /// @notice Returns Uniswap and Chainlink values (with the first one being the smallest one) or twice the same value\\n    /// if just Uniswap or just Chainlink is used\\n    /// @param quoteAmount Amount expressed in the in-currency base.\\n    /// @dev If `quoteAmount` is `inBase`, rates are returned\\n    /// @return The first return value is the lowest value and the second parameter is the highest\\n    /// @dev The rate returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function _readAll(uint256 quoteAmount) internal view virtual returns (uint256, uint256) {}\\n}\\n\",\"keccak256\":\"0xdd3fa18d1bc64ac0961ea827b25f4cc2b7981386d70ca597939510a6f3ea6854\",\"license\":\"GPL-3.0\"},\"contracts/oracle/OracleChainlinkMulti.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./modules/ModuleChainlinkMulti.sol\\\";\\nimport \\\"./OracleAbstract.sol\\\";\\n\\n/// @title OracleChainlinkMulti\\n/// @author Angle Core Team\\n/// @notice Oracle contract, one contract is deployed per collateral/stablecoin pair\\n/// @dev This contract concerns an oracle that uses Chainlink with multiple pools to read from\\n/// @dev It inherits the `ModuleChainlinkMulti` contract and like all oracle contracts, this contract\\n/// is an instance of `OracleAstract` that contains some base functions\\ncontract OracleChainlinkMulti is OracleAbstract, ModuleChainlinkMulti {\\n    /// @notice Constructor for an oracle using Chainlink with multiple pools to read from\\n    /// @param _circuitChainlink Chainlink pool addresses (in order)\\n    /// @param _circuitChainIsMultiplied Whether we should multiply or divide by this rate\\n    /// @param _description Description of the assets concerned by the oracle\\n    constructor(\\n        address[] memory _circuitChainlink,\\n        uint8[] memory _circuitChainIsMultiplied,\\n        uint256 _inBase,\\n        uint32 stalePeriod,\\n        address[] memory guardians,\\n        bytes32 _description\\n    ) ModuleChainlinkMulti(_circuitChainlink, _circuitChainIsMultiplied, stalePeriod, guardians) {\\n        inBase = _inBase;\\n        description = _description;\\n    }\\n\\n    /// @notice Reads the rate from the Chainlink circuit\\n    /// @return rate The current rate between the in-currency and out-currency\\n    function read() external view override returns (uint256 rate) {\\n        (rate, ) = _quoteChainlink(BASE);\\n    }\\n\\n    /// @notice Converts an in-currency quote amount to out-currency using Chainlink's circuit\\n    /// @param quoteAmount Amount (in the input collateral) to be converted in out-currency\\n    /// @return Quote amount in out-currency from the base amount in in-currency\\n    /// @dev The amount returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function readQuote(uint256 quoteAmount) external view override returns (uint256) {\\n        return _readQuote(quoteAmount);\\n    }\\n\\n    /// @notice Returns Chainlink quote values twice\\n    /// @param quoteAmount Amount expressed in the in-currency base.\\n    /// @dev If quoteAmount is `inBase`, rates are returned\\n    /// @return The two return values are similar\\n    /// @dev The amount returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function _readAll(uint256 quoteAmount) internal view override returns (uint256, uint256) {\\n        uint256 quote = _readQuote(quoteAmount);\\n        return (quote, quote);\\n    }\\n\\n    /// @notice Internal function to convert an in-currency quote amount to out-currency using Chainlink's circuit\\n    /// @param quoteAmount Amount (in the input collateral) to be converted to be converted in out-currency\\n    /// @dev The amount returned is expressed with base `BASE` (and not the base of the out-currency)\\n    function _readQuote(uint256 quoteAmount) internal view returns (uint256) {\\n        quoteAmount = (quoteAmount * BASE) / inBase;\\n        (quoteAmount, ) = _quoteChainlink(quoteAmount);\\n        // We return only rates with base as decimals\\n        return quoteAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xf24033ebb3563ea0c9489012ea743039c651219c69108c0d756277733f8a54b0\",\"license\":\"GPL-3.0\"},\"contracts/oracle/modules/ModuleChainlinkMulti.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../utils/ChainlinkUtils.sol\\\";\\n\\n/// @title ModuleChainlinkMulti\\n/// @author Angle Core Team\\n/// @notice Module Contract that is going to be used to help compute Chainlink prices\\n/// @dev This contract helps for an oracle using a Chainlink circuit composed of multiple pools\\n/// @dev An oracle using Chainlink is either going to be a `ModuleChainlinkSingle` or a `ModuleChainlinkMulti`\\nabstract contract ModuleChainlinkMulti is ChainlinkUtils {\\n    /// @notice Chanlink pools, the order of the pools has to be the order in which they are read for the computation\\n    /// of the price\\n    AggregatorV3Interface[] public circuitChainlink;\\n    /// @notice Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided\\n    uint8[] public circuitChainIsMultiplied;\\n    /// @notice Decimals for each Chainlink pairs\\n    uint8[] public chainlinkDecimals;\\n\\n    /// @notice Constructor for an oracle using only Chainlink with multiple pools to read from\\n    /// @param _circuitChainlink Chainlink pool addresses (in order)\\n    /// @param _circuitChainIsMultiplied Whether we should multiply or divide by this rate when computing Chainlink price\\n    constructor(\\n        address[] memory _circuitChainlink,\\n        uint8[] memory _circuitChainIsMultiplied,\\n        uint32 _stalePeriod,\\n        address[] memory guardians\\n    ) {\\n        uint256 circuitLength = _circuitChainlink.length;\\n        require(circuitLength > 0, \\\"106\\\");\\n        require(circuitLength == _circuitChainIsMultiplied.length, \\\"104\\\");\\n        // There is no `GOVERNOR_ROLE` in this contract, governor has `GUARDIAN_ROLE`\\n        require(guardians.length > 0, \\\"101\\\");\\n        for (uint256 i = 0; i < guardians.length; i++) {\\n            require(guardians[i] != address(0), \\\"0\\\");\\n            _setupRole(GUARDIAN_ROLE_CHAINLINK, guardians[i]);\\n        }\\n        _setRoleAdmin(GUARDIAN_ROLE_CHAINLINK, GUARDIAN_ROLE_CHAINLINK);\\n\\n        for (uint256 i = 0; i < circuitLength; i++) {\\n            AggregatorV3Interface _pool = AggregatorV3Interface(_circuitChainlink[i]);\\n            circuitChainlink.push(_pool);\\n            chainlinkDecimals.push(_pool.decimals());\\n        }\\n\\n        stalePeriod = _stalePeriod;\\n        circuitChainIsMultiplied = _circuitChainIsMultiplied;\\n    }\\n\\n    /// @notice Reads oracle price using Chainlink circuit\\n    /// @param quoteAmount The amount for which to compute the price expressed with base decimal\\n    /// @return The `quoteAmount` converted in `out-currency`\\n    /// @return The value obtained with the last Chainlink feed queried casted to uint\\n    /// @dev If `quoteAmount` is `BASE_TOKENS`, the output is the oracle rate\\n    function _quoteChainlink(uint256 quoteAmount) internal view returns (uint256, uint256) {\\n        uint256 castedRatio;\\n        // An invariant should be that `circuitChainlink.length > 0` otherwise `castedRatio = 0`\\n        for (uint256 i = 0; i < circuitChainlink.length; i++) {\\n            (quoteAmount, castedRatio) = _readChainlinkFeed(\\n                quoteAmount,\\n                circuitChainlink[i],\\n                circuitChainIsMultiplied[i],\\n                chainlinkDecimals[i],\\n                0\\n            );\\n        }\\n        return (quoteAmount, castedRatio);\\n    }\\n}\\n\",\"keccak256\":\"0xecc7007a1095096a0d6a14bd0b8d15486c5ad580831bf9d6bf9f68c7883d2de3\",\"license\":\"GPL-3.0\"},\"contracts/oracle/utils/ChainlinkUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../../external/AccessControl.sol\\\";\\n\\n/// @title ChainlinkUtils\\n/// @author Angle Core Team\\n/// @notice Utility contract that is used across the different module contracts using Chainlink\\nabstract contract ChainlinkUtils is AccessControl {\\n    /// @notice Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale\\n    uint32 public stalePeriod;\\n\\n    // Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE_CHAINLINK = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    /// @notice Reads a Chainlink feed using a quote amount and converts the quote amount to\\n    /// the out-currency\\n    /// @param quoteAmount The amount for which to compute the price expressed with base decimal\\n    /// @param feed Chainlink feed to query\\n    /// @param multiplied Whether the ratio outputted by Chainlink should be multiplied or divided\\n    /// to the `quoteAmount`\\n    /// @param decimals Number of decimals of the corresponding Chainlink pair\\n    /// @param castedRatio Whether a previous rate has already been computed for this feed\\n    /// This is mostly used in the `_changeUniswapNotFinal` function of the oracles\\n    /// @return The `quoteAmount` converted in out-currency (computed using the second return value)\\n    /// @return The value obtained with the Chainlink feed queried casted to uint\\n    function _readChainlinkFeed(\\n        uint256 quoteAmount,\\n        AggregatorV3Interface feed,\\n        uint8 multiplied,\\n        uint256 decimals,\\n        uint256 castedRatio\\n    ) internal view returns (uint256, uint256) {\\n        if (castedRatio == 0) {\\n            (uint80 roundId, int256 ratio, , uint256 updatedAt, uint80 answeredInRound) = feed.latestRoundData();\\n            require(ratio > 0 && roundId <= answeredInRound && block.timestamp - updatedAt <= stalePeriod, \\\"100\\\");\\n            castedRatio = uint256(ratio);\\n        }\\n        // Checking whether we should multiply or divide by the ratio computed\\n        if (multiplied == 1) quoteAmount = (quoteAmount * castedRatio) / (10**decimals);\\n        else quoteAmount = (quoteAmount * (10**decimals)) / castedRatio;\\n        return (quoteAmount, castedRatio);\\n    }\\n\\n    /// @notice Changes the Stale Period\\n    /// @param _stalePeriod New stale period (in seconds)\\n    function changeStalePeriod(uint32 _stalePeriod) external onlyRole(GUARDIAN_ROLE_CHAINLINK) {\\n        stalePeriod = _stalePeriod;\\n    }\\n}\\n\",\"keccak256\":\"0xd0c54fd6a521f12f30a1f204150637c6ab20606104fb354df74cc63790d09fca\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a4938038062001a498339810160408190526200003491620005d5565b85858484600084519050600081116200007a5760405162461bcd60e51b815260206004820152600360248201526218981b60e91b60448201526064015b60405180910390fd5b83518114620000b25760405162461bcd60e51b81526020600482015260036024820152620c4c0d60ea1b604482015260640162000071565b6000825111620000eb5760405162461bcd60e51b815260206004820152600360248201526231303160e81b604482015260640162000071565b60005b8251811015620001af5760006001600160a01b03168382815181106200011857620001186200079e565b60200260200101516001600160a01b031614156200015d5760405162461bcd60e51b81526020600482015260016024820152600360fc1b604482015260640162000071565b6200019a60008051602062001a298339815191528483815181106200018657620001866200079e565b60200260200101516200034c60201b60201c565b80620001a68162000774565b915050620000ee565b50620001cb60008051602062001a29833981519152806200035c565b60005b8181101562000307576000868281518110620001ee57620001ee6200079e565b6020908102919091018101516004805460018101825560008290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384169081179091556040805163313ce56760e01b81529051939550600694919363313ce567938281019392829003018186803b1580156200027f57600080fd5b505afa15801562000294573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ba9190620006f6565b81546001810183556000928352602092839020928104909201805460ff928316601f9094166101000a93840292909302199092161790555080620002fe8162000774565b915050620001ce565b506003805463ffffffff191663ffffffff851617905583516200033290600590602087019062000454565b505050600096909655505060015550620007ca9350505050565b620003588282620003b0565b5050565b600082815260026020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526002602052604090912060010155565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff16620003585760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620004103390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82805482825590600052602060002090601f01602090048101928215620004ef5791602002820160005b83821115620004be57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200047e565b8015620004ed5782816101000a81549060ff0219169055600101602081600001049283019260010302620004be565b505b50620004fd92915062000501565b5090565b5b80821115620004fd576000815560010162000502565b600082601f8301126200052a57600080fd5b81516020620005436200053d836200074e565b6200071b565b80838252828201915082860187848660051b89010111156200056457600080fd5b6000805b868110156200059b5782516001600160a01b038116811462000588578283fd5b8552938501939185019160010162000568565b509198975050505050505050565b805163ffffffff81168114620005be57600080fd5b919050565b805160ff81168114620005be57600080fd5b60008060008060008060c08789031215620005ef57600080fd5b86516001600160401b03808211156200060757600080fd5b620006158a838b0162000518565b97506020915081890151818111156200062d57600080fd5b8901601f81018b136200063f57600080fd5b8051620006506200053d826200074e565b8082825285820191508584018e878560051b87010111156200067157600080fd5b600094505b838510156200069f576200068a81620005c3565b83526001949094019391860191860162000676565b50809a505050505060408901519550620006bc60608a01620005a9565b94506080890151915080821115620006d357600080fd5b50620006e289828a0162000518565b92505060a087015190509295509295509295565b6000602082840312156200070957600080fd5b6200071482620005c3565b9392505050565b604051601f8201601f191681016001600160401b0381118282101715620007465762000746620007b4565b604052919050565b60006001600160401b038211156200076a576200076a620007b4565b5060051b60200190565b60006000198214156200079757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61124f80620007da6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80637284e416116100d8578063a217fddf1161008c578063d547741f11610066578063d547741f14610361578063dbda63de14610374578063ec342ad01461038757600080fd5b8063a217fddf146102fc578063a5b36a3614610304578063cf330c261461032957600080fd5b806392611e33116100bd57806392611e33146102c65780639aefb5c3146102ce5780639e0a8500146102d757600080fd5b80637284e4161461026757806391d148541461027057600080fd5b806336568abe1161012f578063442133bd11610114578063442133bd1461024457806357de26a41461024c578063630914d11461025457600080fd5b806336568abe1461021457806341f654f71461022757600080fd5b8063248a9ca311610160578063248a9ca3146101c95780632f2ff15d146101ec5780633593ba7b1461020157600080fd5b80630942d09a1461017c578063240fd5ab146101b6575b600080fd5b6101a37f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b6040519081526020015b60405180910390f35b6101a36101c4366004610d76565b610396565b6101a36101d7366004610d76565b60009081526002602052604090206001015490565b6101ff6101fa366004610d8f565b6103a7565b005b6101a361020f366004610d76565b6103d2565b6101ff610222366004610d8f565b6103e6565b61022f610478565b604080519283526020830191909152016101ad565b6101a361048e565b6101a361049b565b6101ff610262366004610dd8565b6104b4565b6101a360015481565b6102b661027e366004610d8f565b600091825260026020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b60405190151581526020016101ad565b6101a3610517565b6101a360005481565b6102ea6102e5366004610d76565b610524565b60405160ff90911681526020016101ad565b6101a3600081565b6003546103149063ffffffff1681565b60405163ffffffff90911681526020016101ad565b61033c610337366004610d76565b610558565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ad565b6101ff61036f366004610d8f565b61058f565b6102ea610382366004610d76565b6105b5565b6101a3670de0b6b3a764000081565b60006103a1826105c5565b92915050565b6000828152600260205260409020600101546103c381336105f7565b6103cd83836106c9565b505050565b6000806103de836107bd565b509392505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461046a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373100000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b61047482826107d5565b5050565b6000806104866000546107bd565b915091509091565b60006103a16000546107bd565b60006104ae670de0b6b3a7640000610890565b50919050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416104df81336105f7565b50600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b60006104ae6000546107bd565b6005818154811061053457600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b6004818154811061056857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000828152600260205260409020600101546105ab81336105f7565b6103cd83836107d5565b6006818154811061053457600080fd5b600080546105db670de0b6b3a76400008461109a565b6105e59190610f38565b91506105f082610890565b5092915050565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166104745761064f8173ffffffffffffffffffffffffffffffffffffffff166014610965565b61065a836020610965565b60405160200161066b929190610e4e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261046191600401610ecf565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661047457600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561075f3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008060006107cb846105c5565b9485945092505050565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561047457600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008080805b60045481101561095d5761094685600483815481106108b7576108b76111bb565b6000918252602090912001546005805473ffffffffffffffffffffffffffffffffffffffff90921691859081106108f0576108f06111bb565b90600052602060002090602091828204019190069054906101000a900460ff1660068581548110610923576109236111bb565b60009182526020808320908204015460ff601f9092166101000a90041690610baf565b90955091508061095581611153565b915050610896565b509293915050565b6060600061097483600261109a565b61097f906002610f20565b67ffffffffffffffff811115610997576109976111ea565b6040519080825280601f01601f1916602001820160405280156109c1576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106109f8576109f86111bb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610a5b57610a5b6111bb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610a9784600261109a565b610aa2906001610f20565b90505b6001811115610b3f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610ae357610ae36111bb565b1a60f81b828281518110610af957610af96111bb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610b388161111e565b9050610aa5565b508315610ba8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610461565b9392505050565b60008082610cf6576000806000808973ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b9190610dfe565b945094505093509350600083138015610c6c57508069ffffffffffffffffffff168469ffffffffffffffffffff1611155b8015610c89575060035463ffffffff16610c8683426110d7565b11155b610cef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f31303000000000000000000000000000000000000000000000000000000000006044820152606401610461565b5090945050505b8460ff1660011415610d2857610d0d84600a610fd4565b610d17848961109a565b610d219190610f38565b9650610d4b565b82610d3485600a610fd4565b610d3e908961109a565b610d489190610f38565b96505b50949590945092505050565b805169ffffffffffffffffffff81168114610d7157600080fd5b919050565b600060208284031215610d8857600080fd5b5035919050565b60008060408385031215610da257600080fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff81168114610dcd57600080fd5b809150509250929050565b600060208284031215610dea57600080fd5b813563ffffffff81168114610ba857600080fd5b600080600080600060a08688031215610e1657600080fd5b610e1f86610d57565b9450602086015193506040860151925060608601519150610e4260808701610d57565b90509295509295909350565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610e868160178501602088016110ee565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610ec38160288401602088016110ee565b01602801949350505050565b6020815260008251806020840152610eee8160408501602087016110ee565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115610f3357610f3361118c565b500190565b600082610f6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b80851115610fcc57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610fb257610fb261118c565b80851615610fbf57918102915b93841c9390800290610f78565b509250929050565b6000610ba88383600082610fea575060016103a1565b81610ff7575060006103a1565b816001811461100d576002811461101757611033565b60019150506103a1565b60ff8411156110285761102861118c565b50506001821b6103a1565b5060208310610133831016604e8410600b8410161715611056575081810a6103a1565b6110608383610f73565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156110925761109261118c565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110d2576110d261118c565b500290565b6000828210156110e9576110e961118c565b500390565b60005b838110156111095781810151838201526020016110f1565b83811115611118576000848401525b50505050565b60008161112d5761112d61118c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111855761118561118c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122004690c83b714e20f4d57dc16285015c773b9da88fde51343cddafcf9aedc465564736f6c6343000807003355435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This contract concerns an oracle that uses Chainlink with multiple pools to read fromIt inherits the `ModuleChainlinkMulti` contract and like all oracle contracts, this contract is an instance of `OracleAstract` that contains some base functions",
    "kind": "dev",
    "methods": {
      "changeStalePeriod(uint32)": { "params": { "_stalePeriod": "New stale period (in seconds)" } },
      "constructor": {
        "params": {
          "_circuitChainIsMultiplied": "Whether we should multiply or divide by this rate",
          "_circuitChainlink": "Chainlink pool addresses (in order)",
          "_description": "Description of the assets concerned by the oracle"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "read()": { "returns": { "rate": "The current rate between the in-currency and out-currency" } },
      "readAll()": {
        "details": "The rate returned is expressed with base `BASE` (and not the base of the out-currency)",
        "returns": { "_0": "Return all available rates (Chainlink and Uniswap) with the lowest rate returned first." }
      },
      "readLower()": {
        "details": "If there is only one rate computed in an oracle contract, then the only rate is returned regardless of the value of the `lower` parameterThe rate returned is expressed with base `BASE` (and not the base of the out-currency)",
        "returns": { "rate": "The lower rate between Chainlink and Uniswap" }
      },
      "readQuote(uint256)": {
        "details": "The amount returned is expressed with base `BASE` (and not the base of the out-currency)",
        "params": { "quoteAmount": "Amount (in the input collateral) to be converted in out-currency" },
        "returns": { "_0": "Quote amount in out-currency from the base amount in in-currency" }
      },
      "readQuoteLower(uint256)": {
        "details": "The rate returned is expressed with base `BASE` (and not the base of the out-currency)",
        "params": { "quoteAmount": "Amount (in the input collateral) to be converted" },
        "returns": { "_0": "The lowest quote amount from the quote amount in in-currency" }
      },
      "readUpper()": {
        "details": "If there is only one rate computed in an oracle contract, then the only rate is returned regardless of the value of the `lower` parameterThe rate returned is expressed with base `BASE` (and not the base of the out-currency)",
        "returns": { "rate": "The upper rate between Chainlink and Uniswap" }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "title": "OracleChainlinkMulti",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE()": { "notice": "Base used for computation" },
      "chainlinkDecimals(uint256)": { "notice": "Decimals for each Chainlink pairs" },
      "changeStalePeriod(uint32)": { "notice": "Changes the Stale Period" },
      "circuitChainIsMultiplied(uint256)": {
        "notice": "Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided"
      },
      "circuitChainlink(uint256)": {
        "notice": "Chanlink pools, the order of the pools has to be the order in which they are read for the computation of the price"
      },
      "constructor": { "notice": "Constructor for an oracle using Chainlink with multiple pools to read from" },
      "description()": { "notice": "Description of the assets concerned by the oracle and the price outputted" },
      "inBase()": { "notice": "Unit of the in-currency" },
      "read()": { "notice": "Reads the rate from the Chainlink circuit" },
      "readAll()": {
        "notice": "Read rates from the circuit of both Uniswap and Chainlink if there are both circuits else returns twice the same price"
      },
      "readLower()": {
        "notice": "Reads rates from the circuit of both Uniswap and Chainlink if there are both circuits and returns either the highest of both rates or the lowest"
      },
      "readQuote(uint256)": {
        "notice": "Converts an in-currency quote amount to out-currency using Chainlink's circuit"
      },
      "readQuoteLower(uint256)": {
        "notice": "Returns the lowest quote amount between Uniswap and Chainlink circuits (if possible). If the oracle contract only involves a single feed, then this returns the value of this feed"
      },
      "readUpper()": {
        "notice": "Reads rates from the circuit of both Uniswap and Chainlink if there are both circuits and returns either the highest of both rates or the lowest"
      },
      "stalePeriod()": {
        "notice": "Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale"
      }
    },
    "notice": "Oracle contract, one contract is deployed per collateral/stablecoin pair",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30458,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "inBase",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 30461,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "description",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 16499,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)16494_storage)"
      },
      {
        "astId": 31956,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "stalePeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 31433,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "circuitChainlink",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(AggregatorV3Interface)45)dyn_storage"
      },
      {
        "astId": 31437,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "circuitChainIsMultiplied",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 31441,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "chainlinkDecimals",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint8)dyn_storage"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_array(t_contract(AggregatorV3Interface)45)dyn_storage": {
        "base": "t_contract(AggregatorV3Interface)45",
        "encoding": "dynamic_array",
        "label": "contract AggregatorV3Interface[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)16494_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)16494_storage"
      },
      "t_struct(RoleData)16494_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16491,
            "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16493,
            "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" },
      "t_uint32": { "encoding": "inplace", "label": "uint32", "numberOfBytes": "4" },
      "t_uint8": { "encoding": "inplace", "label": "uint8", "numberOfBytes": "1" }
    }
  }
}
