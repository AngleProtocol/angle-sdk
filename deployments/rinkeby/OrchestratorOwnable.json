{
  "address": "0x35d785F488ecc1E8BB368daaFc454923FB2456eE",
  "abi": [
    {
      "inputs": [{ "internalType": "address", "name": "_owner", "type": "address" }],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        { "internalType": "contract IStableMaster", "name": "stableMaster", "type": "address" },
        { "internalType": "contract IPoolManager", "name": "poolManager", "type": "address" },
        { "internalType": "contract IPerpetualManager", "name": "perpetualManager", "type": "address" },
        { "internalType": "contract IFeeManager", "name": "feeManager", "type": "address" },
        {
          "components": [
            { "internalType": "uint64[]", "name": "xFeeMint", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "yFeeMint", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "xFeeBurn", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "yFeeBurn", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "xHAFeesDeposit", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "yHAFeesDeposit", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "xHAFeesWithdraw", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "yHAFeesWithdraw", "type": "uint64[]" },
            { "internalType": "uint256[]", "name": "xSlippageFee", "type": "uint256[]" },
            { "internalType": "uint64[]", "name": "ySlippageFee", "type": "uint64[]" },
            { "internalType": "uint256[]", "name": "xSlippage", "type": "uint256[]" },
            { "internalType": "uint64[]", "name": "ySlippage", "type": "uint64[]" },
            { "internalType": "uint256[]", "name": "xBonusMalusMint", "type": "uint256[]" },
            { "internalType": "uint64[]", "name": "yBonusMalusMint", "type": "uint64[]" },
            { "internalType": "uint256[]", "name": "xBonusMalusBurn", "type": "uint256[]" },
            { "internalType": "uint64[]", "name": "yBonusMalusBurn", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "xKeeperFeesClosing", "type": "uint64[]" },
            { "internalType": "uint64[]", "name": "yKeeperFeesClosing", "type": "uint64[]" },
            { "internalType": "uint64", "name": "haFeeDeposit", "type": "uint64" },
            { "internalType": "uint64", "name": "haFeeWithdraw", "type": "uint64" },
            { "internalType": "uint256", "name": "capOnStableMinted", "type": "uint256" },
            { "internalType": "uint256", "name": "maxInterestsDistributed", "type": "uint256" },
            { "internalType": "uint64", "name": "feesForSLPs", "type": "uint64" },
            { "internalType": "uint64", "name": "interestsForSLPs", "type": "uint64" },
            { "internalType": "uint64", "name": "targetHAHedge", "type": "uint64" },
            { "internalType": "uint64", "name": "limitHAHedge", "type": "uint64" },
            { "internalType": "uint64", "name": "maxLeverage", "type": "uint64" },
            { "internalType": "uint64", "name": "maintenanceMargin", "type": "uint64" },
            { "internalType": "uint64", "name": "lockTime", "type": "uint64" },
            { "internalType": "uint64", "name": "keeperFeesLiquidationRatio", "type": "uint64" },
            { "internalType": "uint256", "name": "keeperFeesLiquidationCap", "type": "uint256" },
            { "internalType": "uint256", "name": "keeperFeesClosingCap", "type": "uint256" }
          ],
          "internalType": "struct PoolParameters",
          "name": "p",
          "type": "tuple"
        }
      ],
      "name": "initCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "_newOwner", "type": "address" }],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ddf16bec4cdc8c72e23ab47a301c40aee99c798d3e53a529b626f9a5fda5def",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0x35d785F488ecc1E8BB368daaFc454923FB2456eE",
    "transactionIndex": 18,
    "gasUsed": "1281624",
    "logsBloom": "0x
    "blockHash": "0xe5f0a797bfaa5cd3cf7da8a7aa8b6e33c99f7411e622a17b4ed3a1adf0a615d0",
    "transactionHash": "0x3ddf16bec4cdc8c72e23ab47a301c40aee99c798d3e53a529b626f9a5fda5def",
    "logs": [],
    "blockNumber": 10171700,
    "cumulativeGasUsed": "8940122",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e"],
  "solcInputHash": "f5b703f620df957f43c941891d87f163",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IStableMaster\",\"name\":\"stableMaster\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"contract IPerpetualManager\",\"name\":\"perpetualManager\",\"type\":\"address\"},{\"internalType\":\"contract IFeeManager\",\"name\":\"feeManager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"xFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xHAFeesDeposit\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yHAFeesDeposit\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xHAFeesWithdraw\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yHAFeesWithdraw\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xSlippageFee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"ySlippageFee\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xSlippage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"ySlippage\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xBonusMalusMint\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yBonusMalusMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xBonusMalusBurn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yBonusMalusBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xKeeperFeesClosing\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yKeeperFeesClosing\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"haFeeDeposit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"haFeeWithdraw\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"capOnStableMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInterestsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"feesForSLPs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"interestsForSLPs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"limitHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maintenanceMargin\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"keeperFeesLiquidationRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"keeperFeesLiquidationCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperFeesClosingCap\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolParameters\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"initCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"kind\":\"dev\",\"methods\":{\"initCollateral(address,address,address,address,(uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint64[],uint64[],uint64,uint64,uint256,uint256,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256))\":{\"details\":\"Only the `owner` can call this function\",\"params\":{\"p\":\"List of all the parameters with which to initialize the pool\"}},\"setOwner(address)\":{\"details\":\"With this function the timelock can be given the ownership of the contract\",\"params\":{\"_newOwner\":\"New owner of the contract\"}}},\"title\":\"OrchestratorOwnable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the `owner` of the contract\"},\"initCollateral(address,address,address,address,(uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint64[],uint64[],uint64,uint64,uint256,uint256,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256))\":{\"notice\":\"Initializes a pool\"},\"owner()\":{\"notice\":\"Address that is allowed to call the `initCollateral` function\"},\"setOwner(address)\":{\"notice\":\"Changes the owner of a contract\"}},\"notice\":\"Contract that is used to facilitate the deployment of a given collateral on mainnet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/orchestrator/OrchestratorOwnable.sol\":\"OrchestratorOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb2c30a33c8210d99b5d3eda0c391fde5a91c122361795c65cffc9e0fee6b982e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7afc0ffbbe114c38cc447805e375fe75b3b6a4f947a5b2737225db03825372bf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdff1e21452e346fd841752ea50fb6bc6fd6c502eb27569d3ebb92ee667f3a29d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\\n/// @title Interface of the contract managing perpetuals with claim function\\n/// @author Angle Core Team\\n/// @dev Front interface with rewards function, meaning only user-facing functions\\ninterface IPerpetualManagerFrontWithClaim is IPerpetualManagerFront, IPerpetualManager {\\n    function getReward(uint256 perpetualID) external;\\n}\\n\",\"keccak256\":\"0xdedceeaa33dd4779bcb9a34caf38e4e16849ea801f071308968d80c05c4828bb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0x522874693d1bc7322cd505c644904cf34bf4a9edb8a7f36e8a981cbff1b02085\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISanToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2990e0418bb60d20bde72b7d2ba4dc5bdda028df4301df2a2fe065842393d49\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\",\"keccak256\":\"0xd3c6c2eacc6ae145102609fd930c3f1a1bfe69b119ae820e35dbf28d2c9cf9fe\",\"license\":\"GPL-3.0\"},\"contracts/orchestrator/OrchestratorOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\nimport \\\"../interfaces/IStableMaster.sol\\\";\\n\\npragma solidity ^0.8.7;\\n\\nstruct PoolParameters {\\n    uint64[] xFeeMint;\\n    uint64[] yFeeMint;\\n    uint64[] xFeeBurn;\\n    uint64[] yFeeBurn;\\n    uint64[] xHAFeesDeposit;\\n    uint64[] yHAFeesDeposit;\\n    uint64[] xHAFeesWithdraw;\\n    uint64[] yHAFeesWithdraw;\\n    uint256[] xSlippageFee;\\n    uint64[] ySlippageFee;\\n    uint256[] xSlippage;\\n    uint64[] ySlippage;\\n    uint256[] xBonusMalusMint;\\n    uint64[] yBonusMalusMint;\\n    uint256[] xBonusMalusBurn;\\n    uint64[] yBonusMalusBurn;\\n    uint64[] xKeeperFeesClosing;\\n    uint64[] yKeeperFeesClosing;\\n    uint64 haFeeDeposit;\\n    uint64 haFeeWithdraw;\\n    uint256 capOnStableMinted;\\n    uint256 maxInterestsDistributed;\\n    uint64 feesForSLPs;\\n    uint64 interestsForSLPs;\\n    uint64 targetHAHedge;\\n    uint64 limitHAHedge;\\n    uint64 maxLeverage;\\n    uint64 maintenanceMargin;\\n    uint64 lockTime;\\n    uint64 keeperFeesLiquidationRatio;\\n    uint256 keeperFeesLiquidationCap;\\n    uint256 keeperFeesClosingCap;\\n}\\n\\n/// @title OrchestratorOwnable\\n/// @author Angle Core Team\\n/// @notice Contract that is used to facilitate the deployment of a given collateral on mainnet\\ncontract OrchestratorOwnable {\\n    /// @notice Address that is allowed to call the `initCollateral` function\\n    address public owner;\\n\\n    /// @notice Initializes the `owner` of the contract\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    /// @notice Changes the owner of a contract\\n    /// @param _newOwner New owner of the contract\\n    /// @dev With this function the timelock can be given the ownership of the contract\\n    function setOwner(address _newOwner) external {\\n        require(msg.sender == owner, \\\"79\\\");\\n        owner = _newOwner;\\n    }\\n\\n    /// @notice Initializes a pool\\n    /// @param p List of all the parameters with which to initialize the pool\\n    /// @dev Only the `owner` can call this function\\n\\n    function initCollateral(\\n        IStableMaster stableMaster,\\n        IPoolManager poolManager,\\n        IPerpetualManager perpetualManager,\\n        IFeeManager feeManager,\\n        PoolParameters memory p\\n    ) external {\\n        require(msg.sender == owner, \\\"79\\\");\\n        stableMaster.setUserFees(poolManager, p.xFeeMint, p.yFeeMint, 1);\\n        stableMaster.setUserFees(poolManager, p.xFeeBurn, p.yFeeBurn, 0);\\n\\n        perpetualManager.setHAFees(p.xHAFeesDeposit, p.yHAFeesDeposit, 1);\\n        perpetualManager.setHAFees(p.xHAFeesWithdraw, p.yHAFeesWithdraw, 0);\\n\\n        feeManager.setFees(p.xSlippageFee, p.ySlippageFee, 0);\\n        feeManager.setFees(p.xBonusMalusMint, p.yBonusMalusMint, 1);\\n        feeManager.setFees(p.xBonusMalusBurn, p.yBonusMalusBurn, 2);\\n        feeManager.setFees(p.xSlippage, p.ySlippage, 3);\\n\\n        feeManager.setHAFees(p.haFeeDeposit, p.haFeeWithdraw);\\n\\n        stableMaster.setCapOnStableAndMaxInterests(p.capOnStableMinted, p.maxInterestsDistributed, poolManager);\\n        stableMaster.setIncentivesForSLPs(p.feesForSLPs, p.interestsForSLPs, poolManager);\\n\\n        perpetualManager.setTargetAndLimitHAHedge(p.targetHAHedge, p.limitHAHedge);\\n        perpetualManager.setBoundsPerpetual(p.maxLeverage, p.maintenanceMargin);\\n        perpetualManager.setLockTime(p.lockTime);\\n        perpetualManager.setKeeperFeesLiquidationRatio(p.keeperFeesLiquidationRatio);\\n        perpetualManager.setKeeperFeesCap(p.keeperFeesLiquidationCap, p.keeperFeesClosingCap);\\n        perpetualManager.setKeeperFeesClosing(p.xKeeperFeesClosing, p.yKeeperFeesClosing);\\n\\n        feeManager.updateHA();\\n        feeManager.updateUsersSLP();\\n\\n        stableMaster.unpause(keccak256(\\\"STABLE\\\"), poolManager);\\n        stableMaster.unpause(keccak256(\\\"SLP\\\"), poolManager);\\n        perpetualManager.unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x9689cf85fe8295e5fa461b36d60bf8d75a0af7b63b3f5130bf3e030a96fa279f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161168238038061168283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6115ef806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806313af4035146100465780638da5cb5b1461005b578063d15c35d5146100a4575b600080fd5b610059610054366004610f32565b6100b7565b005b60005461007b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100b2366004610f56565b610184565b60005473ffffffffffffffffffffffffffffffffffffffff16331461013d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373900000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37390000000000000000000000000000000000000000000000000000000000006044820152606401610134565b805160208201516040517fbe8c31ff00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169263be8c31ff926102639289929190600190600401611472565b600060405180830381600087803b15801561027d57600080fd5b505af1158015610291573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663be8c31ff858360400151846060015160006040518563ffffffff1660e01b81526004016102dd9493929190611472565b600060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b50505050608081015160a08201516040517f8211477a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638211477a9261036c9260019060040161145f565b600060405180830381600087803b15801561038657600080fd5b505af115801561039a573d6000803e3d6000fd5b5050505060c081015160e08201516040517f8211477a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638211477a926103fb9260009060040161145f565b600060405180830381600087803b15801561041557600080fd5b505af1158015610429573d6000803e3d6000fd5b505050506101008101516101208201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f19261048c926000906004016113f8565b600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506101808101516101a08201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f19261051d926001906004016113f8565b600060405180830381600087803b15801561053757600080fd5b505af115801561054b573d6000803e3d6000fd5b505050506101c08101516101e08201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f1926105ae926002906004016113f8565b600060405180830381600087803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b505050506101408101516101608201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f19261063f926003906004016113f8565b600060405180830381600087803b15801561065957600080fd5b505af115801561066d573d6000803e3d6000fd5b505050506102408101516102608201516040517f232c28c400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff83169063232c28c490604401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505050506102808101516102a08201516040517f5a3c10f10000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff8581166044830152861690635a3c10f190606401600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b505050506102c08101516102e08201516040517fec5b1bee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff858116604483015286169063ec5b1bee90606401600060405180830381600087803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b505050506103008101516103208201516040517f515dc48000000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff84169063515dc48090604401600060405180830381600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b505050506103408101516103608201516040517ff5d011c500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff84169063f5d011c590604401600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505050506103808101516040517f3675441500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015273ffffffffffffffffffffffffffffffffffffffff841690633675441590602401600060405180830381600087803b1580156109ff57600080fd5b505af1158015610a13573d6000803e3d6000fd5b505050506103a08101516040517fb3b1cb2700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015273ffffffffffffffffffffffffffffffffffffffff84169063b3b1cb2790602401600060405180830381600087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b505050506103c08101516103e08201516040517f47c12e010000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff8416906347c12e0190604401600060405180830381600087803b158015610b2157600080fd5b505af1158015610b35573d6000803e3d6000fd5b505050506102008101516102208201516040517f367f21b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169263367f21b492610b9592600401611431565b600060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166320be420a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16635da3e6f56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6f57600080fd5b505af1158015610c83573d6000803e3d6000fd5b50506040517f59de68660000000000000000000000000000000000000000000000000000000081527ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b4642600482015273ffffffffffffffffffffffffffffffffffffffff8781166024830152881692506359de68669150604401600060405180830381600087803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b50506040517f59de68660000000000000000000000000000000000000000000000000000000081527fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d745600482015273ffffffffffffffffffffffffffffffffffffffff8781166024830152881692506359de68669150604401600060405180830381600087803b158015610dbd57600080fd5b505af1158015610dd1573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e1d57600080fd5b505af1158015610e31573d6000803e3d6000fd5b505050505050505050565b600082601f830112610e4d57600080fd5b81356020610e62610e5d83611541565b6114f2565b80838252828201915082860187848660051b8901011115610e8257600080fd5b60005b85811015610ea157813584529284019290840190600101610e85565b5090979650505050505050565b600082601f830112610ebf57600080fd5b81356020610ecf610e5d83611541565b80838252828201915082860187848660051b8901011115610eef57600080fd5b60005b85811015610ea157610f0382610f15565b84529284019290840190600101610ef2565b803567ffffffffffffffff81168114610f2d57600080fd5b919050565b600060208284031215610f4457600080fd5b8135610f4f81611594565b9392505050565b600080600080600060a08688031215610f6e57600080fd5b8535610f7981611594565b94506020860135610f8981611594565b93506040860135610f9981611594565b92506060860135610fa981611594565b9150608086013567ffffffffffffffff80821115610fc657600080fd5b90870190610400828a031215610fdb57600080fd5b610fe36114c8565b823582811115610ff257600080fd5b610ffe8b828601610eae565b82525060208301358281111561101357600080fd5b61101f8b828601610eae565b60208301525060408301358281111561103757600080fd5b6110438b828601610eae565b60408301525060608301358281111561105b57600080fd5b6110678b828601610eae565b60608301525060808301358281111561107f57600080fd5b61108b8b828601610eae565b60808301525060a0830135828111156110a357600080fd5b6110af8b828601610eae565b60a08301525060c0830135828111156110c757600080fd5b6110d38b828601610eae565b60c08301525060e0830135828111156110eb57600080fd5b6110f78b828601610eae565b60e083015250610100808401358381111561111157600080fd5b61111d8c828701610e3c565b828401525050610120808401358381111561113757600080fd5b6111438c828701610eae565b828401525050610140808401358381111561115d57600080fd5b6111698c828701610e3c565b828401525050610160808401358381111561118357600080fd5b61118f8c828701610eae565b82840152505061018080840135838111156111a957600080fd5b6111b58c828701610e3c565b8284015250506101a080840135838111156111cf57600080fd5b6111db8c828701610eae565b8284015250506101c080840135838111156111f557600080fd5b6112018c828701610e3c565b8284015250506101e0808401358381111561121b57600080fd5b6112278c828701610eae565b828401525050610200808401358381111561124157600080fd5b61124d8c828701610eae565b828401525050610220808401358381111561126757600080fd5b6112738c828701610eae565b8284015250506102409150611289828401610f15565b82820152610260915061129d828401610f15565b9181019190915261028082810135908201526102a080830135908201526102c0906112c9828401610f15565b828201526102e091506112dd828401610f15565b8282015261030091506112f1828401610f15565b828201526103209150611305828401610f15565b828201526103409150611319828401610f15565b82820152610360915061132d828401610f15565b828201526103809150611341828401610f15565b828201526103a09150611355828401610f15565b828201526103c0915081830135828201526103e0915081830135828201528093505050509295509295909350565b600081518084526020808501945080840160005b838110156113b357815187529582019590820190600101611397565b509495945050505050565b600081518084526020808501945080840160005b838110156113b357815167ffffffffffffffff16875295820195908201906001016113d2565b60608152600061140b6060830186611383565b828103602084015261141d81866113be565b91505060ff83166040830152949350505050565b60408152600061144460408301856113be565b828103602084015261145681856113be565b95945050505050565b60608152600061140b60608301866113be565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006114a160808301866113be565b82810360408401526114b381866113be565b91505060ff8316606083015295945050505050565b604051610400810167ffffffffffffffff811182821017156114ec576114ec611565565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561153957611539611565565b604052919050565b600067ffffffffffffffff82111561155b5761155b611565565b5060051b60200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146115b657600080fd5b5056fea2646970667358221220ef7253f5383f8ea57e4eb0dcc03a290cfdb237ef423ca34189cad964bb8ecdf464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806313af4035146100465780638da5cb5b1461005b578063d15c35d5146100a4575b600080fd5b610059610054366004610f32565b6100b7565b005b60005461007b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100b2366004610f56565b610184565b60005473ffffffffffffffffffffffffffffffffffffffff16331461013d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f373900000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37390000000000000000000000000000000000000000000000000000000000006044820152606401610134565b805160208201516040517fbe8c31ff00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169263be8c31ff926102639289929190600190600401611472565b600060405180830381600087803b15801561027d57600080fd5b505af1158015610291573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663be8c31ff858360400151846060015160006040518563ffffffff1660e01b81526004016102dd9493929190611472565b600060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b50505050608081015160a08201516040517f8211477a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638211477a9261036c9260019060040161145f565b600060405180830381600087803b15801561038657600080fd5b505af115801561039a573d6000803e3d6000fd5b5050505060c081015160e08201516040517f8211477a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638211477a926103fb9260009060040161145f565b600060405180830381600087803b15801561041557600080fd5b505af1158015610429573d6000803e3d6000fd5b505050506101008101516101208201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f19261048c926000906004016113f8565b600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506101808101516101a08201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f19261051d926001906004016113f8565b600060405180830381600087803b15801561053757600080fd5b505af115801561054b573d6000803e3d6000fd5b505050506101c08101516101e08201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f1926105ae926002906004016113f8565b600060405180830381600087803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b505050506101408101516101608201516040517f4e6b13f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851692634e6b13f19261063f926003906004016113f8565b600060405180830381600087803b15801561065957600080fd5b505af115801561066d573d6000803e3d6000fd5b505050506102408101516102608201516040517f232c28c400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff83169063232c28c490604401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505050506102808101516102a08201516040517f5a3c10f10000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff8581166044830152861690635a3c10f190606401600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b505050506102c08101516102e08201516040517fec5b1bee00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff858116604483015286169063ec5b1bee90606401600060405180830381600087803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b505050506103008101516103208201516040517f515dc48000000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff84169063515dc48090604401600060405180830381600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b505050506103408101516103608201516040517ff5d011c500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff92831660048201529116602482015273ffffffffffffffffffffffffffffffffffffffff84169063f5d011c590604401600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505050506103808101516040517f3675441500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015273ffffffffffffffffffffffffffffffffffffffff841690633675441590602401600060405180830381600087803b1580156109ff57600080fd5b505af1158015610a13573d6000803e3d6000fd5b505050506103a08101516040517fb3b1cb2700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015273ffffffffffffffffffffffffffffffffffffffff84169063b3b1cb2790602401600060405180830381600087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b505050506103c08101516103e08201516040517f47c12e010000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff8416906347c12e0190604401600060405180830381600087803b158015610b2157600080fd5b505af1158015610b35573d6000803e3d6000fd5b505050506102008101516102208201516040517f367f21b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169263367f21b492610b9592600401611431565b600060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166320be420a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16635da3e6f56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6f57600080fd5b505af1158015610c83573d6000803e3d6000fd5b50506040517f59de68660000000000000000000000000000000000000000000000000000000081527ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b4642600482015273ffffffffffffffffffffffffffffffffffffffff8781166024830152881692506359de68669150604401600060405180830381600087803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b50506040517f59de68660000000000000000000000000000000000000000000000000000000081527fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d745600482015273ffffffffffffffffffffffffffffffffffffffff8781166024830152881692506359de68669150604401600060405180830381600087803b158015610dbd57600080fd5b505af1158015610dd1573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e1d57600080fd5b505af1158015610e31573d6000803e3d6000fd5b505050505050505050565b600082601f830112610e4d57600080fd5b81356020610e62610e5d83611541565b6114f2565b80838252828201915082860187848660051b8901011115610e8257600080fd5b60005b85811015610ea157813584529284019290840190600101610e85565b5090979650505050505050565b600082601f830112610ebf57600080fd5b81356020610ecf610e5d83611541565b80838252828201915082860187848660051b8901011115610eef57600080fd5b60005b85811015610ea157610f0382610f15565b84529284019290840190600101610ef2565b803567ffffffffffffffff81168114610f2d57600080fd5b919050565b600060208284031215610f4457600080fd5b8135610f4f81611594565b9392505050565b600080600080600060a08688031215610f6e57600080fd5b8535610f7981611594565b94506020860135610f8981611594565b93506040860135610f9981611594565b92506060860135610fa981611594565b9150608086013567ffffffffffffffff80821115610fc657600080fd5b90870190610400828a031215610fdb57600080fd5b610fe36114c8565b823582811115610ff257600080fd5b610ffe8b828601610eae565b82525060208301358281111561101357600080fd5b61101f8b828601610eae565b60208301525060408301358281111561103757600080fd5b6110438b828601610eae565b60408301525060608301358281111561105b57600080fd5b6110678b828601610eae565b60608301525060808301358281111561107f57600080fd5b61108b8b828601610eae565b60808301525060a0830135828111156110a357600080fd5b6110af8b828601610eae565b60a08301525060c0830135828111156110c757600080fd5b6110d38b828601610eae565b60c08301525060e0830135828111156110eb57600080fd5b6110f78b828601610eae565b60e083015250610100808401358381111561111157600080fd5b61111d8c828701610e3c565b828401525050610120808401358381111561113757600080fd5b6111438c828701610eae565b828401525050610140808401358381111561115d57600080fd5b6111698c828701610e3c565b828401525050610160808401358381111561118357600080fd5b61118f8c828701610eae565b82840152505061018080840135838111156111a957600080fd5b6111b58c828701610e3c565b8284015250506101a080840135838111156111cf57600080fd5b6111db8c828701610eae565b8284015250506101c080840135838111156111f557600080fd5b6112018c828701610e3c565b8284015250506101e0808401358381111561121b57600080fd5b6112278c828701610eae565b828401525050610200808401358381111561124157600080fd5b61124d8c828701610eae565b828401525050610220808401358381111561126757600080fd5b6112738c828701610eae565b8284015250506102409150611289828401610f15565b82820152610260915061129d828401610f15565b9181019190915261028082810135908201526102a080830135908201526102c0906112c9828401610f15565b828201526102e091506112dd828401610f15565b8282015261030091506112f1828401610f15565b828201526103209150611305828401610f15565b828201526103409150611319828401610f15565b82820152610360915061132d828401610f15565b828201526103809150611341828401610f15565b828201526103a09150611355828401610f15565b828201526103c0915081830135828201526103e0915081830135828201528093505050509295509295909350565b600081518084526020808501945080840160005b838110156113b357815187529582019590820190600101611397565b509495945050505050565b600081518084526020808501945080840160005b838110156113b357815167ffffffffffffffff16875295820195908201906001016113d2565b60608152600061140b6060830186611383565b828103602084015261141d81866113be565b91505060ff83166040830152949350505050565b60408152600061144460408301856113be565b828103602084015261145681856113be565b95945050505050565b60608152600061140b60608301866113be565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006114a160808301866113be565b82810360408401526114b381866113be565b91505060ff8316606083015295945050505050565b604051610400810167ffffffffffffffff811182821017156114ec576114ec611565565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561153957611539611565565b604052919050565b600067ffffffffffffffff82111561155b5761155b611565565b5060051b60200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146115b657600080fd5b5056fea2646970667358221220ef7253f5383f8ea57e4eb0dcc03a290cfdb237ef423ca34189cad964bb8ecdf464736f6c63430008070033",
  "devdoc": {
    "author": "Angle Core Team",
    "kind": "dev",
    "methods": {
      "initCollateral(address,address,address,address,(uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint64[],uint64[],uint64,uint64,uint256,uint256,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256))": {
        "details": "Only the `owner` can call this function",
        "params": { "p": "List of all the parameters with which to initialize the pool" }
      },
      "setOwner(address)": {
        "details": "With this function the timelock can be given the ownership of the contract",
        "params": { "_newOwner": "New owner of the contract" }
      }
    },
    "title": "OrchestratorOwnable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": { "notice": "Initializes the `owner` of the contract" },
      "initCollateral(address,address,address,address,(uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint256[],uint64[],uint64[],uint64[],uint64,uint64,uint256,uint256,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256))": {
        "notice": "Initializes a pool"
      },
      "owner()": { "notice": "Address that is allowed to call the `initCollateral` function" },
      "setOwner(address)": { "notice": "Changes the owner of a contract" }
    },
    "notice": "Contract that is used to facilitate the deployment of a given collateral on mainnet",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32539,
        "contract": "contracts/orchestrator/OrchestratorOwnable.sol:OrchestratorOwnable",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": { "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" } }
  }
}
