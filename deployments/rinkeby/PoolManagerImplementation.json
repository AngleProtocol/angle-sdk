{
  "address": "0xd7Ee3bB85D80706fC8C71866C5A700E8A2EBebf3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "uint256", "name": "amountDistributed", "type": "uint256" }],
      "name": "FeesDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "uint64", "name": "_interestsForSurplus", "type": "uint64" }],
      "name": "InterestsForSurplusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "token", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "strategy", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "debtRatio", "type": "uint256" }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "strategy", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "gain", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "loss", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "debtPayment", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "totalDebt", "type": "uint256" }
      ],
      "name": "StrategyReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "strategy", "type": "address" }],
      "name": "StrategyRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "newSurplusConverter", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "oldSurplusConverter", "type": "address" }
      ],
      "name": "SurplusConverterUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_TOKENS",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLEMASTER_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "_governor", "type": "address" }],
      "name": "addGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "strategy", "type": "address" },
        { "internalType": "uint256", "name": "_debtRatio", "type": "uint256" }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminDebt",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditAvailable",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtOutstanding",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address[]", "name": "governorList", "type": "address[]" },
        { "internalType": "address", "name": "guardian", "type": "address" },
        { "internalType": "contract IPerpetualManager", "name": "_perpetualManager", "type": "address" },
        { "internalType": "contract IFeeManager", "name": "_feeManager", "type": "address" },
        { "internalType": "contract IOracle", "name": "_oracle", "type": "address" }
      ],
      "name": "deployCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedAPR",
      "outputs": [{ "internalType": "uint256", "name": "apr", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [{ "internalType": "contract IFeeManager", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAsset",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_token", "type": "address" },
        { "internalType": "contract IStableMaster", "name": "_stableMaster", "type": "address" }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestsAccumulated",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestsForSurplus",
      "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perpetualManager",
      "outputs": [{ "internalType": "contract IPerpetualManager", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "pushSurplus", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [
        { "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "amountToRecover", "type": "uint256" }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "_governor", "type": "address" }],
      "name": "removeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "gain", "type": "uint256" },
        { "internalType": "uint256", "name": "loss", "type": "uint256" },
        { "internalType": "uint256", "name": "debtPayment", "type": "uint256" }
      ],
      "name": "report",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "guardian", "type": "address" }],
      "name": "revokeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "strategy", "type": "address" }],
      "name": "revokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract IFeeManager", "name": "_feeManager", "type": "address" }],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_guardian", "type": "address" },
        { "internalType": "address", "name": "guardian", "type": "address" }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint64", "name": "_interestsForSurplus", "type": "uint64" }],
      "name": "setInterestsForSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "strategy", "type": "address" }],
      "name": "setStrategyEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "newSurplusConverter", "type": "address" }],
      "name": "setSurplusConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableMaster",
      "outputs": [{ "internalType": "contract IStableMaster", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "strategies",
      "outputs": [
        { "internalType": "uint256", "name": "lastReport", "type": "uint256" },
        { "internalType": "uint256", "name": "totalStrategyDebt", "type": "uint256" },
        { "internalType": "uint256", "name": "debtRatio", "type": "uint256" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "strategyList",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusConverter",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "strategy", "type": "address" },
        { "internalType": "uint256", "name": "_debtRatio", "type": "uint256" }
      ],
      "name": "updateStrategyDebtRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "contract IStrategy", "name": "strategy", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "withdrawFromStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebf968c2e46dd4e7bb198d430877253deb1a69efbbf4dee8842f84de7a0100f0",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0xd7Ee3bB85D80706fC8C71866C5A700E8A2EBebf3",
    "transactionIndex": 7,
    "gasUsed": "4163429",
    "logsBloom": "0x
    "blockHash": "0x443aae124705b0274c9072c9849d4b99e85c4e14f63d70bc7a89414b8bcaee02",
    "transactionHash": "0xebf968c2e46dd4e7bb198d430877253deb1a69efbbf4dee8842f84de7a0100f0",
    "logs": [],
    "blockNumber": 10171708,
    "cumulativeGasUsed": "5337429",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f5b703f620df957f43c941891d87f163",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDistributed\",\"type\":\"uint256\"}],\"name\":\"FeesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_interestsForSurplus\",\"type\":\"uint64\"}],\"name\":\"InterestsForSurplusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSurplusConverter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSurplusConverter\",\"type\":\"address\"}],\"name\":\"SurplusConverterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLEMASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"contract IPerpetualManager\",\"name\":\"_perpetualManager\",\"type\":\"address\"},{\"internalType\":\"contract IFeeManager\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"deployCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IStableMaster\",\"name\":\"_stableMaster\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsForSurplus\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpetualManager\",\"outputs\":[{\"internalType\":\"contract IPerpetualManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_interestsForSurplus\",\"type\":\"uint64\"}],\"name\":\"setInterestsForSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setStrategyEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSurplusConverter\",\"type\":\"address\"}],\"name\":\"setSurplusConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableMaster\",\"outputs\":[{\"internalType\":\"contract IStableMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStrategyDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusConverter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"updateStrategyDebtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This file contains the functions that are callable by governance or by other contracts of the protocolReferences to this contract are called `PoolManager`\",\"kind\":\"dev\",\"methods\":{\"addGovernor(address)\":{\"params\":{\"_governor\":\"New governor address\"}},\"addStrategy(address,uint256)\":{\"details\":\"Multiple checks are made. For instance, the contract must not already belong to the `PoolManager` and the underlying token of the strategy has to be consistent with the `PoolManager` contractsThis function is a `governor` function and not a `guardian` one because a `guardian` could add a strategy enabling the withdraw of the funds of the protocolThe `_debtRatio` should be expressed in `BASE_PARAMS`\",\"params\":{\"_debtRatio\":\"The share of the total assets that the strategy has access to\",\"strategy\":\"The address of the strategy to add\"}},\"creditAvailable()\":{\"details\":\"Since this function is a view function, there is no need to have an access control logic even though it will just be relevant for a strategyManipulating `_getTotalAsset` with a flashloan will only result in tokens being transferred at the cost of the caller\",\"returns\":{\"_0\":\"Amount of token a strategy has access to as a credit line\"}},\"debtOutstanding()\":{\"details\":\"Manipulating `_getTotalAsset` with a flashloan will only result in tokens being transferred at the cost of the caller\",\"returns\":{\"_0\":\"Amount of token a strategy has to reimburse\"}},\"deployCollateral(address[],address,address,address,address)\":{\"params\":{\"_feeManager\":\"Reference to the `FeeManager` contract that will serve for the `PerpetualManager` contract\",\"_oracle\":\"Reference to the `Oracle` contract that will serve for the `PerpetualManager` contract\",\"_perpetualManager\":\"New reference to the `PerpetualManager` contract containing all the logic for HAs\",\"governorList\":\"List of the governor addresses of protocol\",\"guardian\":\"Address of the guardian of the protocol (it can be revoked)\"}},\"estimatedAPR()\":{\"details\":\"This function is an estimation and is made for external use onlyThis does not take into account transaction fees which accrue to SLPs tooThis can be manipulated by a flash loan attack (SLP deposit/ withdraw) via `_getTotalAsset` when entering you should make sure this hasn't be called by a flash loan and look at a mean of past APR.\"},\"getBalance()\":{\"details\":\"This balance does not take into account what has been lent to strategies\",\"returns\":{\"_0\":\"The amount of the underlying collateral that the contract currently owns\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalAsset()\":{\"details\":\"This is the value that is used to compute the debt ratio for a given strategy\",\"returns\":{\"_0\":\"The amount of collateral owned by this contract plus the amount that has been lent to strategies\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_stableMaster\":\"Reference to the master stablecoin (`StableMaster`) interface\",\"_token\":\"Address of the collateral\"}},\"pushSurplus()\":{\"details\":\"This function is permissionless and anyone can transfer the `interestsAccumulated` by the protocol to the `surplusConverter`\"},\"recoverERC20(address,address,uint256)\":{\"details\":\"As this function can be used to transfer funds to another contract, it has to be a `GOVERNOR` functionIn case the concerned token is the specific token handled by this contract, this function checks that the amount entered is not too big and approximates the surplus of the protocolTo esimate the amount of user claims on the concerned collateral, this function uses the `stocksUsers` for this collateral, but this is just an approximation as users can claim the collateral of their choice provided that they own a stablecoinThe sanity check excludes the HA claims: to get a sense of it, this function would need to compute the cash out amount of all the perpetuals, and this cannot be done on-chain in a cheap mannerOverall, even though there is a sanity check, this function relies on the fact that governance is not corrupted in this protocol and will not try to withdraw too much funds\",\"params\":{\"amountToRecover\":\"Amount of collateral to transfer\",\"to\":\"Address of the contract to send collateral to\",\"tokenAddress\":\"Address of the token to recover\"}},\"removeGovernor(address)\":{\"params\":{\"_governor\":\"Governor address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"report(uint256,uint256,uint256)\":{\"details\":\"This is the main contact point where the strategy interacts with the `PoolManager`The strategy reports back what it has free, then the `PoolManager` contract \\\"decides\\\" whether to take some back or give it more. Note that the most it can take is `gain + _debtPayment`, and the most it can give is all of the remaining reserves. Anything outside of those bounds is abnormal behavior.\",\"params\":{\"debtPayment\":\"Amount strategy has made available to cover outstanding debt\",\"gain\":\"Amount strategy has realized as a gain on its investment since its last report, and is free to be given back to `PoolManager` as earnings\",\"loss\":\"Amount strategy has realized as a loss on its investment since its last report, and should be accounted for on the `PoolManager`'s balance sheet. The loss will reduce the `debtRatio`. The next time the strategy will harvest, it will pay back the debt in an attempt to adjust to the new debt limit.\"}},\"revokeGuardian(address)\":{\"params\":{\"guardian\":\"Address of the guardian to revoke\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"revokeStrategy(address)\":{\"details\":\"This should only be called after the following happened in order: the `strategy.debtRatio` has been set to 0, `harvest` has been called enough times to recover all capital gain/losses.\",\"params\":{\"strategy\":\"The address of the strategy to revoke\"}},\"setFeeManager(address)\":{\"params\":{\"_feeManager\":\"New `FeeManager` contract\"}},\"setGuardian(address,address)\":{\"params\":{\"_guardian\":\"New guardian address\",\"guardian\":\"Old guardian address to revoke\"}},\"setInterestsForSurplus(uint64)\":{\"details\":\"Guardian should make sure the incentives for SLPs are still high enough for them to enter the protocol\",\"params\":{\"_interestsForSurplus\":\"New value of the interests going directly to the surplus for buybacks\"}},\"setStrategyEmergencyExit(address)\":{\"params\":{\"strategy\":\"The address of the `Strategy`\"}},\"setSurplusConverter(address)\":{\"details\":\"It is as if the `GUARDIAN_ROLE` was admin of the `SURPLUS_DISTRIBUTOR_ROLE`The address can be the zero address in case the protocol revokes the `surplusConverter`\",\"params\":{\"newSurplusConverter\":\"Address to which the role needs to be granted\"}},\"updateStrategyDebtRatio(address,uint256)\":{\"details\":\"The update has to be such that the `debtRatio` does not exceeds the 100% threshold as this `PoolManager` cannot lend collateral that it doesn't not own.`_debtRatio` is stored as a uint256 but as any parameter of the protocol, it should be expressed in `BASE_PARAMS`\",\"params\":{\"_debtRatio\":\"The share of the total assets that the strategy has access to\",\"strategy\":\"The address of the Strategy\"}},\"withdrawFromStrategy(address,uint256)\":{\"details\":\"This function tries to recover `amount` from the strategy, but it may not go through as we may not be able to withdraw from the lending protocol the full amountIn this last case we only update the parameters by setting the loss as the gap between what has been asked and what has been returned.\",\"params\":{\"amount\":\"The amount to withdraw\",\"strategy\":\"The address of the strategy\"}}},\"title\":\"PoolManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE_PARAMS()\":{\"notice\":\"Base that is used to define parameters that need to have a floating value (for instance parameters that are defined as ratios)\"},\"BASE_TOKENS()\":{\"notice\":\"Base that is used to compute ratios and floating numbers\"},\"GOVERNOR_ROLE()\":{\"notice\":\"Role for governors only\"},\"GUARDIAN_ROLE()\":{\"notice\":\"Role for guardians and governors\"},\"STABLEMASTER_ROLE()\":{\"notice\":\"Role for `StableMaster` only\"},\"STRATEGY_ROLE()\":{\"notice\":\"Role for `Strategy` only\"},\"addGovernor(address)\":{\"notice\":\"Adds a new governor address and echoes it to other contracts\"},\"addStrategy(address,uint256)\":{\"notice\":\"Adds a strategy to the `PoolManager`\"},\"adminDebt()\":{\"notice\":\"Debt that must be paid by admins after a loss on a strategy\"},\"creditAvailable()\":{\"notice\":\"Tells a strategy how much it can borrow from this `PoolManager`\"},\"debtOutstanding()\":{\"notice\":\"Tells a strategy how much it owes to this `PoolManager`\"},\"debtRatio()\":{\"notice\":\"Proportion of the funds managed dedicated to strategies Has to be between 0 and `BASE_PARAMS`\"},\"deployCollateral(address[],address,address,address,address)\":{\"notice\":\"Changes the references to contracts from this protocol with which this collateral `PoolManager` interacts and propagates some references to the `perpetualManager` and `feeManager` contracts\"},\"estimatedAPR()\":{\"notice\":\"Provides an estimated Annual Percentage Rate for SLPs based on lending to other protocols\"},\"feeManager()\":{\"notice\":\"FeeManager contract for this collateral/stablecoin pair This reference can be updated by the `StableMaster` and change is going to be propagated to the `PerpetualManager` from this contract\"},\"getBalance()\":{\"notice\":\"Gets the current balance of this `PoolManager` contract\"},\"getTotalAsset()\":{\"notice\":\"Gets the total amount of collateral that is controlled by this `PoolManager` contract\"},\"initialize(address,address)\":{\"notice\":\"Constructor of the `PoolManager` contract\"},\"interestsAccumulated()\":{\"notice\":\"Interests accumulated by the protocol and to be distributed through ANGLE or veANGLE token holders\"},\"interestsForSurplus()\":{\"notice\":\"Share of the interests going to surplus and share going to SLPs\"},\"perpetualManager()\":{\"notice\":\"Reference to the `PerpetualManager` for this collateral/stablecoin pair `PerpetualManager` is an upgradeable contract, there is therefore no need to be able to update this reference\"},\"pushSurplus()\":{\"notice\":\"Allows to push interests revenue accumulated by the protocol to the `surplusConverter` to do buybacks  or another form of redistribution to ANGLE or veANGLE token holders\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Allows to recover any ERC20 token, including the token handled by this contract, and to send it to a contract\"},\"removeGovernor(address)\":{\"notice\":\"Removes a governor address and echoes it to other contracts\"},\"report(uint256,uint256,uint256)\":{\"notice\":\"Reports the gains or loss made by a strategy\"},\"revokeGuardian(address)\":{\"notice\":\"Revokes the guardian address and echoes the change to other contracts that interact with this `PoolManager`\"},\"revokeStrategy(address)\":{\"notice\":\"Revokes a strategy\"},\"setFeeManager(address)\":{\"notice\":\"Allows to propagate the change of keeper for the collateral/stablecoin pair\"},\"setGuardian(address,address)\":{\"notice\":\"Changes the guardian address and echoes it to other contracts that interact with this `PoolManager`\"},\"setInterestsForSurplus(uint64)\":{\"notice\":\"Sets the share of the interests going directly to the surplus\"},\"setStrategyEmergencyExit(address)\":{\"notice\":\"Triggers an emergency exit for a strategy and then harvests it to fetch all the funds\"},\"setSurplusConverter(address)\":{\"notice\":\"Sets a new surplus distributor to which surplus from the protocol will be pushed\"},\"stableMaster()\":{\"notice\":\"Reference to the `StableMaster` contract corresponding to this `PoolManager`\"},\"strategies(address)\":{\"notice\":\"The struct `StrategyParams` is defined in the interface `IPoolManager`Mapping between the address of a strategy contract and its corresponding details\"},\"strategyList(uint256)\":{\"notice\":\"List of the current strategies\"},\"surplusConverter()\":{\"notice\":\"Address of the surplus distributor allowed to distribute rewards\"},\"token()\":{\"notice\":\"Interface for the underlying token accepted by this contract\"},\"totalDebt()\":{\"notice\":\"Funds currently given to strategies\"},\"updateStrategyDebtRatio(address,uint256)\":{\"notice\":\"Modifies the funds a strategy has access to\"},\"withdrawFromStrategy(address,uint256)\":{\"notice\":\"Withdraws a given amount from a strategy\"}},\"notice\":\"The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin, it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol to get yield on its collateral\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/poolManager/PoolManager.sol\":\"PoolManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/external/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x161129b95e15270676c09330a5518e4d812b65af30a675a376dc2da463b01238\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb2c30a33c8210d99b5d3eda0c391fde5a91c122361795c65cffc9e0fee6b982e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7afc0ffbbe114c38cc447805e375fe75b3b6a4f947a5b2737225db03825372bf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdff1e21452e346fd841752ea50fb6bc6fd6c502eb27569d3ebb92ee667f3a29d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\\n/// @title Interface of the contract managing perpetuals with claim function\\n/// @author Angle Core Team\\n/// @dev Front interface with rewards function, meaning only user-facing functions\\ninterface IPerpetualManagerFrontWithClaim is IPerpetualManagerFront, IPerpetualManager {\\n    function getReward(uint256 perpetualID) external;\\n}\\n\",\"keccak256\":\"0xdedceeaa33dd4779bcb9a34caf38e4e16849ea801f071308968d80c05c4828bb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0x522874693d1bc7322cd505c644904cf34bf4a9edb8a7f36e8a981cbff1b02085\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISanToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2990e0418bb60d20bde72b7d2ba4dc5bdda028df4301df2a2fe065842393d49\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\",\"keccak256\":\"0xd3c6c2eacc6ae145102609fd930c3f1a1bfe69b119ae820e35dbf28d2c9cf9fe\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\",\"keccak256\":\"0x20a728d054df379cf30435b21cf51d8bb7038eb810b42ac2f1ab9496ceec61f6\",\"license\":\"GPL-3.0\"},\"contracts/poolManager/PoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerInternal.sol\\\";\\n\\n/// @title PoolManager\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains the functions that are callable by governance or by other contracts of the protocol\\n/// @dev References to this contract are called `PoolManager`\\ncontract PoolManager is PoolManagerInternal, IPoolManagerFunctions {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @notice Constructor of the `PoolManager` contract\\n    /// @param _token Address of the collateral\\n    /// @param _stableMaster Reference to the master stablecoin (`StableMaster`) interface\\n    function initialize(address _token, IStableMaster _stableMaster)\\n        external\\n        initializer\\n        zeroCheck(_token)\\n        zeroCheck(address(_stableMaster))\\n    {\\n        __AccessControl_init();\\n\\n        // Creating the correct references\\n        stableMaster = _stableMaster;\\n        token = IERC20(_token);\\n\\n        // Access Control\\n        // The roles in this contract can only be modified from the `StableMaster`\\n        // For the moment `StableMaster` never uses the `GOVERNOR_ROLE`\\n        _setupRole(STABLEMASTER_ROLE, address(stableMaster));\\n        _setRoleAdmin(STABLEMASTER_ROLE, STABLEMASTER_ROLE);\\n        _setRoleAdmin(GOVERNOR_ROLE, STABLEMASTER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, STABLEMASTER_ROLE);\\n        // No admin is set for `STRATEGY_ROLE`, checks are made in the appropriate functions\\n        // `addStrategy` and `revokeStrategy`\\n    }\\n\\n    /*\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n    */\\n\\n    // ========================= `StableMaster` Functions ==========================\\n\\n    /// @notice Changes the references to contracts from this protocol with which this collateral `PoolManager` interacts\\n    /// and propagates some references to the `perpetualManager` and `feeManager` contracts\\n    /// @param governorList List of the governor addresses of protocol\\n    /// @param guardian Address of the guardian of the protocol (it can be revoked)\\n    /// @param _perpetualManager New reference to the `PerpetualManager` contract containing all the logic for HAs\\n    /// @param _feeManager Reference to the `FeeManager` contract that will serve for the `PerpetualManager` contract\\n    /// @param _oracle Reference to the `Oracle` contract that will serve for the `PerpetualManager` contract\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager _feeManager,\\n        IOracle _oracle\\n    ) external override onlyRole(STABLEMASTER_ROLE) {\\n        // These references need to be stored to be able to propagate changes and maintain\\n        // the protocol's integrity when changes are posted from the `StableMaster`\\n        perpetualManager = _perpetualManager;\\n        feeManager = _feeManager;\\n\\n        // Access control\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _grantRole(GOVERNOR_ROLE, governorList[i]);\\n            _grantRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        _grantRole(GUARDIAN_ROLE, guardian);\\n\\n        // Propagates the changes to the other involved contracts\\n        perpetualManager.deployCollateral(governorList, guardian, _feeManager, _oracle);\\n        _feeManager.deployCollateral(governorList, guardian, address(_perpetualManager));\\n\\n        // `StableMaster` and `PerpetualManager` need to have approval to directly transfer some of\\n        // this contract's tokens\\n        token.safeIncreaseAllowance(address(stableMaster), type(uint256).max);\\n        token.safeIncreaseAllowance(address(_perpetualManager), type(uint256).max);\\n    }\\n\\n    /// @notice Adds a new governor address and echoes it to other contracts\\n    /// @param _governor New governor address\\n    function addGovernor(address _governor) external override onlyRole(STABLEMASTER_ROLE) {\\n        // Access control for this contract\\n        _grantRole(GOVERNOR_ROLE, _governor);\\n        // Echoes the change to other contracts interacting with this collateral `PoolManager`\\n        // Since the other contracts interacting with this `PoolManager` do not have governor roles,\\n        // we just need it to set the new governor as guardian in these contracts\\n        _addGuardian(_governor);\\n    }\\n\\n    /// @notice Removes a governor address and echoes it to other contracts\\n    /// @param _governor Governor address to remove\\n    function removeGovernor(address _governor) external override onlyRole(STABLEMASTER_ROLE) {\\n        // Access control for this contract\\n        _revokeRole(GOVERNOR_ROLE, _governor);\\n        _revokeGuardian(_governor);\\n    }\\n\\n    /// @notice Changes the guardian address and echoes it to other contracts that interact with this `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @param guardian Old guardian address to revoke\\n    function setGuardian(address _guardian, address guardian) external override onlyRole(STABLEMASTER_ROLE) {\\n        _revokeGuardian(guardian);\\n        _addGuardian(_guardian);\\n    }\\n\\n    /// @notice Revokes the guardian address and echoes the change to other contracts that interact with this `PoolManager`\\n    /// @param guardian Address of the guardian to revoke\\n    function revokeGuardian(address guardian) external override onlyRole(STABLEMASTER_ROLE) {\\n        _revokeGuardian(guardian);\\n    }\\n\\n    /// @notice Allows to propagate the change of keeper for the collateral/stablecoin pair\\n    /// @param _feeManager New `FeeManager` contract\\n    function setFeeManager(IFeeManager _feeManager) external override onlyRole(STABLEMASTER_ROLE) {\\n        // Changing the reference in the `PerpetualManager` contract where keepers are involved\\n        feeManager = _feeManager;\\n        perpetualManager.setFeeManager(_feeManager);\\n    }\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Provides an estimated Annual Percentage Rate for SLPs based on lending to other protocols\\n    /// @dev This function is an estimation and is made for external use only\\n    /// @dev This does not take into account transaction fees which accrue to SLPs too\\n    /// @dev This can be manipulated by a flash loan attack (SLP deposit/ withdraw) via `_getTotalAsset`\\n    /// when entering you should make sure this hasn't be called by a flash loan and look\\n    /// at a mean of past APR.\\n    function estimatedAPR() external view returns (uint256 apr) {\\n        apr = 0;\\n        (, ISanToken sanTokenForAPR, , , , uint256 sanRate, , SLPData memory slpData, ) = stableMaster.collateralMap(\\n            IPoolManager(address(this))\\n        );\\n        uint256 supply = sanTokenForAPR.totalSupply();\\n\\n        // `sanRate` should never be equal to 0\\n        if (supply == 0) return type(uint256).max;\\n\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            apr =\\n                apr +\\n                (strategies[strategyList[i]].debtRatio * IStrategy(strategyList[i]).estimatedAPR()) /\\n                BASE_PARAMS;\\n        }\\n        apr = (apr * slpData.interestsForSLPs * _getTotalAsset()) / sanRate / supply;\\n    }\\n\\n    /// @notice Tells a strategy how much it can borrow from this `PoolManager`\\n    /// @return Amount of token a strategy has access to as a credit line\\n    /// @dev Since this function is a view function, there is no need to have an access control logic\\n    /// even though it will just be relevant for a strategy\\n    /// @dev Manipulating `_getTotalAsset` with a flashloan will only\\n    /// result in tokens being transferred at the cost of the caller\\n    function creditAvailable() external view override returns (uint256) {\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        uint256 target = (_getTotalAsset() * params.debtRatio) / BASE_PARAMS;\\n\\n        if (target < params.totalStrategyDebt) return 0;\\n\\n        return Math.min(target - params.totalStrategyDebt, _getBalance());\\n    }\\n\\n    /// @notice Tells a strategy how much it owes to this `PoolManager`\\n    /// @return Amount of token a strategy has to reimburse\\n    /// @dev Manipulating `_getTotalAsset` with a flashloan will only\\n    /// result in tokens being transferred at the cost of the caller\\n    function debtOutstanding() external view override returns (uint256) {\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        uint256 target = (_getTotalAsset() * params.debtRatio) / BASE_PARAMS;\\n\\n        if (target > params.totalStrategyDebt) return 0;\\n\\n        return (params.totalStrategyDebt - target);\\n    }\\n\\n    /// @notice Reports the gains or loss made by a strategy\\n    /// @param gain Amount strategy has realized as a gain on its investment since its\\n    /// last report, and is free to be given back to `PoolManager` as earnings\\n    /// @param loss Amount strategy has realized as a loss on its investment since its\\n    /// last report, and should be accounted for on the `PoolManager`'s balance sheet.\\n    /// The loss will reduce the `debtRatio`. The next time the strategy will harvest,\\n    /// it will pay back the debt in an attempt to adjust to the new debt limit.\\n    /// @param debtPayment Amount strategy has made available to cover outstanding debt\\n    /// @dev This is the main contact point where the strategy interacts with the `PoolManager`\\n    /// @dev The strategy reports back what it has free, then the `PoolManager` contract \\\"decides\\\"\\n    /// whether to take some back or give it more. Note that the most it can\\n    /// take is `gain + _debtPayment`, and the most it can give is all of the\\n    /// remaining reserves. Anything outside of those bounds is abnormal behavior.\\n    function report(\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment\\n    ) external override onlyRole(STRATEGY_ROLE) {\\n        require(token.balanceOf(msg.sender) >= gain + debtPayment, \\\"72\\\");\\n\\n        StrategyParams storage params = strategies[msg.sender];\\n        // Updating parameters in the `perpetualManager`\\n        // This needs to be done now because it has implications in `_getTotalAsset()`\\n        params.totalStrategyDebt = params.totalStrategyDebt + gain - loss;\\n        totalDebt = totalDebt + gain - loss;\\n        params.lastReport = block.timestamp;\\n\\n        // Warning: `_getTotalAsset` could be manipulated by flashloan attacks.\\n        // It may allow external users to transfer funds into strategy or remove funds\\n        // from the strategy. Yet, as it does not impact the profit or loss and as attackers\\n        // have no interest in making such txs to have a direct profit, we let it as is.\\n        // The only issue is if the strategy is compromised; in this case governance\\n        // should revoke the strategy\\n        uint256 target = ((_getTotalAsset()) * params.debtRatio) / BASE_PARAMS;\\n        if (target > params.totalStrategyDebt) {\\n            // If the strategy has some credit left, tokens can be transferred to this strategy\\n            uint256 available = Math.min(target - params.totalStrategyDebt, _getBalance());\\n            params.totalStrategyDebt = params.totalStrategyDebt + available;\\n            totalDebt = totalDebt + available;\\n            if (available > 0) {\\n                token.safeTransfer(msg.sender, available);\\n            }\\n        } else {\\n            uint256 available = Math.min(params.totalStrategyDebt - target, debtPayment + gain);\\n            params.totalStrategyDebt = params.totalStrategyDebt - available;\\n            totalDebt = totalDebt - available;\\n            if (available > 0) {\\n                token.safeTransferFrom(msg.sender, address(this), available);\\n            }\\n        }\\n        emit StrategyReported(msg.sender, gain, loss, debtPayment, params.totalStrategyDebt);\\n\\n        // Handle gains before losses\\n        if (gain > 0) {\\n            uint256 gainForSurplus = (gain * interestsForSurplus) / BASE_PARAMS;\\n            uint256 adminDebtPre = adminDebt;\\n            // Depending on the current admin debt distribute the necessary gain from the strategies\\n            if (adminDebtPre == 0) interestsAccumulated += gainForSurplus;\\n            else if (adminDebtPre <= gainForSurplus) {\\n                interestsAccumulated += gainForSurplus - adminDebtPre;\\n                adminDebt = 0;\\n            } else adminDebt -= gainForSurplus;\\n            stableMaster.accumulateInterest(gain - gainForSurplus);\\n            emit FeesDistributed(gain);\\n        }\\n\\n        // Handle eventual losses\\n        if (loss > 0) {\\n            uint256 lossForSurplus = (loss * interestsForSurplus) / BASE_PARAMS;\\n            uint256 interestsAccumulatedPreLoss = interestsAccumulated;\\n            // If the loss can not be entirely soaked by the interests to be distributed then\\n            // the protocol keeps track of the debt\\n            if (lossForSurplus > interestsAccumulatedPreLoss) {\\n                interestsAccumulated = 0;\\n                adminDebt += lossForSurplus - interestsAccumulatedPreLoss;\\n            } else interestsAccumulated -= lossForSurplus;\\n            // The rest is incurred to SLPs\\n            stableMaster.signalLoss(loss - lossForSurplus);\\n        }\\n    }\\n\\n    // =========================== Governor Functions ==============================\\n\\n    /// @notice Allows to recover any ERC20 token, including the token handled by this contract, and to send it\\n    /// to a contract\\n    /// @param tokenAddress Address of the token to recover\\n    /// @param to Address of the contract to send collateral to\\n    /// @param amountToRecover Amount of collateral to transfer\\n    /// @dev As this function can be used to transfer funds to another contract, it has to be a `GOVERNOR` function\\n    /// @dev In case the concerned token is the specific token handled by this contract, this function checks that the\\n    /// amount entered is not too big and approximates the surplus of the protocol\\n    /// @dev To esimate the amount of user claims on the concerned collateral, this function uses the `stocksUsers` for\\n    /// this collateral, but this is just an approximation as users can claim the collateral of their choice provided\\n    /// that they own a stablecoin\\n    /// @dev The sanity check excludes the HA claims: to get a sense of it, this function would need to compute the cash out\\n    /// amount of all the perpetuals, and this cannot be done on-chain in a cheap manner\\n    /// @dev Overall, even though there is a sanity check, this function relies on the fact that governance is not corrupted\\n    /// in this protocol and will not try to withdraw too much funds\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amountToRecover\\n    ) external onlyRole(GOVERNOR_ROLE) {\\n        if (tokenAddress == address(token)) {\\n            // Fetching info from the `StableMaster`\\n            (\\n                ,\\n                ISanToken sanToken,\\n                ,\\n                IOracle oracle,\\n                uint256 stocksUsers,\\n                uint256 sanRate,\\n                uint256 collatBase,\\n                ,\\n\\n            ) = IStableMaster(stableMaster).collateralMap(IPoolManager(address(this)));\\n\\n            // Checking if there are enough reserves for the amount to withdraw\\n            require(\\n                _getTotalAsset() >=\\n                    amountToRecover +\\n                        (sanToken.totalSupply() * sanRate) /\\n                        BASE_TOKENS +\\n                        (stocksUsers * collatBase) /\\n                        oracle.readUpper() +\\n                        interestsAccumulated,\\n                \\\"66\\\"\\n            );\\n\\n            token.safeTransfer(to, amountToRecover);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(to, amountToRecover);\\n        }\\n        emit Recovered(tokenAddress, to, amountToRecover);\\n    }\\n\\n    /// @notice Adds a strategy to the `PoolManager`\\n    /// @param strategy The address of the strategy to add\\n    /// @param _debtRatio The share of the total assets that the strategy has access to\\n    /// @dev Multiple checks are made. For instance, the contract must not already belong to the `PoolManager`\\n    /// and the underlying token of the strategy has to be consistent with the `PoolManager` contracts\\n    /// @dev This function is a `governor` function and not a `guardian` one because a `guardian` could add a strategy\\n    /// enabling the withdraw of the funds of the protocol\\n    /// @dev The `_debtRatio` should be expressed in `BASE_PARAMS`\\n    function addStrategy(address strategy, uint256 _debtRatio) external onlyRole(GOVERNOR_ROLE) zeroCheck(strategy) {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.lastReport == 0, \\\"73\\\");\\n        require(address(this) == IStrategy(strategy).poolManager(), \\\"74\\\");\\n        // Using current code, this condition should always be verified as in the constructor\\n        // of the strategy the `want()` is set to the token of this `PoolManager`\\n        require(address(token) == IStrategy(strategy).want(), \\\"75\\\");\\n        require(debtRatio + _debtRatio <= BASE_PARAMS, \\\"76\\\");\\n\\n        // Add strategy to approved strategies\\n        params.lastReport = 1;\\n        params.totalStrategyDebt = 0;\\n        params.debtRatio = _debtRatio;\\n\\n        _grantRole(STRATEGY_ROLE, strategy);\\n\\n        // Update global parameters\\n        debtRatio += _debtRatio;\\n        emit StrategyAdded(strategy, debtRatio);\\n\\n        strategyList.push(strategy);\\n    }\\n\\n    // =========================== Guardian Functions ==============================\\n\\n    /// @notice Sets a new surplus distributor to which surplus from the protocol will be pushed\\n    /// @param newSurplusConverter Address to which the role needs to be granted\\n    /// @dev It is as if the `GUARDIAN_ROLE` was admin of the `SURPLUS_DISTRIBUTOR_ROLE`\\n    /// @dev The address can be the zero address in case the protocol revokes the `surplusConverter`\\n    function setSurplusConverter(address newSurplusConverter) external onlyRole(GUARDIAN_ROLE) {\\n        address oldSurplusConverter = surplusConverter;\\n        surplusConverter = newSurplusConverter;\\n        emit SurplusConverterUpdated(newSurplusConverter, oldSurplusConverter);\\n    }\\n\\n    /// @notice Sets the share of the interests going directly to the surplus\\n    /// @param _interestsForSurplus New value of the interests going directly to the surplus for buybacks\\n    /// @dev Guardian should make sure the incentives for SLPs are still high enough for them to enter the protocol\\n    function setInterestsForSurplus(uint64 _interestsForSurplus)\\n        external\\n        onlyRole(GUARDIAN_ROLE)\\n        onlyCompatibleFees(_interestsForSurplus)\\n    {\\n        interestsForSurplus = _interestsForSurplus;\\n        emit InterestsForSurplusUpdated(_interestsForSurplus);\\n    }\\n\\n    /// @notice Modifies the funds a strategy has access to\\n    /// @param strategy The address of the Strategy\\n    /// @param _debtRatio The share of the total assets that the strategy has access to\\n    /// @dev The update has to be such that the `debtRatio` does not exceeds the 100% threshold\\n    /// as this `PoolManager` cannot lend collateral that it doesn't not own.\\n    /// @dev `_debtRatio` is stored as a uint256 but as any parameter of the protocol, it should be expressed\\n    /// in `BASE_PARAMS`\\n    function updateStrategyDebtRatio(address strategy, uint256 _debtRatio) external onlyRole(GUARDIAN_ROLE) {\\n        _updateStrategyDebtRatio(strategy, _debtRatio);\\n    }\\n\\n    /// @notice Triggers an emergency exit for a strategy and then harvests it to fetch all the funds\\n    /// @param strategy The address of the `Strategy`\\n    function setStrategyEmergencyExit(address strategy) external onlyRole(GUARDIAN_ROLE) {\\n        _updateStrategyDebtRatio(strategy, 0);\\n        IStrategy(strategy).setEmergencyExit();\\n        IStrategy(strategy).harvest();\\n    }\\n\\n    /// @notice Revokes a strategy\\n    /// @param strategy The address of the strategy to revoke\\n    /// @dev This should only be called after the following happened in order: the `strategy.debtRatio` has been set to 0,\\n    /// `harvest` has been called enough times to recover all capital gain/losses.\\n    function revokeStrategy(address strategy) external onlyRole(GUARDIAN_ROLE) {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.debtRatio == 0, \\\"77\\\");\\n        require(params.totalStrategyDebt == 0, \\\"77\\\");\\n        uint256 strategyListLength = strategyList.length;\\n        require(params.lastReport != 0 && strategyListLength >= 1, \\\"78\\\");\\n        // It has already been checked whether the strategy was a valid strategy\\n        for (uint256 i = 0; i < strategyListLength - 1; i++) {\\n            if (strategyList[i] == strategy) {\\n                strategyList[i] = strategyList[strategyListLength - 1];\\n                break;\\n            }\\n        }\\n\\n        strategyList.pop();\\n\\n        // Update global parameters\\n        debtRatio -= params.debtRatio;\\n        delete strategies[strategy];\\n\\n        _revokeRole(STRATEGY_ROLE, strategy);\\n\\n        emit StrategyRevoked(strategy);\\n    }\\n\\n    /// @notice Withdraws a given amount from a strategy\\n    /// @param strategy The address of the strategy\\n    /// @param amount The amount to withdraw\\n    /// @dev This function tries to recover `amount` from the strategy, but it may not go through\\n    /// as we may not be able to withdraw from the lending protocol the full amount\\n    /// @dev In this last case we only update the parameters by setting the loss as the gap between\\n    /// what has been asked and what has been returned.\\n    function withdrawFromStrategy(IStrategy strategy, uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        StrategyParams storage params = strategies[address(strategy)];\\n        require(params.lastReport != 0, \\\"78\\\");\\n\\n        uint256 loss;\\n        (amount, loss) = strategy.withdraw(amount);\\n\\n        // Handling eventual losses\\n        params.totalStrategyDebt = params.totalStrategyDebt - loss - amount;\\n        totalDebt = totalDebt - loss - amount;\\n\\n        emit StrategyReported(address(strategy), 0, loss, amount - loss, params.totalStrategyDebt);\\n\\n        // Handle eventual losses\\n        // With the strategy we are using in current tests, it is going to be impossible to have\\n        // a positive loss by calling strategy.withdraw, this function indeed calls _liquidatePosition\\n        // which output value is always zero\\n        if (loss > 0) stableMaster.signalLoss(loss);\\n    }\\n\\n    // =================== Surplus Distributor Function ============================\\n\\n    /// @notice Allows to push interests revenue accumulated by the protocol to the `surplusConverter` to do buybacks\\n    ///  or another form of redistribution to ANGLE or veANGLE token holders\\n    /// @dev This function is permissionless and anyone can transfer the `interestsAccumulated` by the protocol\\n    /// to the `surplusConverter`\\n    function pushSurplus() external {\\n        // If the `surplusConverter` has not been initialized, surplus should not be distributed\\n        // Storing the `surplusConverter` in an intermediate variable to avoid multiple reads in\\n        // storage\\n        address surplusConverterMem = surplusConverter;\\n        require(surplusConverterMem != address(0), \\\"0\\\");\\n        uint256 amount = interestsAccumulated;\\n        interestsAccumulated = 0;\\n        // Storing the `token` in memory to avoid duplicate reads in storage\\n        IERC20 tokenMem = token;\\n        tokenMem.safeTransfer(surplusConverterMem, amount);\\n        emit Recovered(address(tokenMem), surplusConverterMem, amount);\\n    }\\n\\n    // ======================== Getters - View Functions ===========================\\n\\n    /// @notice Gets the current balance of this `PoolManager` contract\\n    /// @return The amount of the underlying collateral that the contract currently owns\\n    /// @dev This balance does not take into account what has been lent to strategies\\n    function getBalance() external view override returns (uint256) {\\n        return _getBalance();\\n    }\\n\\n    /// @notice Gets the total amount of collateral that is controlled by this `PoolManager` contract\\n    /// @return The amount of collateral owned by this contract plus the amount that has been lent to strategies\\n    /// @dev This is the value that is used to compute the debt ratio for a given strategy\\n    function getTotalAsset() external view override returns (uint256) {\\n        return _getTotalAsset();\\n    }\\n}\\n\",\"keccak256\":\"0xb9c97aad0fb43061acaf2d10428a9791407af922214cc0621612be774e641478\",\"license\":\"GPL-3.0\"},\"contracts/poolManager/PoolManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IFeeManager.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/ISanToken.sol\\\";\\nimport \\\"../interfaces/IPerpetualManager.sol\\\";\\nimport \\\"../interfaces/IStableMaster.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\nimport \\\"../utils/FunctionUtils.sol\\\";\\n\\n/// @title PoolManagerEvents\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This contract contains all the events of the `PoolManager` Contract\\ncontract PoolManagerEvents {\\n    event FeesDistributed(uint256 amountDistributed);\\n\\n    event Recovered(address indexed token, address indexed to, uint256 amount);\\n\\n    event StrategyAdded(address indexed strategy, uint256 debtRatio);\\n\\n    event InterestsForSurplusUpdated(uint64 _interestsForSurplus);\\n\\n    event SurplusConverterUpdated(address indexed newSurplusConverter, address indexed oldSurplusConverter);\\n\\n    event StrategyRevoked(address indexed strategy);\\n\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 totalDebt\\n    );\\n}\\n\",\"keccak256\":\"0x15c148e08eb065a02cf0b6dc9eac5fa0f55b0803da7f78f77dbba4d449415a52\",\"license\":\"GPL-3.0\"},\"contracts/poolManager/PoolManagerInternal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerStorageV3.sol\\\";\\n\\n/// @title PoolManagerInternal\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains all the internal functions of the `PoolManager` contract\\ncontract PoolManagerInternal is PoolManagerStorageV3 {\\n    using SafeERC20 for IERC20;\\n\\n    // Roles need to be defined here because there are some internal access control functions\\n    // in the `PoolManagerInternal` file\\n\\n    /// @notice Role for `StableMaster` only\\n    bytes32 public constant STABLEMASTER_ROLE = keccak256(\\\"STABLEMASTER_ROLE\\\");\\n    /// @notice Role for governors only\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for `Strategy` only\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n    // ======================= Access Control and Governance =======================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    function _addGuardian(address _guardian) internal {\\n        // Granting the new role\\n        // Access control for this contract\\n        _grantRole(GUARDIAN_ROLE, _guardian);\\n        // Propagating the new role in other contract\\n        perpetualManager.grantRole(GUARDIAN_ROLE, _guardian);\\n        feeManager.grantRole(GUARDIAN_ROLE, _guardian);\\n        uint256 strategyListLength = strategyList.length;\\n        for (uint256 i = 0; i < strategyListLength; i++) {\\n            IStrategy(strategyList[i]).addGuardian(_guardian);\\n        }\\n    }\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function _revokeGuardian(address guardian) internal {\\n        _revokeRole(GUARDIAN_ROLE, guardian);\\n        perpetualManager.revokeRole(GUARDIAN_ROLE, guardian);\\n        feeManager.revokeRole(GUARDIAN_ROLE, guardian);\\n        uint256 strategyListLength = strategyList.length;\\n        for (uint256 i = 0; i < strategyListLength; i++) {\\n            IStrategy(strategyList[i]).revokeGuardian(guardian);\\n        }\\n    }\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Internal version of `updateStrategyDebtRatio`\\n    /// @dev Updates the debt ratio for a strategy\\n    function _updateStrategyDebtRatio(address strategy, uint256 _debtRatio) internal {\\n        StrategyParams storage params = strategies[strategy];\\n        require(params.lastReport != 0, \\\"78\\\");\\n        debtRatio = debtRatio + _debtRatio - params.debtRatio;\\n        require(debtRatio <= BASE_PARAMS, \\\"76\\\");\\n        params.debtRatio = _debtRatio;\\n        emit StrategyAdded(strategy, debtRatio);\\n    }\\n\\n    // ============================ Utils ==========================================\\n\\n    /// @notice Returns this `PoolManager`'s reserve of collateral (not including what has been lent)\\n    function _getBalance() internal view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the amount of assets owned by this `PoolManager`\\n    /// @dev This sums the current balance of the contract to what has been given to strategies\\n    /// @dev This amount can be manipulated by flash loans\\n    function _getTotalAsset() internal view returns (uint256) {\\n        return _getBalance() + totalDebt;\\n    }\\n}\\n\",\"keccak256\":\"0x078ed3c204be113a0a2702f6ff87ef0aea4f89cce91d2f2e82dbb53e1e466991\",\"license\":\"GPL-3.0\"},\"contracts/poolManager/PoolManagerStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerEvents.sol\\\";\\n\\n/// @title PoolManagerStorageV1\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains most of the variables and parameters stored for this contract. It does not contain all\\n/// as the storage file has been split into multiple files to avoid clashes when upgrading the smart contract\\ncontract PoolManagerStorageV1 is PoolManagerEvents, FunctionUtils {\\n    // ================ References to contracts that cannot be modified ============\\n\\n    /// @notice Interface for the underlying token accepted by this contract\\n    IERC20 public token;\\n\\n    /// @notice Reference to the `PerpetualManager` for this collateral/stablecoin pair\\n    /// `PerpetualManager` is an upgradeable contract, there is therefore no need to be able to update this reference\\n    IPerpetualManager public perpetualManager;\\n\\n    /// @notice Reference to the `StableMaster` contract corresponding to this `PoolManager`\\n    IStableMaster public stableMaster;\\n\\n    // ============== References to contracts that can be modified =================\\n\\n    /// @notice FeeManager contract for this collateral/stablecoin pair\\n    /// This reference can be updated by the `StableMaster` and change is going to be propagated\\n    /// to the `PerpetualManager` from this contract\\n    IFeeManager public feeManager;\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Funds currently given to strategies\\n    uint256 public totalDebt;\\n\\n    /// @notice Proportion of the funds managed dedicated to strategies\\n    /// Has to be between 0 and `BASE_PARAMS`\\n    uint256 public debtRatio;\\n\\n    /// The struct `StrategyParams` is defined in the interface `IPoolManager`\\n    /// @notice Mapping between the address of a strategy contract and its corresponding details\\n    mapping(address => StrategyParams) public strategies;\\n\\n    /// @notice List of the current strategies\\n    address[] public strategyList;\\n}\\n\",\"keccak256\":\"0xf193b891107e719cc1ea878dc03493e151b37ceb9f001a741ecee002d7282e37\",\"license\":\"GPL-3.0\"},\"contracts/poolManager/PoolManagerStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerStorageV1.sol\\\";\\n\\n/// @title PoolManagerStorageV2\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file imports the `AccessControlUpgradeable`\\ncontract PoolManagerStorageV2 is PoolManagerStorageV1, AccessControlUpgradeable {\\n\\n}\\n\",\"keccak256\":\"0xedb660811fe6d192bdda7d568d13e9ca3684be1a1b4f64e24eeb04aca28ba86b\",\"license\":\"GPL-3.0\"},\"contracts/poolManager/PoolManagerStorageV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerStorageV2.sol\\\";\\n\\n/// @title PoolManagerStorageV3\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains the last variables and parameters stored for this contract. The reason for not storing them\\n/// directly in `PoolManagerStorageV1` is that theywere introduced after a first deployment and may have introduced a\\n/// storage clash when upgrading\\ncontract PoolManagerStorageV3 is PoolManagerStorageV2 {\\n    /// @notice Address of the surplus distributor allowed to distribute rewards\\n    address public surplusConverter;\\n\\n    /// @notice Share of the interests going to surplus and share going to SLPs\\n    uint64 public interestsForSurplus;\\n\\n    /// @notice Interests accumulated by the protocol and to be distributed through ANGLE or veANGLE\\n    /// token holders\\n    uint256 public interestsAccumulated;\\n\\n    /// @notice Debt that must be paid by admins after a loss on a strategy\\n    uint256 public adminDebt;\\n}\\n\",\"keccak256\":\"0xa660eb79aafb06602e93997822d655af9ca24c1e81c241b4d25640e9ca75bcff\",\"license\":\"GPL-3.0\"},\"contracts/utils/FunctionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title FunctionUtils\\n/// @author Angle Core Team\\n/// @notice Contains all the utility functions that are needed in different places of the protocol\\n/// @dev Functions in this contract should typically be pure functions\\n/// @dev This contract is voluntarily a contract and not a library to save some gas cost every time it is used\\ncontract FunctionUtils {\\n    /// @notice Base that is used to compute ratios and floating numbers\\n    uint256 public constant BASE_TOKENS = 10**18;\\n    /// @notice Base that is used to define parameters that need to have a floating value (for instance parameters\\n    /// that are defined as ratios)\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    /// @notice Computes the value of a linear by part function at a given point\\n    /// @param x Point of the function we want to compute\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev The evolution of the linear by part function between two breaking points is linear\\n    /// @dev Before the first breaking point and after the last one, the function is constant with a value\\n    /// equal to the first or last value of the yArray\\n    /// @dev This function is relevant if `x` is between O and `BASE_PARAMS`. If `x` is greater than that, then\\n    /// everything will be as if `x` is equal to the greater element of the `xArray`\\n    function _piecewiseLinear(\\n        uint64 x,\\n        uint64[] memory xArray,\\n        uint64[] memory yArray\\n    ) internal pure returns (uint64) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            if (yArray[upper] > yArray[lower]) {\\n                // There is no risk of overflow here as in the product of the difference of `y`\\n                // with the difference of `x`, the product is inferior to `BASE_PARAMS**2` which does not\\n                // overflow for `uint64`\\n                return\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                return\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if the input arrays given by governance to update the fee structure is valid\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev This function is a way to avoid some governance attacks or errors\\n    /// @dev The modifier checks if the arrays have a non null length, if their length is the same, if the values\\n    /// in the `xArray` are in ascending order and if the values in the `xArray` and in the `yArray` are not superior\\n    /// to `BASE_PARAMS`\\n    modifier onlyCompatibleInputArrays(uint64[] memory xArray, uint64[] memory yArray) {\\n        require(xArray.length == yArray.length && xArray.length > 0, \\\"5\\\");\\n        for (uint256 i = 0; i <= yArray.length - 1; i++) {\\n            require(yArray[i] <= uint64(BASE_PARAMS) && xArray[i] <= uint64(BASE_PARAMS), \\\"6\\\");\\n            if (i > 0) {\\n                require(xArray[i] > xArray[i - 1], \\\"7\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if the new value given for the parameter is consistent (it should be inferior to 1\\n    /// if it corresponds to a ratio)\\n    /// @param fees Value of the new parameter to check\\n    modifier onlyCompatibleFees(uint64 fees) {\\n        require(fees <= BASE_PARAMS, \\\"4\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the new address given is not null\\n    /// @param newAddress Address to check\\n    /// @dev Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation\\n    modifier zeroCheck(address newAddress) {\\n        require(newAddress != address(0), \\\"0\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x55d7b56917c31cd9360982917426f7a920b3f938cce29431f3bca541123c076d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614ada806100206000396000f3fe608060405234801561001057600080fd5b506004361061030a5760003560e01c806391d148541161019c578063c9411e22116100ee578063df1b8bd311610097578063fb6d442011610071578063fb6d442014610736578063fc0c546a14610756578063fc7b9c181461077657600080fd5b8063df1b8bd31461070b578063eecdac881461071a578063f0d3dc831461072d57600080fd5b8063d0fb0203116100c8578063d0fb0203146106c5578063d547741f146106e5578063d965ce9a146106f857600080fd5b8063c9411e2214610682578063ccc5749014610695578063cea55f57146106bc57600080fd5b8063a267526b11610150578063b53d09581161012a578063b53d095814610654578063bb994d4814610667578063bf3759b51461067a57600080fd5b8063a267526b14610625578063ae11e4c914610638578063af648c3d1461064157600080fd5b80639f48118f116101815780639f48118f146105ff578063a1d9bafc1461060a578063a217fddf1461061d57600080fd5b806391d14854146105965780639645150c146105ec57600080fd5b806336568abe11610260578063580b7c2e116102095780636ac5dc46116101e35780636ac5dc461461051e5780637c6a4f241461053e5780638e2e944f1461055157600080fd5b8063580b7c2e146104aa5780635a5cd45e146104d15780635d34082b146104d957600080fd5b8063472d35b91161023a578063472d35b914610471578063485cc955146104845780634c8b9f8d1461049757600080fd5b806336568abe1461040157806339ebf823146104145780633c4a25d01461045e57600080fd5b8063248a9ca3116102c25780632f2ff15d1161029c5780632f2ff15d146103c85780632f92d261146103db57806333c509d1146103ee57600080fd5b8063248a9ca31461037657806324ea54f4146103995780632768385d146103c057600080fd5b80631171bda9116102f35780631171bda91461035157806312065fe01461036657806319106b671461036e57600080fd5b80631112d6541461030f578063112c1f9b14610349575b600080fd5b6103367f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b5381565b6040519081526020015b60405180910390f35b61033661077f565b61036461035f366004614272565b6107f5565b005b610336610b9d565b610364610bac565b6103366103843660046143e6565b60009081526009602052604090206001015490565b6103367f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b610336610cc5565b6103646103d63660046143ff565b610ccf565b6103646103e93660046141ff565b610cfa565b6103646103fc366004614239565b610df4565b61036461040f3660046143ff565b610e31565b6104436104223660046141ff565b60066020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610340565b61036461046c3660046141ff565b610ebe565b61036461047f3660046141ff565b610f1c565b610364610492366004614239565b610fe3565b6103646104a53660046145ed565b61133c565b6103367f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b610336611469565b6001546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610340565b6002546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b61036461054c3660046142b3565b611787565b603b5461057d9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610340565b6105dc6105a43660046143ff565b600091825260096020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6040519015158152602001610340565b6103646105fa3660046141ff565b6117bc565b610336633b9aca0081565b6103646106183660046145c1565b61185e565b610336600081565b6104f96106333660046143e6565b611ddd565b610336603c5481565b61036461064f3660046141ff565b611e14565b6103646106623660046142b3565b611e48565b6103646106753660046141ff565b6120e4565b6103366124a8565b6103646106903660046142b3565b612507565b6103367f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b61033660055481565b6003546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b6103646106f33660046143ff565b6129ea565b6103646107063660046142df565b612a10565b610336670de0b6b3a764000081565b6103646107283660046141ff565b612cf6565b610336603d5481565b603b546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b6000546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b61033660045481565b33600090815260066020526040812060028101548290633b9aca00906107a3612d4b565b6107ad91906148c2565b6107b79190614887565b905081600101548110156107ce5760009250505090565b6107ee8260010154826107e191906148ff565b6107e9612d62565b612e04565b9250505090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108208133612e1c565b60005473ffffffffffffffffffffffffffffffffffffffff85811691161415610b0f576002546040517fba8b7223000000000000000000000000000000000000000000000000000000008152306004820152600091829182918291829173ffffffffffffffffffffffffffffffffffffffff169063ba8b72239060240160006040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261090f9190810190614424565b5050965096509650965050955050603c548473ffffffffffffffffffffffffffffffffffffffff1663442133bd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190614584565b6109a883866148c2565b6109b29190614887565b670de0b6b3a7640000848873ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190614584565b610a4491906148c2565b610a4e9190614887565b610a58908a61486f565b610a62919061486f565b610a6c919061486f565b610a74612d4b565b1015610ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f363600000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600054610b059073ffffffffffffffffffffffffffffffffffffffff168989612eee565b5050505050610b30565b610b3073ffffffffffffffffffffffffffffffffffffffff85168484612eee565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b64884604051610b8f91815260200190565b60405180910390a350505050565b6000610ba7612d62565b905090565b603b5473ffffffffffffffffffffffffffffffffffffffff1680610c2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b603c8054600091829055905473ffffffffffffffffffffffffffffffffffffffff16610c59818484612eee565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b64884604051610cb891815260200190565b60405180910390a3505050565b6000610ba7612d4b565b600082815260096020526040902060010154610ceb8133612e1c565b610cf58383612fc2565b505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610d258133612e1c565b610d3082600061307f565b8173ffffffffffffffffffffffffffffffffffffffff1663fcf2d0ad6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d7857600080fd5b505af1158015610d8c573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b505050505050565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53610e1f8133612e1c565b610e28826131f5565b610cf583613439565b73ffffffffffffffffffffffffffffffffffffffff81163314610eb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b610eba828261367d565b5050565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53610ee98133612e1c565b610f137f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5583612fc2565b610eba82613439565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53610f478133612e1c565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182179092556001546040517f472d35b900000000000000000000000000000000000000000000000000000000815260048101929092529091169063472d35b990602401600060405180830381600087803b158015610dd857600080fd5b600854610100900460ff1680610ffc575060085460ff16155b611088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff161580156110c757600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b8273ffffffffffffffffffffffffffffffffffffffff8116611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b8273ffffffffffffffffffffffffffffffffffffffff81166111c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6111cb613738565b6002805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556000805491891691909216179055611249907f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b5390613856565b6112737f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b5380613860565b6112bd7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f557f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53613860565b6113077f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53613860565b50508015610cf557600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416113678133612e1c565b81633b9aca008167ffffffffffffffff1611156113e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f34000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b603b80547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000067ffffffffffffffff8616908102919091179091556040519081527ffc758ec4944790c229f9320c389bbbb662de11b31936338e0b6359633d8252a29060200160405180910390a1505050565b6002546040517fba8b722300000000000000000000000000000000000000000000000000000000815230600482015260009182918291829173ffffffffffffffffffffffffffffffffffffffff9091169063ba8b72239060240160006040518083038186803b1580156114db57600080fd5b505afa1580156114ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115359190810190614424565b50975050965050505093505060008373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190614584565b9050806115f2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94505050505090565b60005b60075481101561173c57633b9aca006007828154811061161757611617614a0e565b60009182526020918290200154604080517f5a5cd45e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692635a5cd45e92600480840193829003018186803b15801561168657600080fd5b505afa15801561169a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116be9190614584565b60066000600785815481106116d5576116d5614a0e565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190206002015461171491906148c2565b61171e9190614887565b611728908761486f565b95508061173481614977565b9150506115f5565b508083611747612d4b565b60e08501516117609067ffffffffffffffff16896148c2565b61176a91906148c2565b6117749190614887565b61177e9190614887565b94505050505090565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416117b28133612e1c565b610cf5838361307f565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416117e78133612e1c565b603b805473ffffffffffffffffffffffffffffffffffffffff8481167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935560405191169182917f36c96a1bbba632dc500787b9d915ec93cac3f4be4af3e6855403f9cbcac3893d90600090a3505050565b7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c6118898133612e1c565b611893828561486f565b6000546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156118fc57600080fd5b505afa158015611910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119349190614584565b101561199c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37320000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b336000908152600660205260409020600181015484906119bd90879061486f565b6119c791906148ff565b600182015560045484906119dc90879061486f565b6119e691906148ff565b6004554281556002810154600090633b9aca0090611a02612d4b565b611a0c91906148c2565b611a169190614887565b90508160010154811115611a91576000611a398360010154836107e191906148ff565b9050808360010154611a4b919061486f565b6001840155600454611a5e90829061486f565b6004558015611a8b57600054611a8b9073ffffffffffffffffffffffffffffffffffffffff163383612eee565b50611b05565b6000611ab0828460010154611aa691906148ff565b6107e9898861486f565b9050808360010154611ac291906148ff565b6001840155600454611ad59082906148ff565b6004558015611b0357600054611b039073ffffffffffffffffffffffffffffffffffffffff163330846138b4565b505b60018201546040805188815260208101889052908101869052606081019190915233907ff106b42df1ee4f4cdf6104dd274c895b074a7162dc67ce53c1de471237c2999c9060800160405180910390a28515611cc257603b54600090633b9aca0090611b939074010000000000000000000000000000000000000000900467ffffffffffffffff16896148c2565b611b9d9190614887565b603d5490915080611bc55781603c6000828254611bba919061486f565b90915550611c0e9050565b818111611bf657611bd681836148ff565b603c6000828254611be7919061486f565b90915550506000603d55611c0e565b81603d6000828254611c0891906148ff565b90915550505b60025473ffffffffffffffffffffffffffffffffffffffff1663087264c9611c36848b6148ff565b6040518263ffffffff1660e01b8152600401611c5491815260200190565b600060405180830381600087803b158015611c6e57600080fd5b505af1158015611c82573d6000803e3d6000fd5b505050507f8959421a1320789a49eeec01a4750caf8a30733c3db14f000d84484df89300f988604051611cb791815260200190565b60405180910390a150505b8415610dec57603b54600090633b9aca0090611d009074010000000000000000000000000000000000000000900467ffffffffffffffff16886148c2565b611d0a9190614887565b603c5490915080821115611d43576000603c55611d2781836148ff565b603d6000828254611d38919061486f565b90915550611d5b9050565b81603c6000828254611d5591906148ff565b90915550505b60025473ffffffffffffffffffffffffffffffffffffffff1663252c9406611d83848a6148ff565b6040518263ffffffff1660e01b8152600401611da191815260200190565b600060405180830381600087803b158015611dbb57600080fd5b505af1158015611dcf573d6000803e3d6000fd5b505050505050505050505050565b60078181548110611ded57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53611e3f8133612e1c565b610eba826131f5565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041611e738133612e1c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090208054611f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37380000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905260009073ffffffffffffffffffffffffffffffffffffffff861690632e1a7d4d906024016040805180830381600087803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa2919061459d565b600184015491955091508490611fb99083906148ff565b611fc391906148ff565b60018301556004548490611fd89083906148ff565b611fe291906148ff565b60045573ffffffffffffffffffffffffffffffffffffffff85167ff106b42df1ee4f4cdf6104dd274c895b074a7162dc67ce53c1de471237c2999c60008361202a81896148ff565b600187015460408051948552602085019390935291830152606082015260800160405180910390a280156120dd576002546040517f252c94060000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063252c940690602401600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b505050505b5050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161210f8133612e1c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090206002810154156121a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37370000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b60018101541561220c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37370000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b600754815415801590612220575060018110155b612286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37380000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b60005b6122946001836148ff565b8110156123a2578473ffffffffffffffffffffffffffffffffffffffff16600782815481106122c5576122c5614a0e565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156123905760076122fa6001846148ff565b8154811061230a5761230a614a0e565b6000918252602090912001546007805473ffffffffffffffffffffffffffffffffffffffff909216918390811061234357612343614a0e565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506123a2565b8061239a81614977565b915050612289565b5060078054806123b4576123b46149df565b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558160020154600560008282546123ff91906148ff565b909155505073ffffffffffffffffffffffffffffffffffffffff8416600090815260066020526040812081815560018101829055600201556124617f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c8561367d565b60405173ffffffffffffffffffffffffffffffffffffffff8516907f4201c688d84c01154d321afa0c72f1bffe9eef53005c9de9d035074e71e9b32a90600090a250505050565b33600090815260066020526040812060028101548290633b9aca00906124cc612d4b565b6124d691906148c2565b6124e09190614887565b905081600101548111156124f75760009250505090565b8082600101546107ee91906148ff565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556125328133612e1c565b8273ffffffffffffffffffffffffffffffffffffffff81166125b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260066020526040902080541561263e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37330000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b8473ffffffffffffffffffffffffffffffffffffffff1663dc4c90d36040518163ffffffff1660e01b815260040160206040518083038186803b15801561268457600080fd5b505afa158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc919061421c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37340000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b8473ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561279657600080fd5b505afa1580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce919061421c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614612852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37350000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b633b9aca0084600554612865919061486f565b11156128cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37360000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6001808255600090820155600281018490556129097f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c86612fc2565b836005600082825461291b919061486f565b909155505060055460405190815273ffffffffffffffffffffffffffffffffffffffff8616907f2f564a83158ad1831793ad3e69257b52f39ece5d49cb0d8746708ecb9ef964da9060200160405180910390a25050600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050565b600082815260096020526040902060010154612a068133612e1c565b610cf5838361367d565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53612a3b8133612e1c565b6001805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600380549286169290911691909117905560005b8651811015612b2757612adf7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55888381518110612ad257612ad2614a0e565b6020026020010151612fc2565b612b157f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041888381518110612ad257612ad2614a0e565b80612b1f81614977565b915050612a93565b50612b527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504186612fc2565b6001546040517fb126e7e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063b126e7e590612bae908990899088908890600401614738565b600060405180830381600087803b158015612bc857600080fd5b505af1158015612bdc573d6000803e3d6000fd5b50506040517f8d40452700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169250638d4045279150612c36908990899089906004016146f8565b600060405180830381600087803b158015612c5057600080fd5b505af1158015612c64573d6000803e3d6000fd5b5050600254600054612cb2935073ffffffffffffffffffffffffffffffffffffffff9081169250167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613918565b600054610dec9073ffffffffffffffffffffffffffffffffffffffff16857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613918565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53612d218133612e1c565b611e3f7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f558361367d565b6000600454612d58612d62565b610ba7919061486f565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612dcc57600080fd5b505afa158015612de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba79190614584565b6000818310612e135781612e15565b825b9392505050565b600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610eba57612e748173ffffffffffffffffffffffffffffffffffffffff166014613a25565b612e7f836020613a25565b604051602001612e90929190614677565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610ad891600401614781565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610cf59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613c68565b600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610eba57600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020805461310c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37380000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b80600201548260055461311f919061486f565b61312991906148ff565b6005819055633b9aca00101561319b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37360000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6002810182905560055460405190815273ffffffffffffffffffffffffffffffffffffffff8416907f2f564a83158ad1831793ad3e69257b52f39ece5d49cb0d8746708ecb9ef964da9060200160405180910390a2505050565b61321f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418261367d565b6001546040517fd547741f0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301529091169063d547741f90604401600060405180830381600087803b1580156132b257600080fd5b505af11580156132c6573d6000803e3d6000fd5b50506003546040517fd547741f0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff8581166024830152909116925063d547741f9150604401600060405180830381600087803b15801561335d57600080fd5b505af1158015613371573d6000803e3d6000fd5b50506007549150600090505b81811015610cf5576007818154811061339857613398614a0e565b6000918252602090912001546040517faf648c3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063af648c3d90602401600060405180830381600087803b15801561340e57600080fd5b505af1158015613422573d6000803e3d6000fd5b50505050808061343190614977565b91505061337d565b6134637f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504182612fc2565b6001546040517f2f2ff15d0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015290911690632f2ff15d90604401600060405180830381600087803b1580156134f657600080fd5b505af115801561350a573d6000803e3d6000fd5b50506003546040517f2f2ff15d0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff85811660248301529091169250632f2ff15d9150604401600060405180830381600087803b1580156135a157600080fd5b505af11580156135b5573d6000803e3d6000fd5b50506007549150600090505b81811015610cf557600781815481106135dc576135dc614a0e565b6000918252602090912001546040517fa526d83b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063a526d83b90602401600060405180830381600087803b15801561365257600080fd5b505af1158015613666573d6000803e3d6000fd5b50505050808061367590614977565b9150506135c1565b600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610eba57600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600854610100900460ff1680613751575060085460ff16155b6137dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff1615801561381c57600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b613824613d74565b801561385357600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b610eba8282612fc2565b600082815260096020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526009602052604090912060010155565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526139129085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612f40565b50505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561398a57600080fd5b505afa15801561399e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c29190614584565b6139cc919061486f565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506139129085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612f40565b60606000613a348360026148c2565b613a3f90600261486f565b67ffffffffffffffff811115613a5757613a57614a3d565b6040519080825280601f01601f191660200182016040528015613a81576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613ab857613ab8614a0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613b1b57613b1b614a0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613b578460026148c2565b613b6290600161486f565b90505b6001811115613bff577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613ba357613ba3614a0e565b1a60f81b828281518110613bb957613bb9614a0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613bf881614942565b9050613b65565b508315612e15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ad8565b6000613cca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613e889092919063ffffffff16565b805190915015610cf55780806020019051810190613ce891906143c4565b610cf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff1680613d8d575060085460ff16155b613e19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff1615801561382457600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101179055801561385357600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b6060613e978484600085613e9f565b949350505050565b606082471015613f31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ad8565b843b613f99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ad8565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613fc2919061465b565b60006040518083038185875af1925050503d8060008114613fff576040519150601f19603f3d011682016040523d82523d6000602084013e614004565b606091505b509150915061401482828661401f565b979650505050505050565b6060831561402e575081612e15565b82511561403e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad89190614781565b803561407d81614a6c565b919050565b600082601f83011261409357600080fd5b815160206140a86140a38361484b565b6147fc565b80838252828201915082860187848660051b89010111156140c857600080fd5b60005b858110156140f05781516140de81614a8e565b845292840192908401906001016140cb565b5090979650505050505050565b6000610100828403121561411057600080fd5b6141186147d2565b9050815167ffffffffffffffff8082111561413257600080fd5b61413e85838601614082565b8352602084015191508082111561415457600080fd5b61416085838601614082565b6020840152604084015191508082111561417957600080fd5b61418585838601614082565b6040840152606084015191508082111561419e57600080fd5b506141ab84828501614082565b6060830152506141bd608083016141f4565b60808201526141ce60a083016141f4565b60a08201526141df60c083016141f4565b60c082015260e082015160e082015292915050565b805161407d81614a8e565b60006020828403121561421157600080fd5b8135612e1581614a6c565b60006020828403121561422e57600080fd5b8151612e1581614a6c565b6000806040838503121561424c57600080fd5b823561425781614a6c565b9150602083013561426781614a6c565b809150509250929050565b60008060006060848603121561428757600080fd5b833561429281614a6c565b925060208401356142a281614a6c565b929592945050506040919091013590565b600080604083850312156142c657600080fd5b82356142d181614a6c565b946020939093013593505050565b600080600080600060a086880312156142f757600080fd5b853567ffffffffffffffff81111561430e57600080fd5b8601601f8101881361431f57600080fd5b8035602061432f6140a38361484b565b8083825282820191508285018c848660051b880101111561434f57600080fd5b600095505b8486101561437b57803561436781614a6c565b835260019590950194918301918301614354565b50985061438b9050898201614072565b965050505061439c60408701614072565b92506143aa60608701614072565b91506143b860808701614072565b90509295509295909350565b6000602082840312156143d657600080fd5b81518015158114612e1557600080fd5b6000602082840312156143f857600080fd5b5035919050565b6000806040838503121561441257600080fd5b82359150602083013561426781614a6c565b6000806000806000806000806000898b0361020081121561444457600080fd5b8a5161444f81614a6c565b60208c0151909a5061446081614a6c565b60408c015190995061447181614a6c565b60608c015190985061448281614a6c565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20830112156144cd57600080fd5b6144d56147d2565b915060e08c01518252808c01516020830152506101208b015160408201526101408b015160608201526101608b015161450d81614a8e565b60808201526101808b015161452181614a8e565b60a08201526145336101a08c016141f4565b60c08201526145456101c08c016141f4565b60e08201526101e08b015190925067ffffffffffffffff81111561456857600080fd5b6145748c828d016140fd565b9150509295985092959850929598565b60006020828403121561459657600080fd5b5051919050565b600080604083850312156145b057600080fd5b505080516020909101519092909150565b6000806000606084860312156145d657600080fd5b505081359360208301359350604090920135919050565b6000602082840312156145ff57600080fd5b8135612e1581614a8e565b600081518084526020808501945080840160005b8381101561465057815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161461e565b509495945050505050565b6000825161466d818460208701614916565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516146af816017850160208801614916565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516146ec816028840160208801614916565b01602801949350505050565b60608152600061470b606083018661460a565b73ffffffffffffffffffffffffffffffffffffffff94851660208401529290931660409091015292915050565b60808152600061474b608083018761460a565b73ffffffffffffffffffffffffffffffffffffffff95861660208401529385166040830152509216606090920191909152919050565b60208152600082518060208401526147a0816040850160208701614916565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051610100810167ffffffffffffffff811182821017156147f6576147f6614a3d565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561484357614843614a3d565b604052919050565b600067ffffffffffffffff82111561486557614865614a3d565b5060051b60200190565b60008219821115614882576148826149b0565b500190565b6000826148bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148fa576148fa6149b0565b500290565b600082821015614911576149116149b0565b500390565b60005b83811015614931578181015183820152602001614919565b838111156139125750506000910152565b600081614951576149516149b0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149a9576149a96149b0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461385357600080fd5b67ffffffffffffffff8116811461385357600080fdfea2646970667358221220b2ebd5df63f22899fe5d61742040de69addea3243959f57326fc330b5a7128e064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030a5760003560e01c806391d148541161019c578063c9411e22116100ee578063df1b8bd311610097578063fb6d442011610071578063fb6d442014610736578063fc0c546a14610756578063fc7b9c181461077657600080fd5b8063df1b8bd31461070b578063eecdac881461071a578063f0d3dc831461072d57600080fd5b8063d0fb0203116100c8578063d0fb0203146106c5578063d547741f146106e5578063d965ce9a146106f857600080fd5b8063c9411e2214610682578063ccc5749014610695578063cea55f57146106bc57600080fd5b8063a267526b11610150578063b53d09581161012a578063b53d095814610654578063bb994d4814610667578063bf3759b51461067a57600080fd5b8063a267526b14610625578063ae11e4c914610638578063af648c3d1461064157600080fd5b80639f48118f116101815780639f48118f146105ff578063a1d9bafc1461060a578063a217fddf1461061d57600080fd5b806391d14854146105965780639645150c146105ec57600080fd5b806336568abe11610260578063580b7c2e116102095780636ac5dc46116101e35780636ac5dc461461051e5780637c6a4f241461053e5780638e2e944f1461055157600080fd5b8063580b7c2e146104aa5780635a5cd45e146104d15780635d34082b146104d957600080fd5b8063472d35b91161023a578063472d35b914610471578063485cc955146104845780634c8b9f8d1461049757600080fd5b806336568abe1461040157806339ebf823146104145780633c4a25d01461045e57600080fd5b8063248a9ca3116102c25780632f2ff15d1161029c5780632f2ff15d146103c85780632f92d261146103db57806333c509d1146103ee57600080fd5b8063248a9ca31461037657806324ea54f4146103995780632768385d146103c057600080fd5b80631171bda9116102f35780631171bda91461035157806312065fe01461036657806319106b671461036e57600080fd5b80631112d6541461030f578063112c1f9b14610349575b600080fd5b6103367f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b5381565b6040519081526020015b60405180910390f35b61033661077f565b61036461035f366004614272565b6107f5565b005b610336610b9d565b610364610bac565b6103366103843660046143e6565b60009081526009602052604090206001015490565b6103367f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b610336610cc5565b6103646103d63660046143ff565b610ccf565b6103646103e93660046141ff565b610cfa565b6103646103fc366004614239565b610df4565b61036461040f3660046143ff565b610e31565b6104436104223660046141ff565b60066020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610340565b61036461046c3660046141ff565b610ebe565b61036461047f3660046141ff565b610f1c565b610364610492366004614239565b610fe3565b6103646104a53660046145ed565b61133c565b6103367f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b610336611469565b6001546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610340565b6002546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b61036461054c3660046142b3565b611787565b603b5461057d9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610340565b6105dc6105a43660046143ff565b600091825260096020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6040519015158152602001610340565b6103646105fa3660046141ff565b6117bc565b610336633b9aca0081565b6103646106183660046145c1565b61185e565b610336600081565b6104f96106333660046143e6565b611ddd565b610336603c5481565b61036461064f3660046141ff565b611e14565b6103646106623660046142b3565b611e48565b6103646106753660046141ff565b6120e4565b6103366124a8565b6103646106903660046142b3565b612507565b6103367f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b61033660055481565b6003546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b6103646106f33660046143ff565b6129ea565b6103646107063660046142df565b612a10565b610336670de0b6b3a764000081565b6103646107283660046141ff565b612cf6565b610336603d5481565b603b546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b6000546104f99073ffffffffffffffffffffffffffffffffffffffff1681565b61033660045481565b33600090815260066020526040812060028101548290633b9aca00906107a3612d4b565b6107ad91906148c2565b6107b79190614887565b905081600101548110156107ce5760009250505090565b6107ee8260010154826107e191906148ff565b6107e9612d62565b612e04565b9250505090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108208133612e1c565b60005473ffffffffffffffffffffffffffffffffffffffff85811691161415610b0f576002546040517fba8b7223000000000000000000000000000000000000000000000000000000008152306004820152600091829182918291829173ffffffffffffffffffffffffffffffffffffffff169063ba8b72239060240160006040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261090f9190810190614424565b5050965096509650965050955050603c548473ffffffffffffffffffffffffffffffffffffffff1663442133bd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190614584565b6109a883866148c2565b6109b29190614887565b670de0b6b3a7640000848873ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190614584565b610a4491906148c2565b610a4e9190614887565b610a58908a61486f565b610a62919061486f565b610a6c919061486f565b610a74612d4b565b1015610ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f363600000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600054610b059073ffffffffffffffffffffffffffffffffffffffff168989612eee565b5050505050610b30565b610b3073ffffffffffffffffffffffffffffffffffffffff85168484612eee565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b64884604051610b8f91815260200190565b60405180910390a350505050565b6000610ba7612d62565b905090565b603b5473ffffffffffffffffffffffffffffffffffffffff1680610c2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b603c8054600091829055905473ffffffffffffffffffffffffffffffffffffffff16610c59818484612eee565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b64884604051610cb891815260200190565b60405180910390a3505050565b6000610ba7612d4b565b600082815260096020526040902060010154610ceb8133612e1c565b610cf58383612fc2565b505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041610d258133612e1c565b610d3082600061307f565b8173ffffffffffffffffffffffffffffffffffffffff1663fcf2d0ad6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d7857600080fd5b505af1158015610d8c573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b505050505050565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53610e1f8133612e1c565b610e28826131f5565b610cf583613439565b73ffffffffffffffffffffffffffffffffffffffff81163314610eb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b610eba828261367d565b5050565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53610ee98133612e1c565b610f137f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5583612fc2565b610eba82613439565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53610f478133612e1c565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182179092556001546040517f472d35b900000000000000000000000000000000000000000000000000000000815260048101929092529091169063472d35b990602401600060405180830381600087803b158015610dd857600080fd5b600854610100900460ff1680610ffc575060085460ff16155b611088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff161580156110c757600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b8273ffffffffffffffffffffffffffffffffffffffff8116611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b8273ffffffffffffffffffffffffffffffffffffffff81166111c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6111cb613738565b6002805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556000805491891691909216179055611249907f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b5390613856565b6112737f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b5380613860565b6112bd7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f557f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53613860565b6113077f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50417f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53613860565b50508015610cf557600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416113678133612e1c565b81633b9aca008167ffffffffffffffff1611156113e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f34000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b603b80547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000067ffffffffffffffff8616908102919091179091556040519081527ffc758ec4944790c229f9320c389bbbb662de11b31936338e0b6359633d8252a29060200160405180910390a1505050565b6002546040517fba8b722300000000000000000000000000000000000000000000000000000000815230600482015260009182918291829173ffffffffffffffffffffffffffffffffffffffff9091169063ba8b72239060240160006040518083038186803b1580156114db57600080fd5b505afa1580156114ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115359190810190614424565b50975050965050505093505060008373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190614584565b9050806115f2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94505050505090565b60005b60075481101561173c57633b9aca006007828154811061161757611617614a0e565b60009182526020918290200154604080517f5a5cd45e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692635a5cd45e92600480840193829003018186803b15801561168657600080fd5b505afa15801561169a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116be9190614584565b60066000600785815481106116d5576116d5614a0e565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190206002015461171491906148c2565b61171e9190614887565b611728908761486f565b95508061173481614977565b9150506115f5565b508083611747612d4b565b60e08501516117609067ffffffffffffffff16896148c2565b61176a91906148c2565b6117749190614887565b61177e9190614887565b94505050505090565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416117b28133612e1c565b610cf5838361307f565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416117e78133612e1c565b603b805473ffffffffffffffffffffffffffffffffffffffff8481167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935560405191169182917f36c96a1bbba632dc500787b9d915ec93cac3f4be4af3e6855403f9cbcac3893d90600090a3505050565b7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c6118898133612e1c565b611893828561486f565b6000546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156118fc57600080fd5b505afa158015611910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119349190614584565b101561199c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37320000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b336000908152600660205260409020600181015484906119bd90879061486f565b6119c791906148ff565b600182015560045484906119dc90879061486f565b6119e691906148ff565b6004554281556002810154600090633b9aca0090611a02612d4b565b611a0c91906148c2565b611a169190614887565b90508160010154811115611a91576000611a398360010154836107e191906148ff565b9050808360010154611a4b919061486f565b6001840155600454611a5e90829061486f565b6004558015611a8b57600054611a8b9073ffffffffffffffffffffffffffffffffffffffff163383612eee565b50611b05565b6000611ab0828460010154611aa691906148ff565b6107e9898861486f565b9050808360010154611ac291906148ff565b6001840155600454611ad59082906148ff565b6004558015611b0357600054611b039073ffffffffffffffffffffffffffffffffffffffff163330846138b4565b505b60018201546040805188815260208101889052908101869052606081019190915233907ff106b42df1ee4f4cdf6104dd274c895b074a7162dc67ce53c1de471237c2999c9060800160405180910390a28515611cc257603b54600090633b9aca0090611b939074010000000000000000000000000000000000000000900467ffffffffffffffff16896148c2565b611b9d9190614887565b603d5490915080611bc55781603c6000828254611bba919061486f565b90915550611c0e9050565b818111611bf657611bd681836148ff565b603c6000828254611be7919061486f565b90915550506000603d55611c0e565b81603d6000828254611c0891906148ff565b90915550505b60025473ffffffffffffffffffffffffffffffffffffffff1663087264c9611c36848b6148ff565b6040518263ffffffff1660e01b8152600401611c5491815260200190565b600060405180830381600087803b158015611c6e57600080fd5b505af1158015611c82573d6000803e3d6000fd5b505050507f8959421a1320789a49eeec01a4750caf8a30733c3db14f000d84484df89300f988604051611cb791815260200190565b60405180910390a150505b8415610dec57603b54600090633b9aca0090611d009074010000000000000000000000000000000000000000900467ffffffffffffffff16886148c2565b611d0a9190614887565b603c5490915080821115611d43576000603c55611d2781836148ff565b603d6000828254611d38919061486f565b90915550611d5b9050565b81603c6000828254611d5591906148ff565b90915550505b60025473ffffffffffffffffffffffffffffffffffffffff1663252c9406611d83848a6148ff565b6040518263ffffffff1660e01b8152600401611da191815260200190565b600060405180830381600087803b158015611dbb57600080fd5b505af1158015611dcf573d6000803e3d6000fd5b505050505050505050505050565b60078181548110611ded57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53611e3f8133612e1c565b610eba826131f5565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041611e738133612e1c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090208054611f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37380000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905260009073ffffffffffffffffffffffffffffffffffffffff861690632e1a7d4d906024016040805180830381600087803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa2919061459d565b600184015491955091508490611fb99083906148ff565b611fc391906148ff565b60018301556004548490611fd89083906148ff565b611fe291906148ff565b60045573ffffffffffffffffffffffffffffffffffffffff85167ff106b42df1ee4f4cdf6104dd274c895b074a7162dc67ce53c1de471237c2999c60008361202a81896148ff565b600187015460408051948552602085019390935291830152606082015260800160405180910390a280156120dd576002546040517f252c94060000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063252c940690602401600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b505050505b5050505050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161210f8133612e1c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090206002810154156121a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37370000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b60018101541561220c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37370000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b600754815415801590612220575060018110155b612286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37380000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b60005b6122946001836148ff565b8110156123a2578473ffffffffffffffffffffffffffffffffffffffff16600782815481106122c5576122c5614a0e565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156123905760076122fa6001846148ff565b8154811061230a5761230a614a0e565b6000918252602090912001546007805473ffffffffffffffffffffffffffffffffffffffff909216918390811061234357612343614a0e565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506123a2565b8061239a81614977565b915050612289565b5060078054806123b4576123b46149df565b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558160020154600560008282546123ff91906148ff565b909155505073ffffffffffffffffffffffffffffffffffffffff8416600090815260066020526040812081815560018101829055600201556124617f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c8561367d565b60405173ffffffffffffffffffffffffffffffffffffffff8516907f4201c688d84c01154d321afa0c72f1bffe9eef53005c9de9d035074e71e9b32a90600090a250505050565b33600090815260066020526040812060028101548290633b9aca00906124cc612d4b565b6124d691906148c2565b6124e09190614887565b905081600101548111156124f75760009250505090565b8082600101546107ee91906148ff565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556125328133612e1c565b8273ffffffffffffffffffffffffffffffffffffffff81166125b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260066020526040902080541561263e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37330000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b8473ffffffffffffffffffffffffffffffffffffffff1663dc4c90d36040518163ffffffff1660e01b815260040160206040518083038186803b15801561268457600080fd5b505afa158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc919061421c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37340000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b8473ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561279657600080fd5b505afa1580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce919061421c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614612852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37350000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b633b9aca0084600554612865919061486f565b11156128cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37360000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6001808255600090820155600281018490556129097f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c86612fc2565b836005600082825461291b919061486f565b909155505060055460405190815273ffffffffffffffffffffffffffffffffffffffff8616907f2f564a83158ad1831793ad3e69257b52f39ece5d49cb0d8746708ecb9ef964da9060200160405180910390a25050600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050565b600082815260096020526040902060010154612a068133612e1c565b610cf5838361367d565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53612a3b8133612e1c565b6001805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600380549286169290911691909117905560005b8651811015612b2757612adf7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55888381518110612ad257612ad2614a0e565b6020026020010151612fc2565b612b157f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041888381518110612ad257612ad2614a0e565b80612b1f81614977565b915050612a93565b50612b527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504186612fc2565b6001546040517fb126e7e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063b126e7e590612bae908990899088908890600401614738565b600060405180830381600087803b158015612bc857600080fd5b505af1158015612bdc573d6000803e3d6000fd5b50506040517f8d40452700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169250638d4045279150612c36908990899089906004016146f8565b600060405180830381600087803b158015612c5057600080fd5b505af1158015612c64573d6000803e3d6000fd5b5050600254600054612cb2935073ffffffffffffffffffffffffffffffffffffffff9081169250167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613918565b600054610dec9073ffffffffffffffffffffffffffffffffffffffff16857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613918565b7f42e87691d7920cf38a77ca8920f5a4c84f1b5ae359a91577fea4018facdd7b53612d218133612e1c565b611e3f7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f558361367d565b6000600454612d58612d62565b610ba7919061486f565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612dcc57600080fd5b505afa158015612de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba79190614584565b6000818310612e135781612e15565b825b9392505050565b600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610eba57612e748173ffffffffffffffffffffffffffffffffffffffff166014613a25565b612e7f836020613a25565b604051602001612e90929190614677565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610ad891600401614781565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610cf59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613c68565b600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610eba57600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020805461310c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37380000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b80600201548260055461311f919061486f565b61312991906148ff565b6005819055633b9aca00101561319b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37360000000000000000000000000000000000000000000000000000000000006044820152606401610ad8565b6002810182905560055460405190815273ffffffffffffffffffffffffffffffffffffffff8416907f2f564a83158ad1831793ad3e69257b52f39ece5d49cb0d8746708ecb9ef964da9060200160405180910390a2505050565b61321f7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50418261367d565b6001546040517fd547741f0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301529091169063d547741f90604401600060405180830381600087803b1580156132b257600080fd5b505af11580156132c6573d6000803e3d6000fd5b50506003546040517fd547741f0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff8581166024830152909116925063d547741f9150604401600060405180830381600087803b15801561335d57600080fd5b505af1158015613371573d6000803e3d6000fd5b50506007549150600090505b81811015610cf5576007818154811061339857613398614a0e565b6000918252602090912001546040517faf648c3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063af648c3d90602401600060405180830381600087803b15801561340e57600080fd5b505af1158015613422573d6000803e3d6000fd5b50505050808061343190614977565b91505061337d565b6134637f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504182612fc2565b6001546040517f2f2ff15d0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015290911690632f2ff15d90604401600060405180830381600087803b1580156134f657600080fd5b505af115801561350a573d6000803e3d6000fd5b50506003546040517f2f2ff15d0000000000000000000000000000000000000000000000000000000081527f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041600482015273ffffffffffffffffffffffffffffffffffffffff85811660248301529091169250632f2ff15d9150604401600060405180830381600087803b1580156135a157600080fd5b505af11580156135b5573d6000803e3d6000fd5b50506007549150600090505b81811015610cf557600781815481106135dc576135dc614a0e565b6000918252602090912001546040517fa526d83b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063a526d83b90602401600060405180830381600087803b15801561365257600080fd5b505af1158015613666573d6000803e3d6000fd5b50505050808061367590614977565b9150506135c1565b600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610eba57600082815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600854610100900460ff1680613751575060085460ff16155b6137dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff1615801561381c57600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b613824613d74565b801561385357600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b610eba8282612fc2565b600082815260096020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526009602052604090912060010155565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526139129085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612f40565b50505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561398a57600080fd5b505afa15801561399e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c29190614584565b6139cc919061486f565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506139129085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612f40565b60606000613a348360026148c2565b613a3f90600261486f565b67ffffffffffffffff811115613a5757613a57614a3d565b6040519080825280601f01601f191660200182016040528015613a81576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613ab857613ab8614a0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613b1b57613b1b614a0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613b578460026148c2565b613b6290600161486f565b90505b6001811115613bff577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613ba357613ba3614a0e565b1a60f81b828281518110613bb957613bb9614a0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613bf881614942565b9050613b65565b508315612e15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ad8565b6000613cca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613e889092919063ffffffff16565b805190915015610cf55780806020019051810190613ce891906143c4565b610cf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff1680613d8d575060085460ff16155b613e19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad8565b600854610100900460ff1615801561382457600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101179055801561385357600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b6060613e978484600085613e9f565b949350505050565b606082471015613f31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ad8565b843b613f99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ad8565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613fc2919061465b565b60006040518083038185875af1925050503d8060008114613fff576040519150601f19603f3d011682016040523d82523d6000602084013e614004565b606091505b509150915061401482828661401f565b979650505050505050565b6060831561402e575081612e15565b82511561403e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad89190614781565b803561407d81614a6c565b919050565b600082601f83011261409357600080fd5b815160206140a86140a38361484b565b6147fc565b80838252828201915082860187848660051b89010111156140c857600080fd5b60005b858110156140f05781516140de81614a8e565b845292840192908401906001016140cb565b5090979650505050505050565b6000610100828403121561411057600080fd5b6141186147d2565b9050815167ffffffffffffffff8082111561413257600080fd5b61413e85838601614082565b8352602084015191508082111561415457600080fd5b61416085838601614082565b6020840152604084015191508082111561417957600080fd5b61418585838601614082565b6040840152606084015191508082111561419e57600080fd5b506141ab84828501614082565b6060830152506141bd608083016141f4565b60808201526141ce60a083016141f4565b60a08201526141df60c083016141f4565b60c082015260e082015160e082015292915050565b805161407d81614a8e565b60006020828403121561421157600080fd5b8135612e1581614a6c565b60006020828403121561422e57600080fd5b8151612e1581614a6c565b6000806040838503121561424c57600080fd5b823561425781614a6c565b9150602083013561426781614a6c565b809150509250929050565b60008060006060848603121561428757600080fd5b833561429281614a6c565b925060208401356142a281614a6c565b929592945050506040919091013590565b600080604083850312156142c657600080fd5b82356142d181614a6c565b946020939093013593505050565b600080600080600060a086880312156142f757600080fd5b853567ffffffffffffffff81111561430e57600080fd5b8601601f8101881361431f57600080fd5b8035602061432f6140a38361484b565b8083825282820191508285018c848660051b880101111561434f57600080fd5b600095505b8486101561437b57803561436781614a6c565b835260019590950194918301918301614354565b50985061438b9050898201614072565b965050505061439c60408701614072565b92506143aa60608701614072565b91506143b860808701614072565b90509295509295909350565b6000602082840312156143d657600080fd5b81518015158114612e1557600080fd5b6000602082840312156143f857600080fd5b5035919050565b6000806040838503121561441257600080fd5b82359150602083013561426781614a6c565b6000806000806000806000806000898b0361020081121561444457600080fd5b8a5161444f81614a6c565b60208c0151909a5061446081614a6c565b60408c015190995061447181614a6c565b60608c015190985061448281614a6c565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20830112156144cd57600080fd5b6144d56147d2565b915060e08c01518252808c01516020830152506101208b015160408201526101408b015160608201526101608b015161450d81614a8e565b60808201526101808b015161452181614a8e565b60a08201526145336101a08c016141f4565b60c08201526145456101c08c016141f4565b60e08201526101e08b015190925067ffffffffffffffff81111561456857600080fd5b6145748c828d016140fd565b9150509295985092959850929598565b60006020828403121561459657600080fd5b5051919050565b600080604083850312156145b057600080fd5b505080516020909101519092909150565b6000806000606084860312156145d657600080fd5b505081359360208301359350604090920135919050565b6000602082840312156145ff57600080fd5b8135612e1581614a8e565b600081518084526020808501945080840160005b8381101561465057815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161461e565b509495945050505050565b6000825161466d818460208701614916565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516146af816017850160208801614916565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516146ec816028840160208801614916565b01602801949350505050565b60608152600061470b606083018661460a565b73ffffffffffffffffffffffffffffffffffffffff94851660208401529290931660409091015292915050565b60808152600061474b608083018761460a565b73ffffffffffffffffffffffffffffffffffffffff95861660208401529385166040830152509216606090920191909152919050565b60208152600082518060208401526147a0816040850160208701614916565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051610100810167ffffffffffffffff811182821017156147f6576147f6614a3d565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561484357614843614a3d565b604052919050565b600067ffffffffffffffff82111561486557614865614a3d565b5060051b60200190565b60008219821115614882576148826149b0565b500190565b6000826148bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148fa576148fa6149b0565b500290565b600082821015614911576149116149b0565b500390565b60005b83811015614931578181015183820152602001614919565b838111156139125750506000910152565b600081614951576149516149b0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149a9576149a96149b0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461385357600080fd5b67ffffffffffffffff8116811461385357600080fdfea2646970667358221220b2ebd5df63f22899fe5d61742040de69addea3243959f57326fc330b5a7128e064736f6c63430008070033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This file contains the functions that are callable by governance or by other contracts of the protocolReferences to this contract are called `PoolManager`",
    "kind": "dev",
    "methods": {
      "addGovernor(address)": { "params": { "_governor": "New governor address" } },
      "addStrategy(address,uint256)": {
        "details": "Multiple checks are made. For instance, the contract must not already belong to the `PoolManager` and the underlying token of the strategy has to be consistent with the `PoolManager` contractsThis function is a `governor` function and not a `guardian` one because a `guardian` could add a strategy enabling the withdraw of the funds of the protocolThe `_debtRatio` should be expressed in `BASE_PARAMS`",
        "params": {
          "_debtRatio": "The share of the total assets that the strategy has access to",
          "strategy": "The address of the strategy to add"
        }
      },
      "creditAvailable()": {
        "details": "Since this function is a view function, there is no need to have an access control logic even though it will just be relevant for a strategyManipulating `_getTotalAsset` with a flashloan will only result in tokens being transferred at the cost of the caller",
        "returns": { "_0": "Amount of token a strategy has access to as a credit line" }
      },
      "debtOutstanding()": {
        "details": "Manipulating `_getTotalAsset` with a flashloan will only result in tokens being transferred at the cost of the caller",
        "returns": { "_0": "Amount of token a strategy has to reimburse" }
      },
      "deployCollateral(address[],address,address,address,address)": {
        "params": {
          "_feeManager": "Reference to the `FeeManager` contract that will serve for the `PerpetualManager` contract",
          "_oracle": "Reference to the `Oracle` contract that will serve for the `PerpetualManager` contract",
          "_perpetualManager": "New reference to the `PerpetualManager` contract containing all the logic for HAs",
          "governorList": "List of the governor addresses of protocol",
          "guardian": "Address of the guardian of the protocol (it can be revoked)"
        }
      },
      "estimatedAPR()": {
        "details": "This function is an estimation and is made for external use onlyThis does not take into account transaction fees which accrue to SLPs tooThis can be manipulated by a flash loan attack (SLP deposit/ withdraw) via `_getTotalAsset` when entering you should make sure this hasn't be called by a flash loan and look at a mean of past APR."
      },
      "getBalance()": {
        "details": "This balance does not take into account what has been lent to strategies",
        "returns": { "_0": "The amount of the underlying collateral that the contract currently owns" }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalAsset()": {
        "details": "This is the value that is used to compute the debt ratio for a given strategy",
        "returns": {
          "_0": "The amount of collateral owned by this contract plus the amount that has been lent to strategies"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "initialize(address,address)": {
        "params": {
          "_stableMaster": "Reference to the master stablecoin (`StableMaster`) interface",
          "_token": "Address of the collateral"
        }
      },
      "pushSurplus()": {
        "details": "This function is permissionless and anyone can transfer the `interestsAccumulated` by the protocol to the `surplusConverter`"
      },
      "recoverERC20(address,address,uint256)": {
        "details": "As this function can be used to transfer funds to another contract, it has to be a `GOVERNOR` functionIn case the concerned token is the specific token handled by this contract, this function checks that the amount entered is not too big and approximates the surplus of the protocolTo esimate the amount of user claims on the concerned collateral, this function uses the `stocksUsers` for this collateral, but this is just an approximation as users can claim the collateral of their choice provided that they own a stablecoinThe sanity check excludes the HA claims: to get a sense of it, this function would need to compute the cash out amount of all the perpetuals, and this cannot be done on-chain in a cheap mannerOverall, even though there is a sanity check, this function relies on the fact that governance is not corrupted in this protocol and will not try to withdraw too much funds",
        "params": {
          "amountToRecover": "Amount of collateral to transfer",
          "to": "Address of the contract to send collateral to",
          "tokenAddress": "Address of the token to recover"
        }
      },
      "removeGovernor(address)": { "params": { "_governor": "Governor address to remove" } },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "report(uint256,uint256,uint256)": {
        "details": "This is the main contact point where the strategy interacts with the `PoolManager`The strategy reports back what it has free, then the `PoolManager` contract \"decides\" whether to take some back or give it more. Note that the most it can take is `gain + _debtPayment`, and the most it can give is all of the remaining reserves. Anything outside of those bounds is abnormal behavior.",
        "params": {
          "debtPayment": "Amount strategy has made available to cover outstanding debt",
          "gain": "Amount strategy has realized as a gain on its investment since its last report, and is free to be given back to `PoolManager` as earnings",
          "loss": "Amount strategy has realized as a loss on its investment since its last report, and should be accounted for on the `PoolManager`'s balance sheet. The loss will reduce the `debtRatio`. The next time the strategy will harvest, it will pay back the debt in an attempt to adjust to the new debt limit."
        }
      },
      "revokeGuardian(address)": { "params": { "guardian": "Address of the guardian to revoke" } },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "revokeStrategy(address)": {
        "details": "This should only be called after the following happened in order: the `strategy.debtRatio` has been set to 0, `harvest` has been called enough times to recover all capital gain/losses.",
        "params": { "strategy": "The address of the strategy to revoke" }
      },
      "setFeeManager(address)": { "params": { "_feeManager": "New `FeeManager` contract" } },
      "setGuardian(address,address)": {
        "params": { "_guardian": "New guardian address", "guardian": "Old guardian address to revoke" }
      },
      "setInterestsForSurplus(uint64)": {
        "details": "Guardian should make sure the incentives for SLPs are still high enough for them to enter the protocol",
        "params": { "_interestsForSurplus": "New value of the interests going directly to the surplus for buybacks" }
      },
      "setStrategyEmergencyExit(address)": { "params": { "strategy": "The address of the `Strategy`" } },
      "setSurplusConverter(address)": {
        "details": "It is as if the `GUARDIAN_ROLE` was admin of the `SURPLUS_DISTRIBUTOR_ROLE`The address can be the zero address in case the protocol revokes the `surplusConverter`",
        "params": { "newSurplusConverter": "Address to which the role needs to be granted" }
      },
      "updateStrategyDebtRatio(address,uint256)": {
        "details": "The update has to be such that the `debtRatio` does not exceeds the 100% threshold as this `PoolManager` cannot lend collateral that it doesn't not own.`_debtRatio` is stored as a uint256 but as any parameter of the protocol, it should be expressed in `BASE_PARAMS`",
        "params": {
          "_debtRatio": "The share of the total assets that the strategy has access to",
          "strategy": "The address of the Strategy"
        }
      },
      "withdrawFromStrategy(address,uint256)": {
        "details": "This function tries to recover `amount` from the strategy, but it may not go through as we may not be able to withdraw from the lending protocol the full amountIn this last case we only update the parameters by setting the loss as the gap between what has been asked and what has been returned.",
        "params": { "amount": "The amount to withdraw", "strategy": "The address of the strategy" }
      }
    },
    "title": "PoolManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE_PARAMS()": {
        "notice": "Base that is used to define parameters that need to have a floating value (for instance parameters that are defined as ratios)"
      },
      "BASE_TOKENS()": { "notice": "Base that is used to compute ratios and floating numbers" },
      "GOVERNOR_ROLE()": { "notice": "Role for governors only" },
      "GUARDIAN_ROLE()": { "notice": "Role for guardians and governors" },
      "STABLEMASTER_ROLE()": { "notice": "Role for `StableMaster` only" },
      "STRATEGY_ROLE()": { "notice": "Role for `Strategy` only" },
      "addGovernor(address)": { "notice": "Adds a new governor address and echoes it to other contracts" },
      "addStrategy(address,uint256)": { "notice": "Adds a strategy to the `PoolManager`" },
      "adminDebt()": { "notice": "Debt that must be paid by admins after a loss on a strategy" },
      "creditAvailable()": { "notice": "Tells a strategy how much it can borrow from this `PoolManager`" },
      "debtOutstanding()": { "notice": "Tells a strategy how much it owes to this `PoolManager`" },
      "debtRatio()": {
        "notice": "Proportion of the funds managed dedicated to strategies Has to be between 0 and `BASE_PARAMS`"
      },
      "deployCollateral(address[],address,address,address,address)": {
        "notice": "Changes the references to contracts from this protocol with which this collateral `PoolManager` interacts and propagates some references to the `perpetualManager` and `feeManager` contracts"
      },
      "estimatedAPR()": {
        "notice": "Provides an estimated Annual Percentage Rate for SLPs based on lending to other protocols"
      },
      "feeManager()": {
        "notice": "FeeManager contract for this collateral/stablecoin pair This reference can be updated by the `StableMaster` and change is going to be propagated to the `PerpetualManager` from this contract"
      },
      "getBalance()": { "notice": "Gets the current balance of this `PoolManager` contract" },
      "getTotalAsset()": {
        "notice": "Gets the total amount of collateral that is controlled by this `PoolManager` contract"
      },
      "initialize(address,address)": { "notice": "Constructor of the `PoolManager` contract" },
      "interestsAccumulated()": {
        "notice": "Interests accumulated by the protocol and to be distributed through ANGLE or veANGLE token holders"
      },
      "interestsForSurplus()": { "notice": "Share of the interests going to surplus and share going to SLPs" },
      "perpetualManager()": {
        "notice": "Reference to the `PerpetualManager` for this collateral/stablecoin pair `PerpetualManager` is an upgradeable contract, there is therefore no need to be able to update this reference"
      },
      "pushSurplus()": {
        "notice": "Allows to push interests revenue accumulated by the protocol to the `surplusConverter` to do buybacks  or another form of redistribution to ANGLE or veANGLE token holders"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Allows to recover any ERC20 token, including the token handled by this contract, and to send it to a contract"
      },
      "removeGovernor(address)": { "notice": "Removes a governor address and echoes it to other contracts" },
      "report(uint256,uint256,uint256)": { "notice": "Reports the gains or loss made by a strategy" },
      "revokeGuardian(address)": {
        "notice": "Revokes the guardian address and echoes the change to other contracts that interact with this `PoolManager`"
      },
      "revokeStrategy(address)": { "notice": "Revokes a strategy" },
      "setFeeManager(address)": {
        "notice": "Allows to propagate the change of keeper for the collateral/stablecoin pair"
      },
      "setGuardian(address,address)": {
        "notice": "Changes the guardian address and echoes it to other contracts that interact with this `PoolManager`"
      },
      "setInterestsForSurplus(uint64)": { "notice": "Sets the share of the interests going directly to the surplus" },
      "setStrategyEmergencyExit(address)": {
        "notice": "Triggers an emergency exit for a strategy and then harvests it to fetch all the funds"
      },
      "setSurplusConverter(address)": {
        "notice": "Sets a new surplus distributor to which surplus from the protocol will be pushed"
      },
      "stableMaster()": { "notice": "Reference to the `StableMaster` contract corresponding to this `PoolManager`" },
      "strategies(address)": {
        "notice": "The struct `StrategyParams` is defined in the interface `IPoolManager`Mapping between the address of a strategy contract and its corresponding details"
      },
      "strategyList(uint256)": { "notice": "List of the current strategies" },
      "surplusConverter()": { "notice": "Address of the surplus distributor allowed to distribute rewards" },
      "token()": { "notice": "Interface for the underlying token accepted by this contract" },
      "totalDebt()": { "notice": "Funds currently given to strategies" },
      "updateStrategyDebtRatio(address,uint256)": { "notice": "Modifies the funds a strategy has access to" },
      "withdrawFromStrategy(address,uint256)": { "notice": "Withdraws a given amount from a strategy" }
    },
    "notice": "The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin, it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol to get yield on its collateral",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36280,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)9459"
      },
      {
        "astId": 36284,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "perpetualManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPerpetualManager)22930"
      },
      {
        "astId": 36288,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "stableMaster",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStableMaster)23594"
      },
      {
        "astId": 36292,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "feeManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFeeManager)22550"
      },
      {
        "astId": 36295,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "totalDebt",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 36298,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "debtRatio",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 36304,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "strategies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(StrategyParams)22953_storage)"
      },
      {
        "astId": 36308,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "strategyList",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3228,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 3231,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 16819,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "_roles",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)16814_storage)"
      },
      {
        "astId": 17105,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "__gap",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 36327,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "surplusConverter",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 36330,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "interestsForSurplus",
        "offset": 20,
        "slot": "59",
        "type": "t_uint64"
      },
      {
        "astId": 36333,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "interestsAccumulated",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 36336,
        "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
        "label": "adminDebt",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_contract(IERC20)9459": { "encoding": "inplace", "label": "contract IERC20", "numberOfBytes": "20" },
      "t_contract(IFeeManager)22550": { "encoding": "inplace", "label": "contract IFeeManager", "numberOfBytes": "20" },
      "t_contract(IPerpetualManager)22930": {
        "encoding": "inplace",
        "label": "contract IPerpetualManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStableMaster)23594": {
        "encoding": "inplace",
        "label": "contract IStableMaster",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(StrategyParams)22953_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StrategyParams)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyParams)22953_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)16814_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)16814_storage"
      },
      "t_struct(RoleData)16814_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 16811,
            "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16813,
            "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyParams)22953_storage": {
        "encoding": "inplace",
        "label": "struct StrategyParams",
        "members": [
          {
            "astId": 22948,
            "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
            "label": "lastReport",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22950,
            "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
            "label": "totalStrategyDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22952,
            "contract": "contracts/poolManager/PoolManager.sol:PoolManager",
            "label": "debtRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" },
      "t_uint64": { "encoding": "inplace", "label": "uint64", "numberOfBytes": "8" }
    }
  }
}
