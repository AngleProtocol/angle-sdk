{
  "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
  "abi": [
    {
      "inputs": [
        { "internalType": "address", "name": "_rewardToken", "type": "address" },
        { "internalType": "address", "name": "_feeDistributor", "type": "address" },
        { "internalType": "address", "name": "_stableMaster", "type": "address" },
        { "internalType": "address", "name": "whitelisted", "type": "address" },
        { "internalType": "address", "name": "governor", "type": "address" },
        { "internalType": "address[]", "name": "guardians", "type": "address[]" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "newFeeDistributor", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "oldFeeDistributor", "type": "address" }
      ],
      "name": "FeeDistributorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "token", "type": "address" },
        { "indexed": false, "internalType": "bytes", "name": "newPath", "type": "bytes" },
        { "indexed": false, "internalType": "bytes", "name": "oldPath", "type": "bytes" }
      ],
      "name": "PathUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" },
        { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "indexed": true, "internalType": "address", "name": "account", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": true, "internalType": "address", "name": "token", "type": "address" }],
      "name": "TokenRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELISTED_ROLE",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "token", "type": "address" }],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "token", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" },
        { "internalType": "uint256", "name": "", "type": "uint256" },
        { "internalType": "bool", "name": "transfer", "type": "bool" }
      ],
      "name": "buyback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [{ "internalType": "contract IFeeDistributor", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }],
      "name": "getRoleAdmin",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "hasRole",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "pause", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "tokenAddress", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "role", "type": "bytes32" },
        { "internalType": "address", "name": "account", "type": "address" }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendToFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "_feeDistributor", "type": "address" }],
      "name": "setFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableMaster",
      "outputs": [{ "internalType": "contract IStableMasterFront", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedToken",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "unpause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
    "transactionIndex": 17,
    "gasUsed": "1965146",
    "logsBloom": "0x
    "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687",
    "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0x550610839F32AbDab47190484B481F947609392b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d49fa97fe1a56d42c8082ffaa56a9525cc8675ea",
          "0x0000000000000000000000000af9f44343a7984a8aa7e1f46b7fcdc0adaa2b6e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 68,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000003931c80bf7a911fcda8b684b23a433d124b59f06",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b49",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e",
          "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e"
        ],
        "data": "0x",
        "logIndex": 72,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x8429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b49",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0xD49fa97fe1A56d42C8082fFaA56A9525cC8675ea",
        "topics": ["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],
        "data": "0x0000000000000000000000008a97fbd532a5c1ed67fd67c11dd76013abac840e",
        "logIndex": 76,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10171908,
        "transactionHash": "0xe552e89b9e5f5d168be37d83f5a5c81b796fc9a337641d5be9bad321901c4ba8",
        "address": "0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d49fa97fe1a56d42c8082ffaa56a9525cc8675ea",
          "0x000000000000000000000000a804060182977c3ccacee5ee46884192f553ebb4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 77,
        "blockHash": "0xc6282bf8ae1367c1b54d183dbaed33ddb7076fe6ec1d3fa0f9a2b9aa5225d687"
      }
    ],
    "blockNumber": 10171908,
    "cumulativeGasUsed": "9272950",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x550610839F32AbDab47190484B481F947609392b",
    "0x0aF9f44343a7984A8Aa7E1F46b7fcdc0aDaA2B6e",
    "0xA804060182977c3CcACee5ee46884192f553EbB4",
    "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    ["0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e", "0x3931C80BF7a911fcda8b684b23A433D124b59F06"]
  ],
  "solcInputHash": "f5b703f620df957f43c941891d87f163",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeDistributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeDistributor\",\"type\":\"address\"}],\"name\":\"FeeDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newPath\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldPath\",\"type\":\"bytes\"}],\"name\":\"PathUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transfer\",\"type\":\"bool\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"contract IFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableMaster\",\"outputs\":[{\"internalType\":\"contract IStableMasterFront\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This contract gets sanTokens from a token of the Angle protocol\",\"kind\":\"dev\",\"methods\":{\"burn(address)\":{\"details\":\"This function is what allows for composability between different `SurplusConverter` contracts: a surplus converter having swapped tokens can send its output token to another surplus converter, responsible for doing another type of conversion, by calling this contract\",\"params\":{\"token\":\"Address of the token to pull\"}},\"buyback(address,uint256,uint256,bool)\":{\"details\":\"In this contract the `rewardToken` is a sanToken, so this function essentially deposits collateral in the Angle ProtocolThere is no need to put slippage protection here as there is no slippage for SLPs deposits in the Angle Protocol\",\"params\":{\"amount\":\"Amount of tokens to use for the buyback\",\"token\":\"Token to use for buybacks of `rewardToken`\",\"transfer\":\"Whether the function should transfer the bought back `rewardToken` directly to the `FeeDistributor` contract or to the associated `SurplusConverter` contract\"}},\"constructor\":{\"params\":{\"_feeDistributor\":\"Reference to the contract handling fee distribution\",\"_rewardToken\":\"Reward token that this contract tries to buy\",\"_stableMaster\":\"Reference to the `stableMaster` contract\",\"governor\":\"Governor of the protocol\",\"guardians\":\"List of guardians of the protocol\",\"whitelisted\":\"Reference to the first whitelisted address that will have the right\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"After calling this function, it is going to be impossible for whitelisted addresses to buyback reward tokens or to send the bought back tokens to the `FeeDistributor`\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,address,uint256)\":{\"details\":\"Added to support recovering rewardToken in case of impossible buybacks and other tokens mistakenly sent to this contract\",\"params\":{\"amount\":\"Amount to transfer\",\"to\":\"Address to transfer to\",\"tokenAddress\":\"Address of the ERC20 token to withdraw\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"sendToFeeDistributor()\":{\"details\":\"The reason for having this function rather than doing such transfers directly in the `buyback` function is that it can allow to batch transfers and thus optimizes for gas\"},\"setFeeDistributor(address)\":{\"details\":\"This function is a governor only function as it could technically be used to withdraw funds from the protocol\",\"params\":{\"_feeDistributor\":\"Reference to the new `FeeDistributor`\"}}},\"title\":\"SurplusConverterSanTokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"GOVERNOR_ROLE()\":{\"notice\":\"Role for governor of this contract\"},\"GUARDIAN_ROLE()\":{\"notice\":\"Role for guardians of this contract\"},\"WHITELISTED_ROLE()\":{\"notice\":\"Role for addresses allowed to redistribute the protocol's surplus\"},\"burn(address)\":{\"notice\":\"Pulls tokens from another `SurplusConverter` contract\"},\"buyback(address,uint256,uint256,bool)\":{\"notice\":\"Mints `rewardToken` from the protocol itself using the accumulated `token` and distributes the results of the swaps to the `FeeDistributor` or some other `SurplusConverter` contract\"},\"constructor\":{\"notice\":\"Constructor of the `SurplusConverterSanTokens`\"},\"feeDistributor()\":{\"notice\":\"Address responsible for distributing bought back reward tokens to veANGLE holders or for swapping the reward token of this contract to another token\"},\"pause()\":{\"notice\":\"Pauses the `buyback`, `sendToFeeDistributor` and `burn` methods\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens that could accrue on this contract\"},\"rewardToken()\":{\"notice\":\"Reward Token obtained by this contract\"},\"sendToFeeDistributor()\":{\"notice\":\"This function transfers all the accumulated `rewardToken` to the `FeeDistributor` contract\"},\"setFeeDistributor(address)\":{\"notice\":\"Changes the reference to the `FeeDistributor` allowed to distribute rewards to veANGLE holders or to swap the reward token to another token\"},\"unpause()\":{\"notice\":\"Unpauses the `buyback` and `sendToFeeDistributor` methods\"}},\"notice\":\"A contract to swap tokens from the surplus of the protocol to a reward token (could be ANGLE tokens, or another type of token)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/surplus/SurplusConverterSanTokens.sol\":\"SurplusConverterSanTokens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/external/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14f6a40365c520e587ddc50dbe238cea9dcd5f6b99961528376d68566b10051b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xa1efc50a13a55d4e533ec03ee30006a9ce55df30d33e44fd93a9896765cea2eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb2c30a33c8210d99b5d3eda0c391fde5a91c122361795c65cffc9e0fee6b982e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IFeeDistributor\\n/// @author Interface of the `FeeDistributor` contract\\n/// @dev This interface is used by the `SurplusConverter` contract to send funds to the `FeeDistributor`\\ninterface IFeeDistributor {\\n    function burn(address token) external;\\n}\\n\\n/// @title IFeeDistributorFront\\n/// @author Interface for public use of the `FeeDistributor` contract\\n/// @dev This interface is used for user related function\\ninterface IFeeDistributorFront {\\n    function token() external returns (address);\\n\\n    function claim(address _addr) external returns (uint256);\\n\\n    function claim(address[20] memory _addr) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf1a1e2cc5427a18f6e6f463c05547d2183b254b10710eb35ffbab7788ba65d79\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7afc0ffbbe114c38cc447805e375fe75b3b6a4f947a5b2737225db03825372bf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdff1e21452e346fd841752ea50fb6bc6fd6c502eb27569d3ebb92ee667f3a29d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\\n/// @title Interface of the contract managing perpetuals with claim function\\n/// @author Angle Core Team\\n/// @dev Front interface with rewards function, meaning only user-facing functions\\ninterface IPerpetualManagerFrontWithClaim is IPerpetualManagerFront, IPerpetualManager {\\n    function getReward(uint256 perpetualID) external;\\n}\\n\",\"keccak256\":\"0xdedceeaa33dd4779bcb9a34caf38e4e16849ea801f071308968d80c05c4828bb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\",\"keccak256\":\"0x522874693d1bc7322cd505c644904cf34bf4a9edb8a7f36e8a981cbff1b02085\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISanToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2990e0418bb60d20bde72b7d2ba4dc5bdda028df4301df2a2fe065842393d49\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\",\"keccak256\":\"0xd3c6c2eacc6ae145102609fd930c3f1a1bfe69b119ae820e35dbf28d2c9cf9fe\",\"license\":\"GPL-3.0\"},\"contracts/surplus/BaseSurplusConverter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IFeeDistributor.sol\\\";\\nimport \\\"../external/AccessControl.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/// @title BaseSurplusConverter\\n/// @author Angle Core Team\\n/// @notice A base contract for the swap tokens from the surplus of the protocol to a reward token\\n/// (could be ANGLE tokens, or another type of token like sanTokens)\\n/// @dev All contracts implementing such swap features in Angle should implement this base contract\\nabstract contract BaseSurplusConverter is AccessControl, Pausable, IFeeDistributor {\\n    using SafeERC20 for IERC20;\\n\\n    event FeeDistributorUpdated(address indexed newFeeDistributor, address indexed oldFeeDistributor);\\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n\\n    /// @notice Role for governor of this contract\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n\\n    /// @notice Role for guardians of this contract\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    /// @notice Role for addresses allowed to redistribute the protocol's surplus\\n    bytes32 public constant WHITELISTED_ROLE = keccak256(\\\"WHITELISTED_ROLE\\\");\\n\\n    /// @notice Address responsible for distributing bought back reward tokens to veANGLE holders or for swapping\\n    /// the reward token of this contract to another token\\n    IFeeDistributor public feeDistributor;\\n\\n    /// @notice Reward Token obtained by this contract\\n    IERC20 public immutable rewardToken;\\n\\n    /// @notice Constructor of the `BaseSurplusConverter`\\n    /// @param _rewardToken Reward token that this contract tries to buy or otain\\n    /// @param _feeDistributor Reference to the contract handling fee distribution\\n    /// @param whitelisted Reference to the first whitelisted address that will have the right to perform buybacks\\n    /// @param governor Governor of the protocol\\n    /// @param guardians List of guardians of the protocol\\n    /// @dev Having a list of guardians as a parameter facilitates deployment of the contract\\n    constructor(\\n        address _rewardToken,\\n        address _feeDistributor,\\n        address whitelisted,\\n        address governor,\\n        address[] memory guardians\\n    ) {\\n        require(_feeDistributor != address(0) && whitelisted != address(0) && governor != address(0), \\\"0\\\");\\n        feeDistributor = IFeeDistributor(_feeDistributor);\\n        rewardToken = IERC20(_rewardToken);\\n        // The function is going to revert because of the following call if the `_rewardToken` parameter is the\\n        // zero address\\n        IERC20(_rewardToken).safeApprove(_feeDistributor, type(uint256).max);\\n        require(guardians.length > 0, \\\"101\\\");\\n        for (uint256 i = 0; i < guardians.length; i++) {\\n            require(guardians[i] != address(0), \\\"0\\\");\\n            _setupRole(GUARDIAN_ROLE, guardians[i]);\\n        }\\n        _setupRole(WHITELISTED_ROLE, whitelisted);\\n        _setupRole(GOVERNOR_ROLE, governor);\\n        _setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, GOVERNOR_ROLE);\\n        _setRoleAdmin(WHITELISTED_ROLE, GUARDIAN_ROLE);\\n        // Contract is paused after deployment\\n        _pause();\\n    }\\n\\n    /// @notice Changes the reference to the `FeeDistributor` allowed to distribute rewards to veANGLE holders\\n    /// or to swap the reward token to another token\\n    /// @param _feeDistributor Reference to the new `FeeDistributor`\\n    /// @dev This function is a governor only function as it could technically be used to withdraw funds from the protocol\\n    function setFeeDistributor(address _feeDistributor) external onlyRole(GOVERNOR_ROLE) {\\n        require(_feeDistributor != address(0), \\\"0\\\");\\n        address oldFeeDistributor = address(feeDistributor);\\n        feeDistributor = IFeeDistributor(_feeDistributor);\\n        IERC20 rewardTokenMem = rewardToken;\\n        rewardTokenMem.safeApprove(_feeDistributor, type(uint256).max);\\n        rewardTokenMem.safeApprove(oldFeeDistributor, 0);\\n        emit FeeDistributorUpdated(_feeDistributor, oldFeeDistributor);\\n    }\\n\\n    /// @notice Withdraws ERC20 tokens that could accrue on this contract\\n    /// @param tokenAddress Address of the ERC20 token to withdraw\\n    /// @param to Address to transfer to\\n    /// @param amount Amount to transfer\\n    /// @dev Added to support recovering rewardToken in case of impossible buybacks\\n    /// and other tokens mistakenly sent to this contract\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(GOVERNOR_ROLE) {\\n        IERC20(tokenAddress).safeTransfer(to, amount);\\n        emit Recovered(tokenAddress, to, amount);\\n    }\\n\\n    /// @notice Pauses the `buyback`, `sendToFeeDistributor` and `burn` methods\\n    /// @dev After calling this function, it is going to be impossible for whitelisted addresses to buyback\\n    /// reward tokens or to send the bought back tokens to the `FeeDistributor`\\n    function pause() external onlyRole(GUARDIAN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the `buyback` and `sendToFeeDistributor` methods\\n    function unpause() external onlyRole(GUARDIAN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Buys back `rewardToken` using the accumulated `token` and distributes the results of the\\n    /// swaps to the `feeDistributor` contract (which can be another `SurplusConverter`)\\n    /// @param token Token to use for buybacks of `rewardToken`\\n    /// @param amount Amount of tokens to use for the buyback\\n    /// @param minAmount Specify the minimum amount to receive - slippage protection\\n    /// @param transfer Whether the function should transfer the bought back `rewardToken` directly to the `FeeDistributor`\\n    /// contract\\n    /// @dev This function should revert if `amount` is inferior to the amount of `token` owned by this contract\\n    /// @dev The reason for the variable `amount` instead of simply using the whole contract's balance for buybacks\\n    /// is that it gives more flexibility to the addresses handling buyback to optimize for the swap prices\\n    /// @dev This function should be whitelisted because arbitrageurs could take advantage of it to do sandwich attacks\\n    /// by just calling this function. Calls to this function could be sandwiched too but it's going harder for miners to\\n    /// setup sandwich attacks\\n    function buyback(\\n        address token,\\n        uint256 amount,\\n        uint256 minAmount,\\n        bool transfer\\n    ) external virtual;\\n\\n    /// @notice Pulls tokens from another `SurplusConverter` contract\\n    /// @param token Address of the token to pull\\n    /// @dev This function is what allows for composability between different `SurplusConverter` contracts: a surplus converter\\n    /// having swapped tokens can send its output token to another surplus converter, responsible for doing another type\\n    /// of conversion, by calling this contract\\n    function burn(address token) external override whenNotPaused {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), IERC20(token).balanceOf(msg.sender));\\n    }\\n\\n    /// @notice This function transfers all the accumulated `rewardToken` to the `FeeDistributor` contract\\n    /// @dev The reason for having this function rather than doing such transfers directly in the `buyback` function is that\\n    /// it can allow to batch transfers and thus optimizes for gas\\n    function sendToFeeDistributor() external whenNotPaused {\\n        feeDistributor.burn(address(rewardToken));\\n    }\\n}\\n\",\"keccak256\":\"0xf3dc55bef98184da693b0a2fbbc5fb6fd142e6518eb7b1ca657365bc7eda3614\",\"license\":\"GPL-3.0\"},\"contracts/surplus/SurplusConverterSanTokens.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/IStableMaster.sol\\\";\\nimport \\\"../interfaces/ISanToken.sol\\\";\\nimport \\\"./BaseSurplusConverter.sol\\\";\\n\\ninterface IStableMasterFront {\\n    function deposit(\\n        uint256 amount,\\n        address to,\\n        address poolManager\\n    ) external;\\n}\\n\\n/// @title SurplusConverterSanTokens\\n/// @author Angle Core Team\\n/// @notice A contract to swap tokens from the surplus of the protocol to a reward token\\n/// (could be ANGLE tokens, or another type of token)\\n/// @dev This contract gets sanTokens from a token of the Angle protocol\\ncontract SurplusConverterSanTokens is BaseSurplusConverter {\\n    using SafeERC20 for IERC20;\\n\\n    event PathUpdated(address indexed token, bytes newPath, bytes oldPath);\\n    event TokenRevoked(address indexed token);\\n\\n    IStableMasterFront public immutable stableMaster;\\n    address public immutable poolManager;\\n    address public immutable supportedToken;\\n\\n    /// @notice Constructor of the `SurplusConverterSanTokens`\\n    /// @param _rewardToken Reward token that this contract tries to buy\\n    /// @param _feeDistributor Reference to the contract handling fee distribution\\n    /// @param _stableMaster Reference to the `stableMaster` contract\\n    /// @param whitelisted Reference to the first whitelisted address that will have the right\\n    /// @param governor Governor of the protocol\\n    /// @param guardians List of guardians of the protocol\\n    constructor(\\n        address _rewardToken,\\n        address _feeDistributor,\\n        address _stableMaster,\\n        address whitelisted,\\n        address governor,\\n        address[] memory guardians\\n    ) BaseSurplusConverter(_rewardToken, _feeDistributor, whitelisted, governor, guardians) {\\n        require(_stableMaster != address(0), \\\"0\\\");\\n        stableMaster = IStableMasterFront(_stableMaster);\\n        // This will revert if the rewardToken of this contract is not a sanToken\\n        address poolManagerInt = ISanToken(_rewardToken).poolManager();\\n        poolManager = poolManagerInt;\\n        address supportedTokenInt = IPoolManager(poolManagerInt).token();\\n        supportedToken = supportedTokenInt;\\n        IERC20(supportedTokenInt).safeApprove(_stableMaster, type(uint256).max);\\n    }\\n\\n    /// @notice Mints `rewardToken` from the protocol itself using the accumulated `token` and distributes\\n    /// the results of the swaps to the `FeeDistributor` or some other `SurplusConverter` contract\\n    /// @param token Token to use for buybacks of `rewardToken`\\n    /// @param amount Amount of tokens to use for the buyback\\n    /// @param transfer Whether the function should transfer the bought back `rewardToken` directly to the `FeeDistributor`\\n    /// contract or to the associated `SurplusConverter` contract\\n    /// @dev In this contract the `rewardToken` is a sanToken, so this function essentially deposits collateral\\n    /// in the Angle Protocol\\n    /// @dev There is no need to put slippage protection here as there is no slippage for SLPs deposits in the Angle\\n    /// Protocol\\n    function buyback(\\n        address token,\\n        uint256 amount,\\n        uint256,\\n        bool transfer\\n    ) external override whenNotPaused onlyRole(WHITELISTED_ROLE) {\\n        require(token == supportedToken, \\\"20\\\");\\n        stableMaster.deposit(amount, address(this), poolManager);\\n        if (transfer) {\\n            // This call will automatically transfer all the `rewardToken` balance of this contract to the `FeeDistributor`\\n            feeDistributor.burn(address(rewardToken));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc2d781131144d802819bcb2920940366c868a3fcca3aeb32673de0e03064b266\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620029ea380380620029ea8339810160408190526200003591620009f6565b6001805460ff1916905585858484846001600160a01b038416158015906200006557506001600160a01b03831615155b80156200007a57506001600160a01b03821615155b620000b05760405162461bcd60e51b81526020600482015260016024820152600360fc1b60448201526064015b60405180910390fd5b60018054610100600160a81b0319166101006001600160a01b038781169190910291909117909155606086901b6001600160601b031916608052620001079086168560001962000465602090811b62000d0617901c565b6000815111620001405760405162461bcd60e51b815260206004820152600360248201526231303160e81b6044820152606401620000a7565b60005b8151811015620002045760006001600160a01b03168282815181106200016d576200016d62000c1c565b60200260200101516001600160a01b03161415620001b25760405162461bcd60e51b81526020600482015260016024820152600360fc1b6044820152606401620000a7565b620001ef600080516020620029ca833981519152838381518110620001db57620001db62000c1c565b6020026020010151620005c460201b60201c565b80620001fb8162000bf2565b91505062000143565b5062000220600080516020620029aa83398151915284620005c4565b6200023b6000805160206200298a83398151915283620005c4565b620002566000805160206200298a83398151915280620005d4565b62000280600080516020620029ca8339815191526000805160206200298a833981519152620005d4565b620002aa600080516020620029aa833981519152600080516020620029ca833981519152620005d4565b620002b462000628565b50505050506001600160a01b038416620002f55760405162461bcd60e51b81526020600482015260016024820152600360fc1b6044820152606401620000a7565b836001600160a01b031660a0816001600160a01b031660601b815250506000866001600160a01b031663dc4c90d36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200034e57600080fd5b505afa15801562000363573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003899190620009d8565b9050806001600160a01b031660c0816001600160a01b031660601b815250506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003e457600080fd5b505afa158015620003f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200041f9190620009d8565b606081901b6001600160601b03191660e0529050620004576001600160a01b0382168760001962000465602090811b62000d0617901c565b505050505050505062000c48565b801580620004f35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015620004b657600080fd5b505afa158015620004cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f1919062000b52565b155b620005675760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401620000a7565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620005bf918591620006b116565b505050565b620005d082826200078f565b5050565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b60015460ff1615620006705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401620000a7565b6001805460ff1916811790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60006200070d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200082f60201b62000f15179092919060201c565b805190915015620005bf57808060200190518101906200072e919062000b2e565b620005bf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620000a7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620005d0576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620007eb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60606200084084846000856200084a565b90505b9392505050565b606082471015620008ad5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620000a7565b843b620008fd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620000a7565b600080866001600160a01b031685876040516200091b919062000b6c565b60006040518083038185875af1925050503d80600081146200095a576040519150601f19603f3d011682016040523d82523d6000602084013e6200095f565b606091505b509092509050620009728282866200097d565b979650505050505050565b606083156200098e57508162000843565b8251156200099f5782518084602001fd5b8160405162461bcd60e51b8152600401620000a7919062000b8a565b80516001600160a01b0381168114620009d357600080fd5b919050565b600060208284031215620009eb57600080fd5b6200084382620009bb565b60008060008060008060c0878903121562000a1057600080fd5b62000a1b87620009bb565b9550602062000a2c818901620009bb565b955062000a3c60408901620009bb565b945062000a4c60608901620009bb565b935062000a5c60808901620009bb565b60a08901519093506001600160401b038082111562000a7a57600080fd5b818a0191508a601f83011262000a8f57600080fd5b81518181111562000aa45762000aa462000c32565b8060051b604051601f19603f8301168101818110858211171562000acc5762000acc62000c32565b604052828152858101935084860182860187018f101562000aec57600080fd5b600095505b8386101562000b1a5762000b0581620009bb565b85526001959095019493860193860162000af1565b508096505050505050509295509295509295565b60006020828403121562000b4157600080fd5b815180151581146200084357600080fd5b60006020828403121562000b6557600080fd5b5051919050565b6000825162000b8081846020870162000bbf565b9190910192915050565b602081526000825180602084015262000bab81604085016020870162000bbf565b601f01601f19169190910160400192915050565b60005b8381101562000bdc57818101518382015260200162000bc2565b8381111562000bec576000848401525b50505050565b600060001982141562000c1557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c60c05160601c60e05160601c611cd262000cb8600039600081816101db01526108de0152600081816103d101526109db0152600081816102bc0152610a030152600081816103f8015281816105b001528181610aa50152610c110152611cd26000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80637a3226ec116100d8578063adce20581161008c578063d547741f11610066578063d547741f146103b9578063dc4c90d3146103cc578063f7c618c1146103f357600080fd5b8063adce20581461036c578063ccc574901461037f578063ccfc2e8d146103a657600080fd5b806389afcb44116100bd57806389afcb441461030d57806391d1485414610320578063a217fddf1461036457600080fd5b80637a3226ec146102de5780638456cb591461030557600080fd5b80632f2ff15d1161013a5780633f4ba83a116101145780633f4ba83a146102985780635c975abb146102a05780636ac5dc46146102b757600080fd5b80632f2ff15d1461026a57806333baecb21461027d57806336568abe1461028557600080fd5b80631171bda91161016b5780631171bda9146101fd578063248a9ca31461021257806324ea54f41461024357600080fd5b80630d43e8ad146101875780630ee0599c146101d6575b600080fd5b6001546101ac90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b61021061020b36600461195e565b61041a565b005b6102356102203660046119ff565b60009081526020819052604090206001015490565b6040519081526020016101cd565b6102357f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b610210610278366004611a18565b6104d3565b6102106104fe565b610210610293366004611a18565b61061d565b6102106106aa565b60015460ff165b60405190151581526020016101cd565b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b6102357f8429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b4981565b6102106106e0565b61021061031b366004611943565b610713565b6102a761032e366004611a18565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b610235600081565b61021061037a36600461199a565b610844565b6102357f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6102106103b4366004611943565b610b18565b6102106103c7366004611a18565b610ce0565b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556104458133610f2e565b61046673ffffffffffffffffffffffffffffffffffffffff85168484610ffe565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648846040516104c591815260200190565b60405180910390a350505050565b6000828152602081905260409020600101546104ef8133610f2e565b6104f98383611054565b505050565b60015460ff1615610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152610100909204909116906389afcb4490602401600060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610567565b6106a68282611144565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416106d58133610f2e565b6106dd6111fb565b50565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161070b8133610f2e565b6106dd6112dc565b60015460ff1615610780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610567565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482018190526106dd91309073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190611a44565b73ffffffffffffffffffffffffffffffffffffffff851692919061139a565b60015460ff16156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610567565b7f8429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b496108dc8133610f2e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f32300000000000000000000000000000000000000000000000000000000000006044820152606401610567565b6040517f2e2d29840000000000000000000000000000000000000000000000000000000081526004810185905230602482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660448301527f00000000000000000000000000000000000000000000000000000000000000001690632e2d298490606401600060405180830381600087803b158015610a4757600080fd5b505af1158015610a5b573d6000803e3d6000fd5b505050508115610b11576001546040517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152610100909204909116906389afcb4490602401600060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050505b5050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610b438133610f2e565b73ffffffffffffffffffffffffffffffffffffffff8216610bc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610567565b6001805473ffffffffffffffffffffffffffffffffffffffff8481166101009081027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416179093559190048116907f000000000000000000000000000000000000000000000000000000000000000090610c5e908216857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d06565b610c8073ffffffffffffffffffffffffffffffffffffffff8216836000610d06565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fbb470d12faa974cbae56bc3c345446451b4d504aa13806836f3df6d032fa9a9160405160405180910390a350505050565b600082815260208190526040902060010154610cfc8133610f2e565b6104f98383611144565b801580610db557506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190611a44565b155b610e41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610567565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104f99084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526113f8565b6060610f248484600085611504565b90505b9392505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106a657610f848173ffffffffffffffffffffffffffffffffffffffff166014611684565b610f8f836020611684565b604051602001610fa0929190611a79565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261056791600401611afa565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104f99084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610e93565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106a65760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556110e63390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106a65760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610567565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60015460ff1615611349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610567565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336112b2565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526106179085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610e93565b600061145a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f159092919063ffffffff16565b8051909150156104f9578080602001905181019061147891906119e2565b6104f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610567565b606082471015611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610567565b843b6115fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610567565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116279190611a5d565b60006040518083038185875af1925050503d8060008114611664576040519150601f19603f3d011682016040523d82523d6000602084013e611669565b606091505b50915091506116798282866118c7565b979650505050505050565b60606000611693836002611b63565b61169e906002611b4b565b67ffffffffffffffff8111156116b6576116b6611c5f565b6040519080825280601f01601f1916602001820160405280156116e0576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061171757611717611c30565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061177a5761177a611c30565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006117b6846002611b63565b6117c1906001611b4b565b90505b600181111561185e577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061180257611802611c30565b1a60f81b82828151811061181857611818611c30565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361185781611bcc565b90506117c4565b508315610f27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610567565b606083156118d6575081610f27565b8251156118e65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105679190611afa565b803573ffffffffffffffffffffffffffffffffffffffff8116811461193e57600080fd5b919050565b60006020828403121561195557600080fd5b610f278261191a565b60008060006060848603121561197357600080fd5b61197c8461191a565b925061198a6020850161191a565b9150604084013590509250925092565b600080600080608085870312156119b057600080fd5b6119b98561191a565b9350602085013592506040850135915060608501356119d781611c8e565b939692955090935050565b6000602082840312156119f457600080fd5b8151610f2781611c8e565b600060208284031215611a1157600080fd5b5035919050565b60008060408385031215611a2b57600080fd5b82359150611a3b6020840161191a565b90509250929050565b600060208284031215611a5657600080fd5b5051919050565b60008251611a6f818460208701611ba0565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ab1816017850160208801611ba0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611aee816028840160208801611ba0565b01602801949350505050565b6020815260008251806020840152611b19816040850160208701611ba0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611b5e57611b5e611c01565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b9b57611b9b611c01565b500290565b60005b83811015611bbb578181015183820152602001611ba3565b838111156106175750506000910152565b600081611bdb57611bdb611c01565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80151581146106dd57600080fdfea264697066735822122091352a83ef8f015af8bd03f1514edc5376cadf8585eb2fc0d7c235c03789b14364736f6c634300080700337935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f558429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b4955435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80637a3226ec116100d8578063adce20581161008c578063d547741f11610066578063d547741f146103b9578063dc4c90d3146103cc578063f7c618c1146103f357600080fd5b8063adce20581461036c578063ccc574901461037f578063ccfc2e8d146103a657600080fd5b806389afcb44116100bd57806389afcb441461030d57806391d1485414610320578063a217fddf1461036457600080fd5b80637a3226ec146102de5780638456cb591461030557600080fd5b80632f2ff15d1161013a5780633f4ba83a116101145780633f4ba83a146102985780635c975abb146102a05780636ac5dc46146102b757600080fd5b80632f2ff15d1461026a57806333baecb21461027d57806336568abe1461028557600080fd5b80631171bda91161016b5780631171bda9146101fd578063248a9ca31461021257806324ea54f41461024357600080fd5b80630d43e8ad146101875780630ee0599c146101d6575b600080fd5b6001546101ac90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b61021061020b36600461195e565b61041a565b005b6102356102203660046119ff565b60009081526020819052604090206001015490565b6040519081526020016101cd565b6102357f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504181565b610210610278366004611a18565b6104d3565b6102106104fe565b610210610293366004611a18565b61061d565b6102106106aa565b60015460ff165b60405190151581526020016101cd565b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b6102357f8429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b4981565b6102106106e0565b61021061031b366004611943565b610713565b6102a761032e366004611a18565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b610235600081565b61021061037a36600461199a565b610844565b6102357f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b6102106103b4366004611943565b610b18565b6102106103c7366004611a18565b610ce0565b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b6101ac7f000000000000000000000000000000000000000000000000000000000000000081565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556104458133610f2e565b61046673ffffffffffffffffffffffffffffffffffffffff85168484610ffe565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648846040516104c591815260200190565b60405180910390a350505050565b6000828152602081905260409020600101546104ef8133610f2e565b6104f98383611054565b505050565b60015460ff1615610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152610100909204909116906389afcb4490602401600060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f37310000000000000000000000000000000000000000000000000000000000006044820152606401610567565b6106a68282611144565b5050565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a50416106d58133610f2e565b6106dd6111fb565b50565b7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504161070b8133610f2e565b6106dd6112dc565b60015460ff1615610780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610567565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482018190526106dd91309073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190611a44565b73ffffffffffffffffffffffffffffffffffffffff851692919061139a565b60015460ff16156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610567565b7f8429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b496108dc8133610f2e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f32300000000000000000000000000000000000000000000000000000000000006044820152606401610567565b6040517f2e2d29840000000000000000000000000000000000000000000000000000000081526004810185905230602482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660448301527f00000000000000000000000000000000000000000000000000000000000000001690632e2d298490606401600060405180830381600087803b158015610a4757600080fd5b505af1158015610a5b573d6000803e3d6000fd5b505050508115610b11576001546040517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152610100909204909116906389afcb4490602401600060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050505b5050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610b438133610f2e565b73ffffffffffffffffffffffffffffffffffffffff8216610bc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f30000000000000000000000000000000000000000000000000000000000000006044820152606401610567565b6001805473ffffffffffffffffffffffffffffffffffffffff8481166101009081027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416179093559190048116907f000000000000000000000000000000000000000000000000000000000000000090610c5e908216857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d06565b610c8073ffffffffffffffffffffffffffffffffffffffff8216836000610d06565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fbb470d12faa974cbae56bc3c345446451b4d504aa13806836f3df6d032fa9a9160405160405180910390a350505050565b600082815260208190526040902060010154610cfc8133610f2e565b6104f98383611144565b801580610db557506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190611a44565b155b610e41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610567565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104f99084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526113f8565b6060610f248484600085611504565b90505b9392505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106a657610f848173ffffffffffffffffffffffffffffffffffffffff166014611684565b610f8f836020611684565b604051602001610fa0929190611a79565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261056791600401611afa565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104f99084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610e93565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106a65760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556110e63390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106a65760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610567565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60015460ff1615611349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610567565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336112b2565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526106179085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610e93565b600061145a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f159092919063ffffffff16565b8051909150156104f9578080602001905181019061147891906119e2565b6104f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610567565b606082471015611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610567565b843b6115fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610567565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116279190611a5d565b60006040518083038185875af1925050503d8060008114611664576040519150601f19603f3d011682016040523d82523d6000602084013e611669565b606091505b50915091506116798282866118c7565b979650505050505050565b60606000611693836002611b63565b61169e906002611b4b565b67ffffffffffffffff8111156116b6576116b6611c5f565b6040519080825280601f01601f1916602001820160405280156116e0576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061171757611717611c30565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061177a5761177a611c30565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006117b6846002611b63565b6117c1906001611b4b565b90505b600181111561185e577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061180257611802611c30565b1a60f81b82828151811061181857611818611c30565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361185781611bcc565b90506117c4565b508315610f27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610567565b606083156118d6575081610f27565b8251156118e65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105679190611afa565b803573ffffffffffffffffffffffffffffffffffffffff8116811461193e57600080fd5b919050565b60006020828403121561195557600080fd5b610f278261191a565b60008060006060848603121561197357600080fd5b61197c8461191a565b925061198a6020850161191a565b9150604084013590509250925092565b600080600080608085870312156119b057600080fd5b6119b98561191a565b9350602085013592506040850135915060608501356119d781611c8e565b939692955090935050565b6000602082840312156119f457600080fd5b8151610f2781611c8e565b600060208284031215611a1157600080fd5b5035919050565b60008060408385031215611a2b57600080fd5b82359150611a3b6020840161191a565b90509250929050565b600060208284031215611a5657600080fd5b5051919050565b60008251611a6f818460208701611ba0565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ab1816017850160208801611ba0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611aee816028840160208801611ba0565b01602801949350505050565b6020815260008251806020840152611b19816040850160208701611ba0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611b5e57611b5e611c01565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b9b57611b9b611c01565b500290565b60005b83811015611bbb578181015183820152602001611ba3565b838111156106175750506000910152565b600081611bdb57611bdb611c01565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80151581146106dd57600080fdfea264697066735822122091352a83ef8f015af8bd03f1514edc5376cadf8585eb2fc0d7c235c03789b14364736f6c63430008070033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This contract gets sanTokens from a token of the Angle protocol",
    "kind": "dev",
    "methods": {
      "burn(address)": {
        "details": "This function is what allows for composability between different `SurplusConverter` contracts: a surplus converter having swapped tokens can send its output token to another surplus converter, responsible for doing another type of conversion, by calling this contract",
        "params": { "token": "Address of the token to pull" }
      },
      "buyback(address,uint256,uint256,bool)": {
        "details": "In this contract the `rewardToken` is a sanToken, so this function essentially deposits collateral in the Angle ProtocolThere is no need to put slippage protection here as there is no slippage for SLPs deposits in the Angle Protocol",
        "params": {
          "amount": "Amount of tokens to use for the buyback",
          "token": "Token to use for buybacks of `rewardToken`",
          "transfer": "Whether the function should transfer the bought back `rewardToken` directly to the `FeeDistributor` contract or to the associated `SurplusConverter` contract"
        }
      },
      "constructor": {
        "params": {
          "_feeDistributor": "Reference to the contract handling fee distribution",
          "_rewardToken": "Reward token that this contract tries to buy",
          "_stableMaster": "Reference to the `stableMaster` contract",
          "governor": "Governor of the protocol",
          "guardians": "List of guardians of the protocol",
          "whitelisted": "Reference to the first whitelisted address that will have the right"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": { "details": "Returns `true` if `account` has been granted `role`." },
      "pause()": {
        "details": "After calling this function, it is going to be impossible for whitelisted addresses to buyback reward tokens or to send the bought back tokens to the `FeeDistributor`"
      },
      "paused()": { "details": "Returns true if the contract is paused, and false otherwise." },
      "recoverERC20(address,address,uint256)": {
        "details": "Added to support recovering rewardToken in case of impossible buybacks and other tokens mistakenly sent to this contract",
        "params": {
          "amount": "Amount to transfer",
          "to": "Address to transfer to",
          "tokenAddress": "Address of the ERC20 token to withdraw"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "sendToFeeDistributor()": {
        "details": "The reason for having this function rather than doing such transfers directly in the `buyback` function is that it can allow to batch transfers and thus optimizes for gas"
      },
      "setFeeDistributor(address)": {
        "details": "This function is a governor only function as it could technically be used to withdraw funds from the protocol",
        "params": { "_feeDistributor": "Reference to the new `FeeDistributor`" }
      }
    },
    "title": "SurplusConverterSanTokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "GOVERNOR_ROLE()": { "notice": "Role for governor of this contract" },
      "GUARDIAN_ROLE()": { "notice": "Role for guardians of this contract" },
      "WHITELISTED_ROLE()": { "notice": "Role for addresses allowed to redistribute the protocol's surplus" },
      "burn(address)": { "notice": "Pulls tokens from another `SurplusConverter` contract" },
      "buyback(address,uint256,uint256,bool)": {
        "notice": "Mints `rewardToken` from the protocol itself using the accumulated `token` and distributes the results of the swaps to the `FeeDistributor` or some other `SurplusConverter` contract"
      },
      "constructor": { "notice": "Constructor of the `SurplusConverterSanTokens`" },
      "feeDistributor()": {
        "notice": "Address responsible for distributing bought back reward tokens to veANGLE holders or for swapping the reward token of this contract to another token"
      },
      "pause()": { "notice": "Pauses the `buyback`, `sendToFeeDistributor` and `burn` methods" },
      "recoverERC20(address,address,uint256)": {
        "notice": "Withdraws ERC20 tokens that could accrue on this contract"
      },
      "rewardToken()": { "notice": "Reward Token obtained by this contract" },
      "sendToFeeDistributor()": {
        "notice": "This function transfers all the accumulated `rewardToken` to the `FeeDistributor` contract"
      },
      "setFeeDistributor(address)": {
        "notice": "Changes the reference to the `FeeDistributor` allowed to distribute rewards to veANGLE holders or to swap the reward token to another token"
      },
      "unpause()": { "notice": "Unpauses the `buyback` and `sendToFeeDistributor` methods" }
    },
    "notice": "A contract to swap tokens from the surplus of the protocol to a reward token (could be ANGLE tokens, or another type of token)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16499,
        "contract": "contracts/surplus/SurplusConverterSanTokens.sol:SurplusConverterSanTokens",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)16494_storage)"
      },
      {
        "astId": 8721,
        "contract": "contracts/surplus/SurplusConverterSanTokens.sol:SurplusConverterSanTokens",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 44577,
        "contract": "contracts/surplus/SurplusConverterSanTokens.sol:SurplusConverterSanTokens",
        "label": "feeDistributor",
        "offset": 1,
        "slot": "1",
        "type": "t_contract(IFeeDistributor)22472"
      }
    ],
    "types": {
      "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
      "t_bool": { "encoding": "inplace", "label": "bool", "numberOfBytes": "1" },
      "t_bytes32": { "encoding": "inplace", "label": "bytes32", "numberOfBytes": "32" },
      "t_contract(IFeeDistributor)22472": {
        "encoding": "inplace",
        "label": "contract IFeeDistributor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)16494_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)16494_storage"
      },
      "t_struct(RoleData)16494_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16491,
            "contract": "contracts/surplus/SurplusConverterSanTokens.sol:SurplusConverterSanTokens",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 16493,
            "contract": "contracts/surplus/SurplusConverterSanTokens.sol:SurplusConverterSanTokens",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}
